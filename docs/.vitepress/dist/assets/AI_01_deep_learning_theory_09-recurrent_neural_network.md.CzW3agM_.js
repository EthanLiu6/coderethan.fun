import{_ as a,c as e,o as t,a2 as n}from"./chunks/framework.DA-Pb-tg.js";const d=JSON.parse('{"title":"0 循环神经网络(Recurrent neural network：RNN)","description":"","frontmatter":{},"headers":[],"relativePath":"AI/01_deep_learning_theory/09-recurrent_neural_network.md","filePath":"AI/01_deep_learning_theory/09-recurrent_neural_network.md","lastUpdated":1743069065000}'),r={name:"AI/01_deep_learning_theory/09-recurrent_neural_network.md"};function p(i,s,l,o,c,m){return t(),e("div",null,s[0]||(s[0]=[n('<h1 id="_0-循环神经网络-recurrent-neural-network-rnn" tabindex="-1">0 循环神经网络(Recurrent neural network：RNN) <a class="header-anchor" href="#_0-循环神经网络-recurrent-neural-network-rnn" aria-label="Permalink to &quot;0 循环神经网络(Recurrent neural network：RNN)&quot;">​</a></h1><p>        循环神经网络(RNN)是前馈神经网络在处理序列数据时的一种<strong>自然推广</strong>。<br></p><p>        就像卷积网络是专门用于处理网格化数据（如一个图像）的神经网络，图像被视为独立的个体，彼此之间没有连续性。而对于一些有明显的上下文特征的序列化输入，如完形填空，句子翻译，那么很明显这样的输出必须依赖以前的输入， 也就是说网络必须拥有一定的<strong>记忆能力</strong>。<br></p><p>        为了赋予网络这样的 记忆力，一种特殊结构的神经网络——递归神经网络(Recurrent Neural Network)便应运而生了。<br></p><h1 id="_2-典型的rnn网络" tabindex="-1">2 典型的RNN网络 <a class="header-anchor" href="#_2-典型的rnn网络" aria-label="Permalink to &quot;2 典型的RNN网络&quot;">​</a></h1><p>        RNNs之所以称为循环神经网路，核心在于一个序列当前的输出与前面的输出也有关, 或者下一时刻的输出要依赖于上一时刻的输出，其典型结构如下图所示：<br></p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/rnn-figure1.jpg" alt="figure1"></p><p>        网络会对前面的信息进行记忆并应用于当前输出的计算中，即隐藏层之间的节点不再无连接而是有连接的，并且隐藏层的输入不仅包括输入层的输出还包括上一时刻隐藏层的输出。<br></p><h1 id="_3-rnn-结构详解" tabindex="-1">3 RNN 结构详解 <a class="header-anchor" href="#_3-rnn-结构详解" aria-label="Permalink to &quot;3 RNN 结构详解&quot;">​</a></h1><h2 id="_3-1-rnn-循环过程如下图所示" tabindex="-1">3.1 RNN 循环过程如下图所示：<br> <a class="header-anchor" href="#_3-1-rnn-循环过程如下图所示" aria-label="Permalink to &quot;3.1 RNN 循环过程如下图所示：&lt;br&gt;&quot;">​</a></h2><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/rnn-gif2.gif" alt="gif2"></p><p>其中隐藏层会重复执行，每次执行我们习惯上称值为一个时间步。<br></p><p>隐藏状态按照下图传递：<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/rnn-gif3.gif" alt="gif2"></p><p>sequence 序列输入过程：<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/rnn-gif10.gif" alt="gif10"></p><h2 id="_3-2-按时间步展开如下" tabindex="-1">3.2 按时间步展开如下：<br> <a class="header-anchor" href="#_3-2-按时间步展开如下" aria-label="Permalink to &quot;3.2 按时间步展开如下：&lt;br&gt;&quot;">​</a></h2><p><strong>动态图如下</strong> <br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/rnn-gif1.gif" alt="gif1"></p><p><strong>静态图如下</strong> <br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/rnn-figure6.jpg" alt="figure6"></p><h2 id="_3-3-经典rnn的计算图如下" tabindex="-1">3.3 经典RNN的计算图如下：<br> <a class="header-anchor" href="#_3-3-经典rnn的计算图如下" aria-label="Permalink to &quot;3.3 经典RNN的计算图如下：&lt;br&gt;&quot;">​</a></h2><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/rnn-figure2.jpg" alt="figure2"></p><p>其中：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mrow><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">x_{t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">t</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> 表示第t(t=1,2,3...t...）个时间步（step）的输入</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mrow><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">s_{t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">s</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">t</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> 为隐藏层的第t步的状态，它是网络的记忆单元</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>o</mi><mrow><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">o_{t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">o</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">t</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> 是第t步的输出</li></ul><h2 id="_3-4-rnn具体计算公式为" tabindex="-1">3.4 RNN具体计算公式为：<br> <a class="header-anchor" href="#_3-4-rnn具体计算公式为" aria-label="Permalink to &quot;3.4 RNN具体计算公式为：&lt;br&gt;&quot;">​</a></h2><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mrow><mi>t</mi></mrow></msub><mo>=</mo><mi>σ</mi><mo>(</mo><msup><mi>W</mi><mrow><mi>s</mi><mi>x</mi></mrow></msup><msub><mi>x</mi><mrow><mi>t</mi></mrow></msub><mo>+</mo><msup><mi>W</mi><mrow><mi>h</mi><mi>h</mi></mrow></msup><msub><mi>s</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">s_{t} = \\sigma(W^{sx}x_{t} + W^{hh}s_{t-1}) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8991079999999999em;"></span><span class="strut bottom" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit">s</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">t</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.13889em;">W</span><span class="vlist"><span style="top:-0.413em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">s</span><span class="mord mathit">x</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">t</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord"><span class="mord mathit" style="margin-right:0.13889em;">W</span><span class="vlist"><span style="top:-0.413em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">h</span><span class="mord mathit">h</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit">s</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">t</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>o</mi><mrow><mi>t</mi></mrow></msub><mo>=</mo><msup><mi>W</mi><mrow><mi>o</mi><mi>h</mi></mrow></msup><msub><mi>s</mi><mrow><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">o_{t} = W^{oh}s_{t} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8991079999999999em;"></span><span class="strut bottom" style="height:1.049108em;vertical-align:-0.15em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord"><span class="mord mathit">o</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">t</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord"><span class="mord mathit" style="margin-right:0.13889em;">W</span><span class="vlist"><span style="top:-0.413em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">o</span><span class="mord mathit">h</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit">s</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">t</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span></span></p><p><strong>思考：上式三个权重矩阵W每个时间步 是同一份数据吗？？？</strong></p><h2 id="_3-5-rnn-工程图展示" tabindex="-1">3.5 RNN 工程图展示： <a class="header-anchor" href="#_3-5-rnn-工程图展示" aria-label="Permalink to &quot;3.5 RNN 工程图展示：&quot;">​</a></h2><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/rnn-figure3.jpg" alt="figure3"></p><p><strong>思考：每个时间步为何没有矩阵相乘呢？</strong></p><h2 id="_3-6-rnn可扩展到双向的情况-其结构如下" tabindex="-1">3.6 RNN可扩展到双向的情况，其结构如下：<br> <a class="header-anchor" href="#_3-6-rnn可扩展到双向的情况-其结构如下" aria-label="Permalink to &quot;3.6 RNN可扩展到双向的情况，其结构如下：&lt;br&gt;&quot;">​</a></h2><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/rnn-figure4.jpg" alt="figure4"></p><p><strong>思考：正向和反向用到权重是同一份数据吗???</strong> <br><strong>思考：反向时句子顺序需要倒序吗？</strong> <br><strong>思考：正反向的结果，如何组合在一起？？？</strong> <br></p><h2 id="_3-7-rnn扩展到多层构成循环神经网络-结构如下" tabindex="-1">3.7 RNN扩展到多层构成循环神经网络，结构如下： <a class="header-anchor" href="#_3-7-rnn扩展到多层构成循环神经网络-结构如下" aria-label="Permalink to &quot;3.7 RNN扩展到多层构成循环神经网络，结构如下：&quot;">​</a></h2><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/rnn-figure5.jpg" alt="figure5"></p><h1 id="_4-rnn-应用案例-意图识别" tabindex="-1">4 RNN 应用案例(意图识别) <a class="header-anchor" href="#_4-rnn-应用案例-意图识别" aria-label="Permalink to &quot;4 RNN 应用案例(意图识别)&quot;">​</a></h1><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/rnn-gif4.gif" alt="gif4"></p><p>        如上图所示：将句子逐时间步输入到RNN中，这个过程我们可以看到，输入<strong>time</strong>的时候，前面 <strong>what</strong> 的输出也产生了影响（隐藏层中有一半是黑色的）。前面所有的输入都对未来的输出产生了影响，大家可以看到圆形隐藏层中包含了前面所有的颜色。<br></p><p>        当我们判断意图的时候，只需要最后一层的输出<strong>o5</strong>，如下图所示：<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/rnn-gif5.gif" alt="gif5"></p><h1 id="_5-经典rnn-存在的问题" tabindex="-1">5 经典RNN 存在的问题 <a class="header-anchor" href="#_5-经典rnn-存在的问题" aria-label="Permalink to &quot;5 经典RNN 存在的问题&quot;">​</a></h1><p>        通过上面的例子，我们已经发现，短期的记忆影响较大（如橙色区域），但是长期的记忆影响就很小（如黑色和绿色区域），这就是 RNN 存在的短期记忆问题。<br></p><ul><li>RNN 有短期记忆问题，无法处理很长的输入序列</li><li>训练 RNN 需要投入极大的成本</li></ul><p>        由于 RNN 的短期记忆问题，后来又出现了基于 RNN 的优化算法，LSTM 和 GRU就是典型代表。<br></p><h1 id="_6-lstm-long-short-term-memory-长短期记忆网络" tabindex="-1">6 LSTM(Long Short-Term Memory) 长短期记忆网络 <a class="header-anchor" href="#_6-lstm-long-short-term-memory-长短期记忆网络" aria-label="Permalink to &quot;6 LSTM(Long Short-Term Memory) 长短期记忆网络&quot;">​</a></h1><p>        长短期记忆（英语：Long Short-Term Memory，LSTM）是一种时间循环神经网络（RNN），论文首次发表于1997年。由于独特的设计结构，LSTM适合于处理和预测时间序列中间隔和延迟非常长的重要事件。<br></p><h2 id="_6-1-lstm-整体结构" tabindex="-1">6.1 LSTM 整体结构 <a class="header-anchor" href="#_6-1-lstm-整体结构" aria-label="Permalink to &quot;6.1 LSTM 整体结构&quot;">​</a></h2><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/rnn-figure7.jpg" alt="figure7"></p><p>        LSTM的核心概念是cell state和其各种gates。cell state充当传输高速公路，将相关信息传递到整个序列链的末端。你可以将其视为网络的“记忆”。理论上，cell state可以在处理序列的过程中携带相关信息。因此，即使是早期时间步的信息也可以传递到后续时间步，减少短期记忆的影响。随着细胞状态的旅程进行，通过门向细胞状态添加或移除信息。这些门是不同的神经网络，决定哪些信息可以进入cell state。这些门可以在训练过程中学习哪些信息是需要保留或遗忘的。<br></p><p><strong>简单一点就是：记住该记住的，忘记该遗忘的</strong> <br></p><h2 id="_6-2-lstm-cell-详解" tabindex="-1">6.2 LSTM cell 详解 <a class="header-anchor" href="#_6-2-lstm-cell-详解" aria-label="Permalink to &quot;6.2 LSTM cell 详解&quot;">​</a></h2><p>一个LSTM Cell 结构图如下：<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/rnn-figure9.jpg" alt="figure9"></p><p>其中核心部分为三门（遗忘门、输入门 和 输出门） 一状态（cell state）。<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/rnn-figure10.jpg" alt="figure10"></p><h3 id="_6-2-1-遗忘门" tabindex="-1">6.2.1 遗忘门 <a class="header-anchor" href="#_6-2-1-遗忘门" aria-label="Permalink to &quot;6.2.1 遗忘门&quot;">​</a></h3><p>         遗忘门（forget gate）决定之前cell states的哪些信息应该被丢弃和保留。来自前一个隐藏状态和当前输入的信息通过 sigmoid 函数传递。输出的值介于 0 和 1 之间。接近 0 的值表示要遗忘，接近 1 的值表示要保留。<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/rnn-gif6.gif" alt="gif6"></p><h3 id="_6-2-2-输入门" tabindex="-1">6.2.2 输入门 <a class="header-anchor" href="#_6-2-2-输入门" aria-label="Permalink to &quot;6.2.2 输入门&quot;">​</a></h3><p>        为了更新细胞状态，我们有输入门（input gate）。<br></p><ul><li>首先，我们将前一个隐藏状态和当前输入传递到 sigmoid 函数中。这个函数决定了哪些值将被更新，通过将这些值转换为介于 0 和 1 之间的范围。0 表示不重要，1 表示重要。<br></li><li>你还需要将隐藏状态和当前输入传递到 tanh 函数中，将值压缩在 -1 和 1 之间，以帮助调节网络。<br></li><li>然后，你将 tanh 的输出与 sigmoid 的输出相乘。sigmoid 的输出将决定从 tanh 的输出中保留哪些重要信息。<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/rnn-gif7.gif" alt="gif7"></li></ul><h3 id="_6-2-3-cell-state" tabindex="-1">6.2.3 cell state <a class="header-anchor" href="#_6-2-3-cell-state" aria-label="Permalink to &quot;6.2.3 cell state&quot;">​</a></h3><p>        现在我们应该有足够的信息来计算细胞状态。<br></p><ul><li>首先，细胞状态与忘记向量进行逐元素相乘。如果与接近 0 的值相乘，细胞状态中的值有可能被丢弃。<br></li><li>然后，我们将输入门的输出与细胞状态进行逐元素相加，从而将细胞状态更新为神经网络认为相关的新值。<br> 这样我们就得到了新的细胞状态。<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/rnn-gif8.gif" alt="gif8"></li></ul><h3 id="_6-2-4-输出门" tabindex="-1">6.2.4 输出门 <a class="header-anchor" href="#_6-2-4-输出门" aria-label="Permalink to &quot;6.2.4 输出门&quot;">​</a></h3><p>        最后，我们有输出门（output gate）。输出门决定下一个隐藏状态应该是什么样子。请记住，隐藏状态包含了先前输入的信息。隐藏状态还用于进行预测。<br></p><ul><li>首先，我们将前一个隐藏状态和当前输入传递到 sigmoid 函数中。<br></li><li>然后，我们将经过修改后的细胞状态传递到 tanh 函数中。我们将 tanh 的输出与 sigmoid 的输出相乘，以决定隐藏状态应携带哪些信息。<br> 输出结果就是隐藏状态。新的细胞状态和新的隐藏状态随后传递到下一个时间步。<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/rnn-gif9.gif" alt="gif9"></li></ul><h3 id="_6-2-5-总结" tabindex="-1">6.2.5 总结 <a class="header-anchor" href="#_6-2-5-总结" aria-label="Permalink to &quot;6.2.5 总结&quot;">​</a></h3><ul><li>遗忘门决定了从之前的步骤中保留哪些信息是相关的；</li><li>输入门决定了从当前步骤中添加哪些相关信息；</li><li>输出门确定了下一个隐藏状态应该是什么样子；</li></ul><h2 id="_6-3-lstm-cell-具体计算" tabindex="-1">6.3 LSTM Cell 具体计算 <a class="header-anchor" href="#_6-3-lstm-cell-具体计算" aria-label="Permalink to &quot;6.3 LSTM Cell 具体计算&quot;">​</a></h2><ul><li><p>学术上的计算过程如下: <br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/rnn-figure10.jpg" alt="figure10"></p></li><li><p>动态展示为：<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/lstm.gif" alt="gif9"></p></li><li><p>具体计算过程为：<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/rnn-figure11.jpg" alt="figure10"></p></li><li><p>工程上计算图：<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/rnn-figure17.jpg" alt="figure10"></p></li><li><p>LSTM 整体图: <br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/rnn-figure18.jpg" alt="figure10"></p></li></ul><h2 id="_6-4-与rnn-类似-lstm-也有双向的" tabindex="-1">6.4 与RNN 类似 LSTM 也有双向的 <a class="header-anchor" href="#_6-4-与rnn-类似-lstm-也有双向的" aria-label="Permalink to &quot;6.4 与RNN 类似 LSTM 也有双向的&quot;">​</a></h2><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/rnn-figure8.jpg" alt="figure8"></p><h1 id="_7-gru-门控循环单元-gated-recurrent-unit" tabindex="-1">7 GRU ：门控循环单元（Gated Recurrent Unit） <a class="header-anchor" href="#_7-gru-门控循环单元-gated-recurrent-unit" aria-label="Permalink to &quot;7 GRU ：门控循环单元（Gated Recurrent Unit）&quot;">​</a></h1><h2 id="_7-1-lstm-和-gru-对比" tabindex="-1">7.1 LSTM 和 GRU 对比 <a class="header-anchor" href="#_7-1-lstm-和-gru-对比" aria-label="Permalink to &quot;7.1 LSTM 和 GRU 对比&quot;">​</a></h2><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/rnn-figure13.jpg" alt="figure13"></p><h2 id="_7-2-原理" tabindex="-1">7.2 原理 <a class="header-anchor" href="#_7-2-原理" aria-label="Permalink to &quot;7.2 原理&quot;">​</a></h2><p>        GRU是循环神经网络的新一代，与LSTM非常相似。GRU摒弃了细胞状态，使用隐藏状态来传递信息。它只有两个门，一个重置门(reset gate)和一个更新门(update gate)。<br></p><ul><li><p>更新门（Update Gate）<br>         更新门的功能类似于LSTM中的遗忘门和输入门。它决定了要丢弃哪些信息以及要添加哪些新信息。<br></p></li><li><p>重置门（Reset Gate）<br>         重置门是另一个门，用于决定要忘记多少过去的信息。<br></p></li></ul><p>        GRU的张量操作较少，因此相对于LSTM来说，训练速度稍快一些。目前并没有明确的胜出者，哪种方法更好。研究人员和工程师通常会尝试两种方法，以确定哪种方法在特定的使用案例中效果更好。<br></p><h2 id="_7-3-计算过程" tabindex="-1">7.3 计算过程 <a class="header-anchor" href="#_7-3-计算过程" aria-label="Permalink to &quot;7.3 计算过程&quot;">​</a></h2><ul><li><p>动态计算图：<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/gru.gif" alt="gif10"></p></li><li><p>静态计算图：<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/rnn-figure14.jpg" alt="figure14"></p></li><li><p>可能的变化：<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/rnn-figure15.jpg" alt="figure15"></p></li><li><p>工程上的计算图：<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/rnn-figure16.jpg" alt="figure16"></p></li></ul><h1 id="_8-参考链接" tabindex="-1">8 参考链接 <a class="header-anchor" href="#_8-参考链接" aria-label="Permalink to &quot;8 参考链接&quot;">​</a></h1><p><a href="http://colah.github.io/posts/2015-08-Understanding-LSTMs/" target="_blank" rel="noreferrer">参考文献1</a> <br><a href="https://towardsdatascience.com/illustrated-guide-to-lstms-and-gru-s-a-step-by-step-explanation-44e9eb85bf21" target="_blank" rel="noreferrer">参考文献2</a> <br><a href="https://towardsdatascience.com/animated-rnn-lstm-and-gru-ef124d06cf45" target="_blank" rel="noreferrer">参考文献3</a> <br><img src="https://www.youtube.com/watch?v=xCGidAeyS4M" alt="参考文献4"> <br></p>',78)]))}const g=a(r,[["render",p]]);export{d as __pageData,g as default};
