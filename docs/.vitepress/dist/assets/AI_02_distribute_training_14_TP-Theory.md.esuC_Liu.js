import{_ as a,c as e,o as n,a2 as t}from"./chunks/framework.DA-Pb-tg.js";const y=JSON.parse('{"title":"Tensor Parallel","description":"","frontmatter":{},"headers":[],"relativePath":"AI/02_distribute_training/14_TP-Theory.md","filePath":"AI/02_distribute_training/14_TP-Theory.md","lastUpdated":1743069065000}'),p={name:"AI/02_distribute_training/14_TP-Theory.md"};function l(m,s,r,i,o,c){return n(),e("div",null,s[0]||(s[0]=[t(`<h1 id="tensor-parallel" tabindex="-1">Tensor Parallel <a class="header-anchor" href="#tensor-parallel" aria-label="Permalink to &quot;Tensor Parallel&quot;">​</a></h1><h1 id="_1-张量并行" tabindex="-1">1.张量并行 <a class="header-anchor" href="#_1-张量并行" aria-label="Permalink to &quot;1.张量并行&quot;">​</a></h1><p>和流水线并行类似，张量并行也是将模型分解放置到不同的GPU上，以解决单块GPU无法储存整个模型的问题。和流水线并行不同的地方在于，<strong>张量并行是针对模型中的张量进行拆分，将其放置到不同的GPU上</strong>。</p><h3 id="_1-简述" tabindex="-1">1.简述 <a class="header-anchor" href="#_1-简述" aria-label="Permalink to &quot;1.简述&quot;">​</a></h3><p>模型并行是不同设备负责单个计算图不同部分的计算。而将计算图中的层内的参数（张量）切分到不同设备（即层内并行），每个设备只拥有模型的一部分，以减少内存负荷，我们称之为张量模型并行。</p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image_99Ji-kbokD.png" alt=""></p><p>张量并行从数学原理上来看就是对于<code>linear</code>层就是把矩阵分块进行计算，然后把结果合并；对于非<code>linear</code>层，则不做额外设计。</p><h3 id="_2-张量并行方式" tabindex="-1">2.张量并行方式 <a class="header-anchor" href="#_2-张量并行方式" aria-label="Permalink to &quot;2.张量并行方式&quot;">​</a></h3><p>张量切分方式分为按行进行切分和按列进行切分，分别对应<strong>行并行（Row Parallelism）<strong>与</strong>列并行（Column Parallelism）</strong>。</p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image_-u9XHKpRLE.png" alt=""></p><p>下面用通用矩阵的矩阵乘法（GEMM）来进行示例，看看线性层如何进行模型并行。假设 Y = XA ，对于模型来说，X 是输入，A是权重，Y是输出。</p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image_XYhiRcuHQ5.png" alt=""></p><h4 id="_2-1-行并行" tabindex="-1">2.1 行并行 <a class="header-anchor" href="#_2-1-行并行" aria-label="Permalink to &quot;2.1 行并行&quot;">​</a></h4><p>行并行就是把权重 A 按照行分割成两部分。为了保证运算，同时我们也把 X 按照列来分割为两部分，具体如下所示：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mi>A</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mrow><mi>X</mi><mn>1</mn></mrow></mtd><mtd><mrow><mi>X</mi><mn>2</mn></mrow></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mrow><mi>A</mi><mn>1</mn></mrow></mtd></mtr><mtr><mtd><mrow><mi>A</mi><mn>2</mn></mrow></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mi>X</mi><mn>1</mn><mi>A</mi><mn>1</mn><mo>+</mo><mi>X</mi><mn>2</mn><mi>A</mi><mn>2</mn><mo>=</mo><mi>Y</mi><mn>1</mn><mo>+</mo><mi>Y</mi><mn>2</mn><mo>=</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">X A=\\left[\\begin{array}{ll}X 1 &amp; X 2\\end{array}\\right]\\left[\\begin{array}{l}A 1 \\\\ A 2\\end{array}\\right]=X 1 A 1+X 2 A 2=Y 1+Y 2=Y </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.45em;"></span><span class="strut bottom" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right:0.07847em;">X</span><span class="mord mathit">A</span><span class="mrel">=</span><span class="minner displaystyle textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist"><span style="top:-0.010000000000000009em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right:0.07847em;">X</span><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist"><span style="top:-0.010000000000000009em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right:0.07847em;">X</span><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;"><span class="delimsizing size1">]</span></span></span><span class="minner displaystyle textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist"><span style="top:-0.6099999999999999em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathit">A</span><span class="mord mathrm">1</span></span></span><span style="top:0.5900000000000003em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathit">A</span><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.07847em;">X</span><span class="mord mathrm">1</span><span class="mord mathit">A</span><span class="mord mathrm">1</span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.07847em;">X</span><span class="mord mathrm">2</span><span class="mord mathit">A</span><span class="mord mathrm">2</span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.22222em;">Y</span><span class="mord mathrm">1</span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.22222em;">Y</span><span class="mord mathrm">2</span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.22222em;">Y</span></span></span></span></span></p><p>这样，X1 和 A1 就可以放到 GPU0 之上计算得出 Y1，，X2 和 A2 可以放到第二个 GPU1 之上计算得出 Y2，然后，把Y1和Y2结果相加，得到最终的输出Y。</p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image_IA8zN9k2qY.png" alt=""></p><h3 id="_2-2-列并行" tabindex="-1">2.2 列并行 <a class="header-anchor" href="#_2-2-列并行" aria-label="Permalink to &quot;2.2 列并行&quot;">​</a></h3><p>列并行就是把 A按照列来分割，具体示例如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mi>A</mi><mo>=</mo><mo>[</mo><mi>X</mi><mo>]</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mrow><mi>A</mi><mn>1</mn></mrow></mtd><mtd><mrow><mi>A</mi><mn>2</mn></mrow></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mrow><mi>X</mi><mi>A</mi><mn>1</mn></mrow></mtd><mtd><mrow><mi>X</mi><mi>A</mi><mn>2</mn></mrow></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mrow><mi>Y</mi><mn>1</mn></mrow></mtd><mtd><mrow><mi>Y</mi><mn>2</mn></mrow></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">X A=[X]\\left[\\begin{array}{ll}A 1 &amp; A 2\\end{array}\\right]=\\left[\\begin{array}{ll}X A 1 &amp; X A 2\\end{array}\\right]=\\left[\\begin{array}{ll}Y 1 &amp; Y 2\\end{array}\\right]=Y </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8500000000000001em;"></span><span class="strut bottom" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right:0.07847em;">X</span><span class="mord mathit">A</span><span class="mrel">=</span><span class="mopen">[</span><span class="mord mathit" style="margin-right:0.07847em;">X</span><span class="mclose">]</span><span class="minner displaystyle textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist"><span style="top:-0.010000000000000009em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathit">A</span><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist"><span style="top:-0.010000000000000009em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathit">A</span><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;"><span class="delimsizing size1">]</span></span></span><span class="mrel">=</span><span class="minner displaystyle textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist"><span style="top:-0.010000000000000009em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right:0.07847em;">X</span><span class="mord mathit">A</span><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist"><span style="top:-0.010000000000000009em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right:0.07847em;">X</span><span class="mord mathit">A</span><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;"><span class="delimsizing size1">]</span></span></span><span class="mrel">=</span><span class="minner displaystyle textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist"><span style="top:-0.010000000000000009em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right:0.22222em;">Y</span><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist"><span style="top:-0.010000000000000009em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right:0.22222em;">Y</span><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;"><span class="delimsizing size1">]</span></span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.22222em;">Y</span></span></span></span></span></p><p>这样，将 X 分别放置在GPU0 和GPU1，将 A1 放置在 GPU0，将 A2 放置在 GPU1，然后分别进行矩阵运行，最终将2个GPU上面的矩阵拼接在一起，得到最终的输出Y。</p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image_AcxOQBm8rp.png" alt=""></p><h1 id="_3-megatron-lm-tp" tabindex="-1">3 Megatron-lm TP <a class="header-anchor" href="#_3-megatron-lm-tp" aria-label="Permalink to &quot;3 Megatron-lm TP&quot;">​</a></h1><ul><li><a href="https://github.com/Elvin-Ma/ai_papers/blob/main/megatron/megatron_lm.md" target="_blank" rel="noreferrer">译文连接</a></li><li><a href="https://arxiv.org/pdf/1909.08053" target="_blank" rel="noreferrer">论文连接-EN</a></li><li><a href="https://yiyibooks.cn/arxiv/1909.08053v4/index.html" target="_blank" rel="noreferrer">论文连接-CN</a></li></ul><h1 id="_4-megatron-lm-实现" tabindex="-1">4 Megatron-lm 实现 <a class="header-anchor" href="#_4-megatron-lm-实现" aria-label="Permalink to &quot;4 Megatron-lm 实现&quot;">​</a></h1><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> megatron.core </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mpu, tensor_parallel</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mpu.initialize_model_parallel(args.tensor_model_parallel_size,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                  args.pipeline_model_parallel_size,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                  args.virtual_pipeline_model_parallel_size,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                  args.pipeline_model_parallel_split_rank)</span></span></code></pre></div>`,26)]))}const h=a(p,[["render",l]]);export{y as __pageData,h as default};
