import{_ as e,c as o,o as t,a2 as r}from"./chunks/framework.DA-Pb-tg.js";const u=JSON.parse('{"title":"01-Class_Logs","description":"","frontmatter":{},"headers":[],"relativePath":"AI/04_some_notes/01-class_logs.md","filePath":"AI/04_some_notes/01-class_logs.md","lastUpdated":null}'),l={name:"AI/04_some_notes/01-class_logs.md"};function i(p,a,s,c,n,d){return t(),o("div",null,a[0]||(a[0]=[r('<h1 id="_01-class-logs" tabindex="-1">01-Class_Logs <a class="header-anchor" href="#_01-class-logs" aria-label="Permalink to &quot;01-Class_Logs&quot;">​</a></h1><h2 id="_0301-0302-transformer🌟🌟🌟" tabindex="-1">0301-0302 Transformer🌟🌟🌟 <a class="header-anchor" href="#_0301-0302-transformer🌟🌟🌟" aria-label="Permalink to &quot;0301-0302 Transformer🌟🌟🌟&quot;">​</a></h2><ul><li>0301:input序列长度大于embedding时候的seq_len时, input的输入序列会按照seq_len进行切割拼接到batch上吗? (老师讲了encoder时候input不足seq_len时候使用mask然后想问的另一个问题)</li><li>0302:<code>K-V cache</code>时候当预测下一个时间步的时候与之前的做Attention的时候, 中途会取出cache里的K—V吗还是只取出里面的K还是只在最后一个结束后才整体取一次 (我想问的也就是在一个batch或者一个seq的访存情况, 每一个时间步都需要访问cache一次吗)</li><li>是直接使用缓存的填充矩阵还是需要拿出缓存数据(读还是取)</li></ul><h2 id="_0308-0309——pytorch" tabindex="-1">0308-0309——PyTorch <a class="header-anchor" href="#_0308-0309——pytorch" aria-label="Permalink to &quot;0308-0309——PyTorch&quot;">​</a></h2><blockquote><p>提及: 混合精度训练</p></blockquote><h3 id="_1-1-tensor-中数据的连续性" tabindex="-1">1.1 Tensor 中数据的连续性 <a class="header-anchor" href="#_1-1-tensor-中数据的连续性" aria-label="Permalink to &quot;1.1 Tensor 中数据的连续性&quot;">​</a></h3><p>reshape, transpose, view, T(转置), permute</p><p>transpose会让raw data不变(共用), mata data的stride和shape等属性就变了 is_contiguous()不连续, 但reshape和permute这些是不会变的,因为他们会发生data copy, contiguous()会发生copy raw data数据</p><p>view和reshape的区别</p><p>view更加安全, 不会重新拷贝数据, 但数据不连续不能使用view,也就是stride不协调, reshape不会错误, 会重新拷贝数据, 数据也连续</p><p>permute和transpose会让stride属性改变, 从而发生数据不连续, 通常使用后要加一个contiguous()让数据连续</p><h3 id="_1-2-pytorch-autograd" tabindex="-1">1.2 pytorch autograd <a class="header-anchor" href="#_1-2-pytorch-autograd" aria-label="Permalink to &quot;1.2 pytorch autograd&quot;">​</a></h3><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250308163009045.png" alt="image-20250308163009045" style="zoom:36%;"><p>……………………</p><p>叶子结点+requests_grad=True才有最终的grad, 非叶子结点中途可能会计算grad, 但用了就会丢弃(requests_grad=True的)</p><p>梯度累加也有可能, 多个step的梯度累加, 隐式增加batch</p><p>若没进行xxx.grad.zero_()或者xxx.grad = None, 则会进行accumulate()累加grad, 这两种方法有一点区别, zero__()会置零,会占用显存, 但=None的话会释放显存, 两者各有好坏</p><h3 id="_1-3-inplace-op" tabindex="-1">1.3 inplace-op <a class="header-anchor" href="#_1-3-inplace-op" aria-label="Permalink to &quot;1.3 inplace-op&quot;">​</a></h3><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250309102559857.png" alt="image-20250309102559857"></p><p>叶子结点的Tensor变量不能进行in-place操作, 因为要更新梯度的时候要用叶子结点</p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250309113212792.png" alt="image-20250309113212792" style="zoom:50%;"><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250309114217344.png" alt="image-20250309114217344" style="zoom:50%;"><p>no_grad()底层是基于set_grad_enable(Flase)的</p><h3 id="_1-4-自动微分机制-auto-grad-重点" tabindex="-1">1.4 自动微分机制(auto grad) 重点： <a class="header-anchor" href="#_1-4-自动微分机制-auto-grad-重点" aria-label="Permalink to &quot;1.4 自动微分机制(auto grad) 重点：&quot;">​</a></h3><ul><li>pytorch中 正向forward 对我们用户是可见的，但是backward对我们用户是不可见的；</li><li>一般情况下，每一个正向的函数，都对应一个反向的函数（grad_fn--&gt; Tensor中）；</li><li>tensor：requires_grad = True</li><li>tensor: grad --&gt; tensor 中存储grad的地方；</li><li>tensor: grad_fn --&gt; 存储我们反向函数的地方</li><li>tesnor: is_leaf --&gt; 这个tensor 是不是 叶子节点；</li><li>net::all weight --&gt; 都是leaf</li><li>叶子节点的梯度会自动保存下来的（weight）；</li><li>中间的 activation 的梯度会计算，但是不保留；</li><li>pytorch 动态图 vs tensorflow 静态图；</li><li>我们不能改变一个非叶子节点的 requires_grad;</li><li>非叶子（一个函数的output）节点它的 requires_grad 自动推导的；</li><li>非叶子节点对应函数的inputs 中只要有一个 requires_grad = True, 那么这个非叶子节点的requires_grad = True;</li><li>torch.no_grad() 会使得里面的新的tensor requires_grad = False</li><li>inplace的操作，非常大的风险：覆盖了原来的值，导致反向传播时计算不准确；</li><li>标量的梯度才能被隐式创建，隐式创建（.backward(1)）；</li><li>一般情况下，.backward(gradient)是有输入的: ;</li></ul><h3 id="_2-1-torch-nn-module" tabindex="-1">2.1 torch.nn.Module <a class="header-anchor" href="#_2-1-torch-nn-module" aria-label="Permalink to &quot;2.1 torch.nn.Module&quot;">​</a></h3><p>train模式和veal模式不会对grad的情况做修改,只是对训练和推理的对应的算子做不同的处理(等价处理)</p><p>常用算子dropout和BachNorm</p><p>xxx.cuda()的时候搬迁的是_parameters到cuda, 还有buffer也搬迁到cuda, 并没有将模型结构进行搬迁.</p><p>按照深度优先遍历sub module,将里面的_parameters和buffer到cuda, 数据类型转换也是一样的操作</p><p>c++底层实现了一个dispather分发机制,按照device属性分发, 对应device会调用对应的fn算子, 计算部分才执行</p><p>_parameters()送参数给优化器的时候将所有的parameters送到optim, 但数据共用, 同时更新</p><p>钩子函数(没太懂)</p><hr><h2 id="_0315-0316-续pytorch" tabindex="-1">0315-0316（续PyTorch） <a class="header-anchor" href="#_0315-0316-续pytorch" aria-label="Permalink to &quot;0315-0316（续PyTorch）&quot;">​</a></h2><h3 id="_1-1-回顾" tabindex="-1">1.1 回顾 <a class="header-anchor" href="#_1-1-回顾" aria-label="Permalink to &quot;1.1 回顾&quot;">​</a></h3><p>1.Tensor类和重要属性 2.autograd，动态图 3.Module以及属性和方法</p><blockquote><p>training,_parameters,_buffers,_modules(hooks是主要用二次开发等情况)</p></blockquote><p>子模块啥时候定义的呢？</p><p>_parameters,_buffers哪些有哪些没有</p><p>将module里的parameters传给optim，会通过调用parameters()进行</p><p>一系列方法具体情况</p><h3 id="_1-2-问题合集" tabindex="-1">1.2 问题合集 <a class="header-anchor" href="#_1-2-问题合集" aria-label="Permalink to &quot;1.2 问题合集&quot;">​</a></h3><ol><li>在讲transformer的padding mask的时候想到，如果输入seq_len大于了定义的seq_len，会直接截断还是截断再拼接到下一个batch</li><li>在sequence mask的时候，忘了要问啥了</li><li>在normalization层的时候不是有两个学习的参数吗，这俩参数是一次forward训练一次还是单独有自己的训练？还有，这俩参数是咋更新的？</li><li>dataset会迭代的将所有数据加载到内存吗，然后dataloader再一批次的提取吗</li></ol><p>with torch.no_grad(): eval时候用，计算图不再进行，对require_grads=True的不进行梯度计算，显存占用量会减少，activation的就会丢弃</p><p>dataset会迭代的将所有数据加载到内存吗，然后dataloader再一批次一批次的提取吗？还是说dataloader准备拿一个batch，然后dataset根据batch_size迭代获取size条。</p><blockquote><p>是后者，也就是I/O的时候，batch_size太小的话会增加I/O负担</p></blockquote><h3 id="_2-1-torch-optim" tabindex="-1">2.1 torch.optim <a class="header-anchor" href="#_2-1-torch-optim" aria-label="Permalink to &quot;2.1 torch.optim&quot;">​</a></h3><p>参数传param的时候的传递和打包方式</p><p>self.param_groups</p><p>==self.state==：训练时候显存消耗的主要项（优化器的动量项有关） 他是一个dict，keys是tensor，values也是 模型</p><blockquote><p>移动指数平均是啥忘了</p></blockquote><p>def load_state_dict</p><h3 id="_2-2-learning-rate-调整方案" tabindex="-1">2.2 learning rate 调整方案 <a class="header-anchor" href="#_2-2-learning-rate-调整方案" aria-label="Permalink to &quot;2.2 learning rate 调整方案&quot;">​</a></h3><p>Torch.optim.lr_scheduler</p><p>震荡类型的学习率调整是减少进入局部最优解的情况</p><p>==状态字典==，三个地方见过，都类似，模型保存时候需要有</p><h3 id="_2-3-模型保存和加载" tabindex="-1">2.3 模型保存和加载 <a class="header-anchor" href="#_2-3-模型保存和加载" aria-label="Permalink to &quot;2.3 模型保存和加载&quot;">​</a></h3><p>==动态图==</p><p>1.save state_dict的时候只有参数，save model的时候无法直接保存整个网络，但是他的材料（init）的那些会保存，模型加载的时候能通过，但runing time时候，forward并没有，必须导入或者自己实现，需要原来Net的签名（具体定义可以不一致，会放入_modules）</p><p>2.如果是自己写的算子，在init时候也放入_modules吗？</p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/%7B6fbad3cc-1899-4404-b3b3-d91f7da5cb95%7D.png" alt="img"></p><p>3.==onnx==模型保存必须输入对应的input，自己run一遍，是一个静态图</p><p>4.训练中的保存和加载（check point）==模型保存的几种参数类型==）</p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250316113313785.png" alt="image-20250316113313785"></p><h3 id="_3-1-dataset-and-dataloader" tabindex="-1">3.1 Dataset and Dataloader <a class="header-anchor" href="#_3-1-dataset-and-dataloader" aria-label="Permalink to &quot;3.1 Dataset and Dataloader&quot;">​</a></h3><blockquote><p>只学习pytorch的，后续自己补hf的那些</p></blockquote><h3 id="_4-1-nlp" tabindex="-1">4.1 NLP <a class="header-anchor" href="#_4-1-nlp" aria-label="Permalink to &quot;4.1 NLP&quot;">​</a></h3><p>GPT：自监督训练得到预训练模型（采用迁移学习）</p><p>Bert：完形填空</p><p>迁移学习：预训练+微调（微调的数据集就是专业领域的数据集）</p><h3 id="_4-2-bert" tabindex="-1">4.2 Bert <a class="header-anchor" href="#_4-2-bert" aria-label="Permalink to &quot;4.2 Bert&quot;">​</a></h3><p>1.两个任务：MLM和NSP</p><p>2.Embedding，词嵌入</p><p>词，句子（分段），位置 嵌入</p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250316165604714.png" alt="image-20250316165604714"></p><blockquote><p>transformer的词嵌入式用三角位置嵌入</p></blockquote><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250316175009793.png" alt="image-20250316175009793"></p><p>未讲知识：分词器tokenizer</p><h2 id="_0322" tabindex="-1">0322 <a class="header-anchor" href="#_0322" aria-label="Permalink to &quot;0322&quot;">​</a></h2><h3 id="_1-1-回顾-1" tabindex="-1">1.1 回顾 <a class="header-anchor" href="#_1-1-回顾-1" aria-label="Permalink to &quot;1.1 回顾&quot;">​</a></h3><p><code>bert4torch</code>的ner项目讲解和debug</p><h3 id="_2-1-t5讲解" tabindex="-1">2.1 T5讲解 <a class="header-anchor" href="#_2-1-t5讲解" aria-label="Permalink to &quot;2.1 T5讲解&quot;">​</a></h3><h3 id="_2-2-position-embedding🌟🌟🌟🌟🌟" tabindex="-1">2.2 position embedding🌟🌟🌟🌟🌟 <a class="header-anchor" href="#_2-2-position-embedding🌟🌟🌟🌟🌟" aria-label="Permalink to &quot;2.2 position embedding🌟🌟🌟🌟🌟&quot;">​</a></h3><p>绝对位置编码</p><ul><li>三角函数式(Sinusoidal)</li><li>可学习(Learnable)</li></ul><p>相对位置编码</p><ul><li><strong>是在Attention的时候才位置编码</strong></li><li>只对q和k做位置编码，对value不做，value是结果或者说是token本身的特征信息</li><li>T5的分桶思想</li></ul><p>==旋转位置编码==（大模型使用的方法）</p><ul><li>根据数学原理推导</li></ul><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250322144241104.png" alt="image-20250322144241104"></p><ul><li>想要得到的效果=&gt;反推</li></ul><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250322144600625.png" alt="image-20250322144600625"></p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250322145503812.png" alt="image-20250322145503812"></p><h3 id="_3-1-gpt" tabindex="-1">3.1 GPT <a class="header-anchor" href="#_3-1-gpt" aria-label="Permalink to &quot;3.1 GPT&quot;">​</a></h3><p>GPT-1 已经出现zero-shot迹象，层归一化还是之前的post-norm</p><p>GPT-2 零样本学习，即zero-shot，层归一化有点变化，改成per-Norm</p><blockquote><p>相当于纯预训练</p></blockquote><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250322170432945.png" alt="image-20250322170432945"></p><p>GPT-3 few-shot（给案例），发现模型规模可以提高能力，最后实现了无需微调到达一些较好的任务处理，架构基本和GPT-2一致，但加了一个新的‘交替的稠密和稀疏的’Attention，余弦衰减的学习率策略，batch-size从小变大，再加上0.1的权重衰减正则化</p><blockquote><p>Few-shot, one-shot, zero-shot</p><p>• <strong>Few-Shot（FS）：</strong> 模型在推理时给出K个任务示例作为上下文信息，同时提供任务的自然语言描述，但不允许模型进行权重更新。通常将K设置在10到100的范围内，以适应模型的上下文窗口。</p><p>• <strong>One-Shot（1S）：</strong> 模型在推理时通过提供一个任务示例作为上下文信息，同时还有任务的自然语言描述。这种方式最接近于人类在解决某些任务时所使用的方式。</p><p>• <strong>Zero-Shot（0S）：</strong> 不提供任何上下文信息，模型只给出一个描述任务的自然语言指令。</p></blockquote><h2 id="_0323" tabindex="-1">0323 <a class="header-anchor" href="#_0323" aria-label="Permalink to &quot;0323&quot;">​</a></h2><h3 id="_1-1-课前准备" tabindex="-1">1.1 课前准备 <a class="header-anchor" href="#_1-1-课前准备" aria-label="Permalink to &quot;1.1 课前准备&quot;">​</a></h3><ul><li><p>T5模型数据集下载并修改代码</p></li><li><p>tumx和终端不后台从训练</p></li></ul><blockquote><p>sh Train.sh &gt; ./xxx.log &amp;</p></blockquote><blockquote><p>tumx</p></blockquote><h3 id="_2-1-scaling-laws" tabindex="-1">2.1 Scaling Laws <a class="header-anchor" href="#_2-1-scaling-laws" aria-label="Permalink to &quot;2.1 Scaling Laws&quot;">​</a></h3><blockquote><p>tip：模型规模搞大可以提高自己的能力？</p></blockquote><ul><li>实验变量：</li></ul><blockquote><p>C, D, N</p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250323103615212.png" alt="image-20250323103615212"></p></blockquote><ul><li>数据规模与模型规模扩大比：5/8</li><li>一些超参数的设定</li></ul><hr><h3 id="_3-1-分布式训练" tabindex="-1">3.1 分布式训练 <a class="header-anchor" href="#_3-1-分布式训练" aria-label="Permalink to &quot;3.1 分布式训练&quot;">​</a></h3><ol><li>并行可以并行哪些？拆哪些？</li><li>多卡并行范式</li></ol><ul><li><p><strong>数据并行性</strong>(DP)：将模型（所有weight）复制到别的Worker中，所以模型大于单个显存的时候使用这种方式无法很好工作</p></li><li><p>模型并行性(MP)，存在Bubble问题</p></li><li><p>MP优化：管线并行性（MP --&gt; PP），又叫<strong>流水线并行</strong></p><blockquote><p>pp传播的是activation（前向）和对应的grad（反向）</p><p>GPipe的不足：最后一个执行完才能backward</p><p>PipeDream：前反向穿插，调度问题很难，工程上=&gt;Pipeline flash。实现one F one B</p></blockquote></li><li><p><strong>张量并行性（TP）</strong></p><blockquote><p>前面是纵向分割，现在提出用横向分割</p><p>将一个算子的Tenser分到多节点计算</p></blockquote></li><li><p><strong>专家混合（EP，MoE）</strong></p><blockquote><p>G shard</p><p>switch Transformer</p></blockquote><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250323144057238.png" alt="image-20250323144057238"></p></li><li><p>后面还有CP，xxxxP</p></li></ul><ol start="3"><li><p>分布式框架</p><blockquote><p>pytorch的</p><p>deepspeed</p></blockquote></li></ol><h3 id="_4-显存占用问题" tabindex="-1">4. 显存占用问题 <a class="header-anchor" href="#_4-显存占用问题" aria-label="Permalink to &quot;4. 显存占用问题&quot;">​</a></h3><h4 id="_4-1-解决方案" tabindex="-1">4.1 解决方案 <a class="header-anchor" href="#_4-1-解决方案" aria-label="Permalink to &quot;4.1 解决方案&quot;">​</a></h4><blockquote><p>之前有多个batch的grad累加</p></blockquote><ol><li>重计算（recompute）</li></ol><p>Pytorch2.6开始更加新的重计算</p><ol start="2"><li><p>offload ：用完就放到CPU</p><p>eg:</p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250323152635318.png" alt="image-20250323152635318" style="zoom:150%;"></li><li><p>gradient accumulate</p></li></ol><h4 id="_4-2-显存分析" tabindex="-1">4.2 显存分析 <a class="header-anchor" href="#_4-2-显存分析" aria-label="Permalink to &quot;4.2 显存分析&quot;">​</a></h4><p>1.API</p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250323152133484.png" alt="image-20250323152133484"><p>2.显存高峰期</p><p>在第一个step不会，理论上是在第二个step的forward之后</p><h3 id="_5-混合精度训练-amp-🌟🌟🌟🌟🌟" tabindex="-1">5. 混合精度训练（AMP）🌟🌟🌟🌟🌟 <a class="header-anchor" href="#_5-混合精度训练-amp-🌟🌟🌟🌟🌟" aria-label="Permalink to &quot;5. 混合精度训练（AMP）🌟🌟🌟🌟🌟&quot;">​</a></h3><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image.png" alt="alt text"></p><p>大模型必用，加速训练</p><blockquote><p>==下一个热点FP8==</p></blockquote><p>1.权重副本fp32</p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250323155428008.png" alt="image-20250323155428008" style="zoom:50%;"><p>2.损失缩放</p><p>3.输出存储到单精度，最终变半精度</p><p>舍入误差（下溢）</p><h3 id="_6-apex" tabindex="-1">6. Apex <a class="header-anchor" href="#_6-apex" aria-label="Permalink to &quot;6. Apex&quot;">​</a></h3><h3 id="_7" tabindex="-1">7. <a class="header-anchor" href="#_7" aria-label="Permalink to &quot;7.&quot;">​</a></h3><p>1.之前看那个state_dict最后存储的key和value都是tenser的设计策略是不是跟这儿有关系</p><p>2.多机的时候是不是也需要ssh 密钥组网</p>',140)]))}const g=e(l,[["render",i]]);export{u as __pageData,g as default};
