import{_ as s,c as e,o as t,a2 as n}from"./chunks/framework.DA-Pb-tg.js";const d=JSON.parse('{"title":"一. DL_Base_Notes","description":"","frontmatter":{},"headers":[],"relativePath":"AI/deep_learning_theory/00-DL_Base_Notes.md","filePath":"AI/deep_learning_theory/00-DL_Base_Notes.md","lastUpdated":1742982845000}'),i={name:"AI/deep_learning_theory/00-DL_Base_Notes.md"};function p(l,a,r,m,o,c){return t(),e("div",null,a[0]||(a[0]=[n('<p>[TOC]</p><h1 id="一-dl-base-notes" tabindex="-1">一. DL_Base_Notes <a class="header-anchor" href="#一-dl-base-notes" aria-label="Permalink to &quot;一. DL_Base_Notes&quot;">​</a></h1><h2 id="_1-normalization-还未coding-🌟🌟🌟🌟🌟" tabindex="-1">1. Normalization（还未coding）🌟🌟🌟🌟🌟 <a class="header-anchor" href="#_1-normalization-还未coding-🌟🌟🌟🌟🌟" aria-label="Permalink to &quot;1. Normalization（还未coding）🌟🌟🌟🌟🌟&quot;">​</a></h2><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/op-figure4.jpg" alt="figure4"></p><h3 id="_1-1-norm功能" tabindex="-1">1.1 Norm功能 <a class="header-anchor" href="#_1-1-norm功能" aria-label="Permalink to &quot;1.1 Norm功能&quot;">​</a></h3><p>Batch Norm，Layer Norm，Instance Norm，Group Norm</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>=</mo><mfrac><mrow><mi>x</mi><mo>−</mo><mrow><mi mathvariant="normal">E</mi></mrow><mo>[</mo><mi>x</mi><mo>]</mo></mrow><mrow><msqrt><mrow><mrow><mi mathvariant="normal">V</mi><mi mathvariant="normal">a</mi><mi mathvariant="normal">r</mi></mrow><mo>[</mo><mi>x</mi><mo>]</mo><mo>+</mo><mi>ϵ</mi></mrow></msqrt></mrow></mfrac><mo>∗</mo><mi>γ</mi><mo>+</mo><mi>β</mi></mrow><annotation encoding="application/x-tex">y = \\frac{x - \\mathrm{E}[x]}{ \\sqrt{\\mathrm{Var}[x] + \\epsilon}} * \\gamma + \\beta </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.427em;"></span><span class="strut bottom" style="height:2.55701em;vertical-align:-1.13001em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mrel">=</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.825005em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="sqrt mord"><span class="sqrt-sign" style="top:-0.04500500000000007em;"><span class="style-wrap reset-textstyle textstyle uncramped"><span class="delimsizing size1">√</span></span></span><span class="vlist"><span style="top:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="mord textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathrm" style="margin-right:0.01389em;">V</span><span class="mord mathrm">a</span><span class="mord mathrm">r</span></span><span class="mopen">[</span><span class="mord mathit">x</span><span class="mclose">]</span><span class="mbin">+</span><span class="mord mathit">ϵ</span></span></span><span style="top:-0.855005em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped sqrt-line"></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathit">x</span><span class="mbin">−</span><span class="mord textstyle uncramped"><span class="mord mathrm">E</span></span><span class="mopen">[</span><span class="mord mathit">x</span><span class="mclose">]</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.05556em;">γ</span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.05278em;">β</span></span></span></span></span></p><ul><li>去量纲，把数据调整到更强烈的数据分布</li><li>减少梯度消失和梯度爆炸</li><li>主要是有一个计算期望和方差的过程</li><li>做Norm的粒度不同，应用场景不同</li></ul><p>其他资料：<a href="https://blog.csdn.net/LoseInVain/article/details/86476010" target="_blank" rel="noreferrer">Batch Norm的技术博客</a></p><h3 id="_1-2-为啥不用bn来做nlp" tabindex="-1">1.2 为啥不用BN来做NLP？ <a class="header-anchor" href="#_1-2-为啥不用bn来做nlp" aria-label="Permalink to &quot;1.2 为啥不用BN来做NLP？&quot;">​</a></h3><ul><li>NLP的主要数据格式是[batch_szie, seq_len, embedding_dim]</li><li>Nlp 每个seq都是基本独立的，所以不能用Batch Norm</li><li>LN对应的维度就是对embedding_dim进行的</li></ul><p><strong>Batch Norm是逐channel（每个batch的同一个channel）进行标准化</strong>，也就是垮batch的。图片恰好需要这种方式。</p><p>LN是逐batch进行标准化的。NLP中往往是一个一个的seq进行训练的，而且长度不同，更适合这种。<strong>这让我想起了Attention的soft max操作是对一个行向量进行归一化的</strong></p><p>LayerNorm有助于稳定训练过程并提高收敛性。它的工作原理是对输入的各个特征进行归一化，确保激活的均值和方差一致。**普遍认为这种归一化有助于缓解与内部协变量偏移相关的问题，使模型能够更有效地学习并降低对初始权重的敏感性。**从架构图上看，LayerNorm在每个Transformer 块中应用两次，一次在自注意力机制之后，一次在FFN层之后，但是在实际工作中不一定如此。</p><p>文本长度不确定，而在LN层可以。</p><h3 id="_1-3-思考" tabindex="-1">1.3 思考 <a class="header-anchor" href="#_1-3-思考" aria-label="Permalink to &quot;1.3 思考&quot;">​</a></h3><ul><li><p>在训练和推理时有何不同？？？</p><blockquote><p>pytorch的模型有两种模式，在module模块里面有个‘training’属性，也有对应的API，里面明确指出了这个</p><p>在BatchNorm采用训练计算的结果（E和Var），应用到测试或者推理的时候</p><p>在Dropout后续会说，训练会drop掉，但推理不会，会成（1-rate）</p></blockquote><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> train</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self: T, mode: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; T:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;Set the module in training mode.</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        This has any effect only on certain modules. See documentations of</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        particular modules for details of their behaviors in training/evaluation</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        mode, if they are affected, e.g. :class:`Dropout`, :class:`BatchNorm`,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        etc.</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        Args:</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            mode (bool): whether to set training mode (``True``) or evaluation</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                         mode (``False``). Default: ``True``.</span></span></code></pre></div></li><li><p>对于期望和方差计算策略？？？</p><blockquote><p><code>采用移动指数平均</code>，有点类似RNN了</p></blockquote></li></ul><h3 id="_1-4-rms-norm-大模型使用-🌟🌟🌟" tabindex="-1">1.4 RMS Norm(大模型使用)🌟🌟🌟 <a class="header-anchor" href="#_1-4-rms-norm-大模型使用-🌟🌟🌟" aria-label="Permalink to &quot;1.4 RMS Norm(大模型使用)🌟🌟🌟&quot;">​</a></h3><p>对LN做简化，对于NLP，对缩放敏感，对平移不敏感，所以分子不减<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>E</mi><mi>x</mi></msub></mrow><annotation encoding="application/x-tex">E_x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.05764em;">E</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.05764em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">x</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>，减少了很大计算量</p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250326224954810.png" alt="image-20250326224954810"></p><h2 id="_2-activation🌟🌟🌟" tabindex="-1">2. Activation🌟🌟🌟 <a class="header-anchor" href="#_2-activation🌟🌟🌟" aria-label="Permalink to &quot;2. Activation🌟🌟🌟&quot;">​</a></h2><h3 id="_2-1-non-linear-activations的两种类型" tabindex="-1">2.1 Non-linear Activations的两种类型 <a class="header-anchor" href="#_2-1-non-linear-activations的两种类型" aria-label="Permalink to &quot;2.1 Non-linear Activations的两种类型&quot;">​</a></h3><p>一种是逐元素操作（Element wise 或者Point wise），eg:ReLU,Sigmoid,Tanh,等，另一种是操作对象（元素）之间具有相关性，eg.Softmax</p><blockquote><p>element wise是操作的数据间彼此独立，并且输入与输出大小一致</p></blockquote><h3 id="_2-2" tabindex="-1">2.2 <a class="header-anchor" href="#_2-2" aria-label="Permalink to &quot;2.2&quot;">​</a></h3><h2 id="_3-loss-function🌟" tabindex="-1">3. Loss Function🌟 <a class="header-anchor" href="#_3-loss-function🌟" aria-label="Permalink to &quot;3. Loss Function🌟&quot;">​</a></h2><h2 id="_4-optimizer🌟🌟🌟🌟" tabindex="-1">4. Optimizer🌟🌟🌟🌟 <a class="header-anchor" href="#_4-optimizer🌟🌟🌟🌟" aria-label="Permalink to &quot;4. Optimizer🌟🌟🌟🌟&quot;">​</a></h2><blockquote><p>动量后面的Admw那些据估计忘了</p></blockquote><h2 id="_5-transformer🌟🌟🌟🌟🌟" tabindex="-1">5. Transformer🌟🌟🌟🌟🌟 <a class="header-anchor" href="#_5-transformer🌟🌟🌟🌟🌟" aria-label="Permalink to &quot;5. Transformer🌟🌟🌟🌟🌟&quot;">​</a></h2><p>深入理解请阅读Transformer系列文章<a href="/AI/Transformer/">Transformer</a></p><h3 id="_5-1-为啥attention的时候要除以" tabindex="-1">5.1 为啥Attention的时候要除以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msqrt><mrow><msub><mi>d</mi><mi>k</mi></msub></mrow></msqrt></mrow><annotation encoding="application/x-tex">\\sqrt{d_k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8572200000000001em;"></span><span class="strut bottom" style="height:1.04em;vertical-align:-0.18278em;"></span><span class="base textstyle uncramped"><span class="sqrt mord"><span class="sqrt-sign" style="top:-0.017220000000000013em;"><span class="style-wrap reset-textstyle textstyle uncramped">√</span></span><span class="vlist"><span style="top:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="mord textstyle cramped"><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span style="top:-0.77722em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped sqrt-line"></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span>​</span></span></span></span></span></span>？ <a class="header-anchor" href="#_5-1-为啥attention的时候要除以" aria-label="Permalink to &quot;5.1 为啥Attention的时候要除以$\\sqrt{d_k}$？&quot;">​</a></h3> Attention(Q, K, V ) = softmax(\\frac{Q·K^T}{\\sqrt{d_k}})·V <ul><li>个人感觉跟Normalization的作用类似</li></ul><p>当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">d_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> 的值比较小的时候，两种点积机制(additive 和 Dot-Product)的性能相差相近，当 dk<em>d**k</em> 比较大时，additive attention 比不带scale 的点积attention性能好。 我们怀疑，对于很大的 dk<em>d**k</em> 值，点积大幅度增长，将softmax函数推向具有极小梯度的区域。 为了抵消这种影响，我们缩小点积 1dk√<em>d**k</em>1 倍。</p><h3 id="_5-2-为啥拆多头-为啥效果好了" tabindex="-1">5.2 为啥拆多头？为啥效果好了？ <a class="header-anchor" href="#_5-2-为啥拆多头-为啥效果好了" aria-label="Permalink to &quot;5.2 为啥拆多头？为啥效果好了？&quot;">​</a></h3><ul><li><p>提取到了更多的信息（类似CNN的multi- kernel），数据分布组与组（子空间）之间独立</p><blockquote><p>Multi-head attention允许模型的不同表示子空间联合<strong>关注不同位置</strong>的信息。 如果只有一个attention head，它的平均值会削弱这个信息。</p></blockquote></li><li><p>减少计算量（应该可以在这一层减少原来的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mn>1</mn></mrow><mrow><mi>N</mi><mi>u</mi><msub><mi>m</mi><mrow><mi>h</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">\\frac{1}{Num_{head}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.845108em;"></span><span class="strut bottom" style="height:1.2959679999999998em;vertical-align:-0.4508599999999999em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.10903em;">N</span><span class="mord mathit">u</span><span class="mord"><span class="mord mathit">m</span><span class="vlist"><span style="top:0.15122857142857138em;margin-right:0.07142857142857144em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit">h</span><span class="mord mathit">e</span><span class="mord mathit">a</span><span class="mord mathit">d</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span>倍）</p></li></ul><h3 id="_5-3-cross-multi-head-attention" tabindex="-1">5.3 Cross Multi-Head Attention？ <a class="header-anchor" href="#_5-3-cross-multi-head-attention" aria-label="Permalink to &quot;5.3 Cross Multi-Head Attention？&quot;">​</a></h3><p>首先，Self- Attention与传统的Attention机制非常的不同：传统的Attention是基于source端和target端的隐变量（hidden state）计算Attention的，得到的结果是源端（source端）的每个词与目标端（target端）每个词之间的依赖关系。 其次，Self-Attention首先分别在source端和target端进行自身的attention，仅与source input或者target input自身相关的Self -Attention，以捕捉source端或target端自身的词与词之间的依赖关系；然后再把source端的得到的self -Attention加入到target端得到的Attention中，称作为<strong>Cross-Attention</strong>，以捕捉source端和target端词与词之间的依赖关系。</p><h3 id="_5-4-mask-multi-head-attention" tabindex="-1">5.4 Mask Multi-Head Attention <a class="header-anchor" href="#_5-4-mask-multi-head-attention" aria-label="Permalink to &quot;5.4 Mask Multi-Head Attention&quot;">​</a></h3><p>​ 与Encoder的Multi-Head Attention计算原理一样，只是多加了一个mask码。mask 表示掩码，它对某些值进行掩盖，使其在参数更新时不产生效果。Transformer 模型里面涉及两种 mask，分别是 padding mask 和 sequence mask。</p><h3 id="_5-5-masking实现机理" tabindex="-1">5.5 Masking实现机理 <a class="header-anchor" href="#_5-5-masking实现机理" aria-label="Permalink to &quot;5.5 Masking实现机理&quot;">​</a></h3><p>具体的做法是，把<strong>这些位置</strong>的值<strong>加上一个非常大的负数(负无穷)</strong>，这样的话，经过 softmax，这些位置的概率就会接近0！</p><h3 id="_5-6-mha、mqa和gqa" tabindex="-1">5.6 MHA、MQA和GQA <a class="header-anchor" href="#_5-6-mha、mqa和gqa" aria-label="Permalink to &quot;5.6 MHA、MQA和GQA&quot;">​</a></h3><p>MQA多头共用K，V</p><p>GQA将头分组，组内共用KV</p><h2 id="_5-7-position-embedding🌟🌟🌟🌟🌟" tabindex="-1">5.7 position embedding🌟🌟🌟🌟🌟 <a class="header-anchor" href="#_5-7-position-embedding🌟🌟🌟🌟🌟" aria-label="Permalink to &quot;5.7 position embedding🌟🌟🌟🌟🌟&quot;">​</a></h2><ul><li><p>attention并不会获取到输入序列（token与token之间）的位置信息，只有俩俩的相关性</p></li><li><p>最初的Transformer使用的是<strong>绝对位置编码</strong>，即：直接对第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mi>a</mi><mi>t</mi><mi>c</mi><mi>h</mi></mrow><annotation encoding="application/x-tex">batch</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">b</span><span class="mord mathit">a</span><span class="mord mathit">t</span><span class="mord mathit">c</span><span class="mord mathit">h</span></span></span></span>个输入序列的第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span>个token向量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>X</mi><mi>k</mi><mrow><mi>b</mi><mi>a</mi><mi>t</mi><mi>c</mi><mi>h</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">X^{batch}_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.849108em;"></span><span class="strut bottom" style="height:1.132216em;vertical-align:-0.2831079999999999em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.07847em;">X</span><span class="vlist"><span style="top:0.2831079999999999em;margin-left:-0.07847em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">b</span><span class="mord mathit">a</span><span class="mord mathit">t</span><span class="mord mathit">c</span><span class="mord mathit">h</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>加上一个位置编码<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">P_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.13889em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>，然后做同样的attention</p></li><li><p>关于编码向量（或者矩阵）的生成，采用三角位置编码方式，对于第奇数(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2i+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.65952em;"></span><span class="strut bottom" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">2</span><span class="mord mathit">i</span><span class="mbin">+</span><span class="mord mathrm">1</span></span></span></span>)个token采用cos，对于偶数采用sin</p><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mrow><mi>k</mi><mo separator="true">,</mo><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo>(</mo><mfrac><mrow><mi>k</mi></mrow><mrow><mn>1</mn><mn>0</mn><mn>0</mn><mn>0</mn><msup><mn>0</mn><mrow><mn>2</mn><mi>i</mi><mi mathvariant="normal">/</mi><mi>d</mi></mrow></msup></mrow></mfrac><mo>)</mo></mrow><annotation encoding="application/x-tex">p_{k,2i+1}=cos(\\frac{k}{10000^{2i/d}})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8801079999999999em;"></span><span class="strut bottom" style="height:1.2674079999999999em;vertical-align:-0.3872999999999999em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mord mathrm">2</span><span class="mord mathit">i</span><span class="mbin">+</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord mathit">c</span><span class="mord mathit">o</span><span class="mord mathit">s</span><span class="mopen">(</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.3872999999999999em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mord"><span class="mord mathrm">0</span><span class="vlist"><span style="top:-0.289em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathrm">2</span><span class="mord mathit">i</span><span class="mord mathrm">/</span><span class="mord mathit">d</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.23000000000000004em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mrow><mi>k</mi><mo separator="true">,</mo><mn>2</mn><mi>i</mi></mrow></msub><mo>=</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo>(</mo><mfrac><mrow><mi>k</mi></mrow><mrow><mn>1</mn><mn>0</mn><mn>0</mn><mn>0</mn><msup><mn>0</mn><mrow><mn>2</mn><mi>i</mi><mi mathvariant="normal">/</mi><mi>d</mi></mrow></msup></mrow></mfrac><mo>)</mo></mrow><annotation encoding="application/x-tex">p_{k,2i}=sin(\\frac{k}{10000^{2i/d}})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8801079999999999em;"></span><span class="strut bottom" style="height:1.2674079999999999em;vertical-align:-0.3872999999999999em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mord mathrm">2</span><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord mathit">s</span><span class="mord mathit">i</span><span class="mord mathit">n</span><span class="mopen">(</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.3872999999999999em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mord"><span class="mord mathrm">0</span><span class="vlist"><span style="top:-0.289em;margin-right:0.07142857142857144em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathrm">2</span><span class="mord mathit">i</span><span class="mord mathrm">/</span><span class="mord mathit">d</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.23000000000000004em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></p><p><strong>其中：d表示位置向量的维度（应该也是输入次向量的embedding维度）</strong></p></blockquote></li><li><p>其实提取到位置信息是靠变量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span>获取的，相当于是seq index</p></li><li><p><strong>自己绘图发现该方案存在一定问题：</strong> 当embedding dim<strong>大于某一范围的</strong>的时候，对应编码信息会向0-1分布。我测试的[2, 32, 64]，当dim 在[12, 20]发生某种变化，然后超过20开始趋向0-1分布，其实从公式也可以明显发现这种现象</p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250326170819283.png" alt="image-20250326170819283" style="zoom:40%;"><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250326170943850.png" alt="image-20250326170943850"></p></li><li><p>该位置编码是在做Attention之前进行的，与embedding后的向量合并，再做attention</p></li></ul><h3 id="x-x-其他" tabindex="-1">x.x 其他 <a class="header-anchor" href="#x-x-其他" aria-label="Permalink to &quot;x.x 其他&quot;">​</a></h3><ul><li><p>工程中将QKV的权重矩阵直接放在一块，shape就是原来<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>d</mi><mi>d</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi mathvariant="normal">_</mi><mi>d</mi><mi>i</mi><mi>m</mi><mo separator="true">,</mo><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>d</mi><mi>d</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi mathvariant="normal">_</mi><mi>d</mi><mi>i</mi><mi>m</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">(embedding\\_dim, embedding\\_dim)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1.06em;vertical-align:-0.31em;"></span><span class="base textstyle uncramped"><span class="mopen">(</span><span class="mord mathit">e</span><span class="mord mathit">m</span><span class="mord mathit">b</span><span class="mord mathit">e</span><span class="mord mathit">d</span><span class="mord mathit">d</span><span class="mord mathit">i</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mord mathrm" style="margin-right:0.02778em;">_</span><span class="mord mathit">d</span><span class="mord mathit">i</span><span class="mord mathit">m</span><span class="mpunct">,</span><span class="mord mathit">e</span><span class="mord mathit">m</span><span class="mord mathit">b</span><span class="mord mathit">e</span><span class="mord mathit">d</span><span class="mord mathit">d</span><span class="mord mathit">i</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mord mathrm" style="margin-right:0.02778em;">_</span><span class="mord mathit">d</span><span class="mord mathit">i</span><span class="mord mathit">m</span><span class="mclose">)</span></span></span></span>到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>d</mi><mi>d</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi mathvariant="normal">_</mi><mi>d</mi><mi>i</mi><mi>m</mi><mo separator="true">,</mo><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>d</mi><mi>d</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi mathvariant="normal">_</mi><mi>d</mi><mi>i</mi><mi>m</mi><mo>×</mo><mn>3</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">(embedding\\_dim, embedding\\_dim \\times 3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1.06em;vertical-align:-0.31em;"></span><span class="base textstyle uncramped"><span class="mopen">(</span><span class="mord mathit">e</span><span class="mord mathit">m</span><span class="mord mathit">b</span><span class="mord mathit">e</span><span class="mord mathit">d</span><span class="mord mathit">d</span><span class="mord mathit">i</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mord mathrm" style="margin-right:0.02778em;">_</span><span class="mord mathit">d</span><span class="mord mathit">i</span><span class="mord mathit">m</span><span class="mpunct">,</span><span class="mord mathit">e</span><span class="mord mathit">m</span><span class="mord mathit">b</span><span class="mord mathit">e</span><span class="mord mathit">d</span><span class="mord mathit">d</span><span class="mord mathit">i</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mord mathrm" style="margin-right:0.02778em;">_</span><span class="mord mathit">d</span><span class="mord mathit">i</span><span class="mord mathit">m</span><span class="mbin">×</span><span class="mord mathrm">3</span><span class="mclose">)</span></span></span></span></p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/1850883-20250209144655019-1620461538.jpg" alt="img"></p></li><li><p>Attention的时候是否需要对自身做？自回归的时候应当下一次token尽可能不是上一个词，所以矩阵对角线是否应当是趋于零的？</p></li><li><p>句子间的相似度计算方式有哪些？Attention为啥采用点积？</p><blockquote><p>addivation</p><p>dot-dart （为啥点积运算可以计算相似度）</p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250325155249034.png" alt="image-20250325155249034"></p></blockquote></li><li><p>FFN的时候为啥dim要✖️4放大纬度</p></li><li><p>encoder其实是特征提取的一个过程</p></li><li><p>为啥encoder的input和out（context vector）的纬度大小要一样？（因为有原始论文有6个encoder Layer或者cell）</p></li><li><p>encoder层的attention会注意到前面的词吗？</p></li><li><p>encoder的特征聚合是在什么时候</p></li><li><p>特征压缩</p></li><li><p>softmax的时候是对attention结果的哪个纬度进行归一化（词与词相关性考虑，应该是掩码后矩阵分行向量），为啥归一化？（词与词之间的联系性，因为还要点乘value，所以应当是一个权重）</p></li><li><p>mask的大小？（batch_size, seq_len, seq_len），应该和attention score一样，因为要码谁就跟谁一样</p></li></ul><h2 id="_6-🌟🌟🌟k-v-cache" tabindex="-1">6. 🌟🌟🌟K-V Cache <a class="header-anchor" href="#_6-🌟🌟🌟k-v-cache" aria-label="Permalink to &quot;6. 🌟🌟🌟K-V Cache&quot;">​</a></h2><h2 id="_7-🌟🌟🌟常见的正则化方法" tabindex="-1">7. 🌟🌟🌟常见的正则化方法 <a class="header-anchor" href="#_7-🌟🌟🌟常见的正则化方法" aria-label="Permalink to &quot;7. 🌟🌟🌟常见的正则化方法&quot;">​</a></h2><ul><li>Dropout</li><li></li></ul><h2 id="_8-bert🌟🌟🌟🌟" tabindex="-1">8. Bert🌟🌟🌟🌟 <a class="header-anchor" href="#_8-bert🌟🌟🌟🌟" aria-label="Permalink to &quot;8. Bert🌟🌟🌟🌟&quot;">​</a></h2><p>输入后的对15%的三个处理</p><p>bert有三个编码，分别是</p><h2 id="_9-位置编码总结" tabindex="-1">9. 位置编码总结 <a class="header-anchor" href="#_9-位置编码总结" aria-label="Permalink to &quot;9. 位置编码总结&quot;">​</a></h2><h3 id="_9-1-绝对位置编码" tabindex="-1">9.1 绝对位置编码 <a class="header-anchor" href="#_9-1-绝对位置编码" aria-label="Permalink to &quot;9.1 绝对位置编码&quot;">​</a></h3><blockquote><p>在Attention之前进行位置编码</p><p>对qkv都做位置编码</p></blockquote><ul><li><p>三角（固定）位置编码</p></li><li><p>可学习位置编码</p><blockquote><p>把编码矩阵当作可学习参数进行训练（大小与embedding后的输入一致）</p><p>Bert模型就是采用的这种编码</p></blockquote></li></ul><h3 id="_9-2-相对位置编码" tabindex="-1">9.2 相对位置编码 <a class="header-anchor" href="#_9-2-相对位置编码" aria-label="Permalink to &quot;9.2 相对位置编码&quot;">​</a></h3><p><strong>不使用每个 token 的绝对位置，而是表示 token 之间的相对位置。这样做的好处是，模型不需要对每个位置使用单独的编码，而是通过计算相对距离来捕捉位置信息</strong>。</p><blockquote><p>在Attention之后进行位置编码</p><p>只对q和k做位置编码，对value不做，value是结果或者说是token本身的特征信息</p><p>根据数学原理推导的（依赖之前的位置编码公式来推导，<strong>也就是由绝对位置编码启发而来</strong>）</p><p>采用分桶思想（T5的思想）</p></blockquote><h3 id="_9-3-旋转位置编码——rope-大模型常用" tabindex="-1">9.3 旋转位置编码——RoPE（大模型常用） <a class="header-anchor" href="#_9-3-旋转位置编码——rope-大模型常用" aria-label="Permalink to &quot;9.3 旋转位置编码——RoPE（大模型常用）&quot;">​</a></h3><blockquote><p>也是相对位置编码的一种</p></blockquote><h3 id="" tabindex="-1"><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250322144241104.png" alt="image-20250322144241104"> <a class="header-anchor" href="#" aria-label="Permalink to &quot;![image-20250322144241104](https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250322144241104.png)&quot;">​</a></h3><blockquote><p>通过构建数学模型</p><p>根据想要得到的效果进行反推得到</p></blockquote><h1 id="二-课堂记录" tabindex="-1">二. 课堂记录 <a class="header-anchor" href="#二-课堂记录" aria-label="Permalink to &quot;二. 课堂记录&quot;">​</a></h1><h2 id="_0301-0302-transformer🌟🌟🌟" tabindex="-1">0301-0302 Transformer🌟🌟🌟 <a class="header-anchor" href="#_0301-0302-transformer🌟🌟🌟" aria-label="Permalink to &quot;0301-0302 Transformer🌟🌟🌟&quot;">​</a></h2><ul><li>0301:input序列长度大于embedding时候的seq_len时, input的输入序列会按照seq_len进行切割拼接到batch上吗? (老师讲了encoder时候input不足seq_len时候使用mask然后想问的另一个问题)</li><li>0302:<code>K-V cache</code>时候当预测下一个时间步的时候与之前的做Attention的时候, 中途会取出cache里的K—V吗还是只取出里面的K还是只在最后一个结束后才整体取一次 (我想问的也就是在一个batch或者一个seq的访存情况, 每一个时间步都需要访问cache一次吗)</li><li>是直接使用缓存的填充矩阵还是需要拿出缓存数据(读还是取)</li></ul><h2 id="_0308-0309——pytorch" tabindex="-1">0308-0309——PyTorch <a class="header-anchor" href="#_0308-0309——pytorch" aria-label="Permalink to &quot;0308-0309——PyTorch&quot;">​</a></h2><blockquote><p>提及: 混合精度训练</p></blockquote><h3 id="_1-1-tensor-中数据的连续性" tabindex="-1">1.1 Tensor 中数据的连续性 <a class="header-anchor" href="#_1-1-tensor-中数据的连续性" aria-label="Permalink to &quot;1.1 Tensor 中数据的连续性&quot;">​</a></h3><p>reshape, transpose, view, T(转置), permute</p><p>transpose会让raw data不变(共用), mata data的stride和shape等属性就变了 is_contiguous()不连续, 但reshape和permute这些是不会变的,因为他们会发生data copy, contiguous()会发生copy raw data数据</p><p>view和reshape的区别</p><p>view更加安全, 不会重新拷贝数据, 但数据不连续不能使用view,也就是stride不协调, reshape不会错误, 会重新拷贝数据, 数据也连续</p><p>permute和transpose会让stride属性改变, 从而发生数据不连续, 通常使用后要加一个contiguous()让数据连续</p><h3 id="_1-2-pytorch-autograd" tabindex="-1">1.2 pytorch autograd <a class="header-anchor" href="#_1-2-pytorch-autograd" aria-label="Permalink to &quot;1.2 pytorch autograd&quot;">​</a></h3><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250308163009045.png" alt="image-20250308163009045" style="zoom:36%;"><p>……………………</p><p>叶子结点+requests_grad=True才有最终的grad, 非叶子结点中途可能会计算grad, 但用了就会丢弃(requests_grad=True的)</p><p>梯度累加也有可能, 多个step的梯度累加, 隐式增加batch</p><p>若没进行xxx.grad.zero_()或者xxx.grad = None, 则会进行accumulate()累加grad, 这两种方法有一点区别, zero__()会置零,会占用显存, 但=None的话会释放显存, 两者各有好坏</p><h3 id="_1-3-inplace-op" tabindex="-1">1.3 inplace-op <a class="header-anchor" href="#_1-3-inplace-op" aria-label="Permalink to &quot;1.3 inplace-op&quot;">​</a></h3><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250309102559857.png" alt="image-20250309102559857"></p><p>叶子结点的Tensor变量不能进行in-place操作, 因为要更新梯度的时候要用叶子结点</p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250309113212792.png" alt="image-20250309113212792" style="zoom:50%;"><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250309114217344.png" alt="image-20250309114217344" style="zoom:50%;"><p>no_grad()底层是基于set_grad_enable(Flase)的</p><h3 id="_1-4-自动微分机制-auto-grad-重点" tabindex="-1">1.4 自动微分机制(auto grad) 重点： <a class="header-anchor" href="#_1-4-自动微分机制-auto-grad-重点" aria-label="Permalink to &quot;1.4 自动微分机制(auto grad) 重点：&quot;">​</a></h3><ul><li>pytorch中 正向forward 对我们用户是可见的，但是backward对我们用户是不可见的；</li><li>一般情况下，每一个正向的函数，都对应一个反向的函数（grad_fn--&gt; Tensor中）；</li><li>tensor：requires_grad = True</li><li>tensor: grad --&gt; tensor 中存储grad的地方；</li><li>tensor: grad_fn --&gt; 存储我们反向函数的地方</li><li>tesnor: is_leaf --&gt; 这个tensor 是不是 叶子节点；</li><li>net::all weight --&gt; 都是leaf</li><li>叶子节点的梯度会自动保存下来的（weight）；</li><li>中间的 activation 的梯度会计算，但是不保留；</li><li>pytorch 动态图 vs tensorflow 静态图；</li><li>我们不能改变一个非叶子节点的 requires_grad;</li><li>非叶子（一个函数的output）节点它的 requires_grad 自动推导的；</li><li>非叶子节点对应函数的inputs 中只要有一个 requires_grad = True, 那么这个非叶子节点的requires_grad = True;</li><li>torch.no_grad() 会使得里面的新的tensor requires_grad = False</li><li>inplace的操作，非常大的风险：覆盖了原来的值，导致反向传播时计算不准确；</li><li>标量的梯度才能被隐式创建，隐式创建（.backward(1)）；</li><li>一般情况下，.backward(gradient)是有输入的: ;</li></ul><h3 id="_2-1-torch-nn-module" tabindex="-1">2.1 torch.nn.Module <a class="header-anchor" href="#_2-1-torch-nn-module" aria-label="Permalink to &quot;2.1 torch.nn.Module&quot;">​</a></h3><p>train模式和veal模式不会对grad的情况做修改,只是对训练和推理的对应的算子做不同的处理(等价处理)</p><p>常用算子dropout和BachNorm</p><p>xxx.cuda()的时候搬迁的是_parameters到cuda, 还有buffer也搬迁到cuda, 并没有将模型结构进行搬迁.</p><p>按照深度优先遍历sub module,将里面的_parameters和buffer到cuda, 数据类型转换也是一样的操作</p><p>c++底层实现了一个dispather分发机制,按照device属性分发, 对应device会调用对应的fn算子, 计算部分才执行</p><p>_parameters()送参数给优化器的时候将所有的parameters送到optim, 但数据共用, 同时更新</p><p>钩子函数(没太懂)</p><hr><h2 id="_0315-0316-续pytorch" tabindex="-1">0315-0316（续PyTorch） <a class="header-anchor" href="#_0315-0316-续pytorch" aria-label="Permalink to &quot;0315-0316（续PyTorch）&quot;">​</a></h2><h3 id="_1-1-回顾" tabindex="-1">1.1 回顾 <a class="header-anchor" href="#_1-1-回顾" aria-label="Permalink to &quot;1.1 回顾&quot;">​</a></h3><p>1.Tensor类和重要属性 2.autograd，动态图 3.Module以及属性和方法</p><blockquote><p>training,_parameters,_buffers,_modules(hooks是主要用二次开发等情况)</p></blockquote><p>子模块啥时候定义的呢？</p><p>_parameters,_buffers哪些有哪些没有</p><p>将module里的parameters传给optim，会通过调用parameters()进行</p><p>一系列方法具体情况</p><h3 id="_1-2-问题合集" tabindex="-1">1.2 问题合集 <a class="header-anchor" href="#_1-2-问题合集" aria-label="Permalink to &quot;1.2 问题合集&quot;">​</a></h3><ol><li>在讲transformer的padding mask的时候想到，如果输入seq_len大于了定义的seq_len，会直接截断还是截断再拼接到下一个batch</li><li>在sequence mask的时候，忘了要问啥了</li><li>在normalization层的时候不是有两个学习的参数吗，这俩参数是一次forward训练一次还是单独有自己的训练？还有，这俩参数是咋更新的？</li><li>dataset会迭代的将所有数据加载到内存吗，然后dataloader再一批次的提取吗</li></ol><p>with torch.no_grad(): eval时候用，计算图不再进行，对require_grads=True的不进行梯度计算，显存占用量会减少，activation的就会丢弃</p><p>dataset会迭代的将所有数据加载到内存吗，然后dataloader再一批次一批次的提取吗？还是说dataloader准备拿一个batch，然后dataset根据batch_size迭代获取size条。</p><blockquote><p>是后者，也就是I/O的时候，batch_size太小的话会增加I/O负担</p></blockquote><h3 id="_2-1-torch-optim" tabindex="-1">2.1 torch.optim <a class="header-anchor" href="#_2-1-torch-optim" aria-label="Permalink to &quot;2.1 torch.optim&quot;">​</a></h3><p>参数传param的时候的传递和打包方式</p><p>self.param_groups</p><p>==self.state==：训练时候显存消耗的主要项（优化器的动量项有关） 他是一个dict，keys是tensor，values也是 模型</p><blockquote><p>移动指数平均是啥忘了</p></blockquote><p>def load_state_dict</p><h3 id="_2-2-learning-rate-调整方案" tabindex="-1">2.2 learning rate 调整方案 <a class="header-anchor" href="#_2-2-learning-rate-调整方案" aria-label="Permalink to &quot;2.2 learning rate 调整方案&quot;">​</a></h3><p>Torch.optim.lr_scheduler</p><p>震荡类型的学习率调整是减少进入局部最优解的情况</p><p>==状态字典==，三个地方见过，都类似，模型保存时候需要有</p><h3 id="_2-3-模型保存和加载" tabindex="-1">2.3 模型保存和加载 <a class="header-anchor" href="#_2-3-模型保存和加载" aria-label="Permalink to &quot;2.3 模型保存和加载&quot;">​</a></h3><p>==动态图==</p><p>1.save state_dict的时候只有参数，save model的时候无法直接保存整个网络，但是他的材料（init）的那些会保存，模型加载的时候能通过，但runing time时候，forward并没有，必须导入或者自己实现，需要原来Net的签名（具体定义可以不一致，会放入_modules）</p><p>2.如果是自己写的算子，在init时候也放入_modules吗？</p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/%7B6fbad3cc-1899-4404-b3b3-d91f7da5cb95%7D.png" alt="img"></p><p>3.==onnx==模型保存必须输入对应的input，自己run一遍，是一个静态图</p><p>4.训练中的保存和加载（check point）==模型保存的几种参数类型==）</p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250316113313785.png" alt="image-20250316113313785"></p><h3 id="_3-1-dataset-and-dataloader" tabindex="-1">3.1 Dataset and Dataloader <a class="header-anchor" href="#_3-1-dataset-and-dataloader" aria-label="Permalink to &quot;3.1 Dataset and Dataloader&quot;">​</a></h3><blockquote><p>只学习pytorch的，后续自己补hf的那些</p></blockquote><h3 id="_4-1-nlp" tabindex="-1">4.1 NLP <a class="header-anchor" href="#_4-1-nlp" aria-label="Permalink to &quot;4.1 NLP&quot;">​</a></h3><p>GPT：自监督训练得到预训练模型（采用迁移学习）</p><p>Bert：完形填空</p><p>迁移学习：预训练+微调（微调的数据集就是专业领域的数据集）</p><h3 id="_4-2-bert" tabindex="-1">4.2 Bert <a class="header-anchor" href="#_4-2-bert" aria-label="Permalink to &quot;4.2 Bert&quot;">​</a></h3><p>1.两个任务：MLM和NSP</p><p>2.Embedding，词嵌入</p><p>词，句子（分段），位置 嵌入</p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250316165604714.png" alt="image-20250316165604714"></p><blockquote><p>transformer的词嵌入式用三角位置嵌入</p></blockquote><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250316175009793.png" alt="image-20250316175009793"></p><p>未讲知识：分词器tokenizer</p><h2 id="_0322" tabindex="-1">0322 <a class="header-anchor" href="#_0322" aria-label="Permalink to &quot;0322&quot;">​</a></h2><h3 id="_1-1-回顾-1" tabindex="-1">1.1 回顾 <a class="header-anchor" href="#_1-1-回顾-1" aria-label="Permalink to &quot;1.1 回顾&quot;">​</a></h3><p><code>bert4torch</code>的ner项目讲解和debug</p><h3 id="_2-1-t5讲解" tabindex="-1">2.1 T5讲解 <a class="header-anchor" href="#_2-1-t5讲解" aria-label="Permalink to &quot;2.1 T5讲解&quot;">​</a></h3><h3 id="_2-2-position-embedding🌟🌟🌟🌟🌟" tabindex="-1">2.2 position embedding🌟🌟🌟🌟🌟 <a class="header-anchor" href="#_2-2-position-embedding🌟🌟🌟🌟🌟" aria-label="Permalink to &quot;2.2 position embedding🌟🌟🌟🌟🌟&quot;">​</a></h3><p>绝对位置编码</p><ul><li>三角函数式(Sinusoidal)</li><li>可学习(Learnable)</li></ul><p>相对位置编码</p><ul><li><strong>是在Attention的时候才位置编码</strong></li><li>只对q和k做位置编码，对value不做，value是结果或者说是token本身的特征信息</li><li>T5的分桶思想</li></ul><p>==旋转位置编码==（大模型使用的方法）</p><ul><li>根据数学原理推导</li></ul><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250322144241104.png" alt="image-20250322144241104"></p><ul><li>想要得到的效果=&gt;反推</li></ul><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250322144600625.png" alt="image-20250322144600625"></p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250322145503812.png" alt="image-20250322145503812"></p><h3 id="_3-1-gpt" tabindex="-1">3.1 GPT <a class="header-anchor" href="#_3-1-gpt" aria-label="Permalink to &quot;3.1 GPT&quot;">​</a></h3><p>GPT-1 已经出现zero-shot迹象，层归一化还是之前的post-norm</p><p>GPT-2 零样本学习，即zero-shot，层归一化有点变化，改成per-Norm</p><blockquote><p>相当于纯预训练</p></blockquote><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250322170432945.png" alt="image-20250322170432945"></p><p>GPT-3 few-shot（给案例），发现模型规模可以提高能力，最后实现了无需微调到达一些较好的任务处理，架构基本和GPT-2一致，但加了一个新的‘交替的稠密和稀疏的’Attention，余弦衰减的学习率策略，batch-size从小变大，再加上0.1的权重衰减正则化</p><blockquote><p>Few-shot, one-shot, zero-shot</p><p>• <strong>Few-Shot（FS）：</strong> 模型在推理时给出K个任务示例作为上下文信息，同时提供任务的自然语言描述，但不允许模型进行权重更新。通常将K设置在10到100的范围内，以适应模型的上下文窗口。</p><p>• <strong>One-Shot（1S）：</strong> 模型在推理时通过提供一个任务示例作为上下文信息，同时还有任务的自然语言描述。这种方式最接近于人类在解决某些任务时所使用的方式。</p><p>• <strong>Zero-Shot（0S）：</strong> 不提供任何上下文信息，模型只给出一个描述任务的自然语言指令。</p></blockquote><h2 id="_0323" tabindex="-1">0323 <a class="header-anchor" href="#_0323" aria-label="Permalink to &quot;0323&quot;">​</a></h2><h3 id="_1-1-课前准备" tabindex="-1">1.1 课前准备 <a class="header-anchor" href="#_1-1-课前准备" aria-label="Permalink to &quot;1.1 课前准备&quot;">​</a></h3><ul><li><p>T5模型数据集下载并修改代码</p></li><li><p>tumx和终端不后台从训练</p></li></ul><blockquote><p>sh Train.sh &gt; ./xxx.log &amp;</p></blockquote><blockquote><p>tumx</p></blockquote><h3 id="_2-1-scaling-laws" tabindex="-1">2.1 Scaling Laws <a class="header-anchor" href="#_2-1-scaling-laws" aria-label="Permalink to &quot;2.1 Scaling Laws&quot;">​</a></h3><blockquote><p>tip：模型规模搞大可以提高自己的能力？</p></blockquote><ul><li>实验变量：</li></ul><blockquote><p>C, D, N</p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250323103615212.png" alt="image-20250323103615212"></p></blockquote><ul><li>数据规模与模型规模扩大比：5/8</li><li>一些超参数的设定</li></ul><hr><h3 id="_3-1-分布式训练" tabindex="-1">3.1 分布式训练 <a class="header-anchor" href="#_3-1-分布式训练" aria-label="Permalink to &quot;3.1 分布式训练&quot;">​</a></h3><ol><li>并行可以并行哪些？拆哪些？</li><li>多卡并行范式</li></ol><ul><li><p><strong>数据并行性</strong>(DP)：将模型（所有weight）复制到别的Worker中，所以模型大于单个显存的时候使用这种方式无法很好工作</p></li><li><p>模型并行性(MP)，存在Bubble问题</p></li><li><p>MP优化：管线并行性（MP --&gt; PP），又叫<strong>流水线并行</strong></p><blockquote><p>pp传播的是activation（前向）和对应的grad（反向）</p><p>GPipe的不足：最后一个执行完才能backward</p><p>PipeDream：前反向穿插，调度问题很难，工程上=&gt;Pipeline flash。实现one F one B</p></blockquote></li><li><p><strong>张量并行性（TP）</strong></p><blockquote><p>前面是纵向分割，现在提出用横向分割</p><p>将一个算子的Tenser分到多节点计算</p></blockquote></li><li><p><strong>专家混合（EP，MoE）</strong></p><blockquote><p>G shard</p><p>switch Transformer</p></blockquote><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250323144057238.png" alt="image-20250323144057238"></p></li><li><p>后面还有CP，xxxxP</p></li></ul><ol start="3"><li><p>分布式框架</p><blockquote><p>pytorch的</p><p>deepspeed</p></blockquote></li></ol><h3 id="_4-显存占用问题" tabindex="-1">4. 显存占用问题 <a class="header-anchor" href="#_4-显存占用问题" aria-label="Permalink to &quot;4. 显存占用问题&quot;">​</a></h3><h4 id="_4-1-解决方案" tabindex="-1">4.1 解决方案 <a class="header-anchor" href="#_4-1-解决方案" aria-label="Permalink to &quot;4.1 解决方案&quot;">​</a></h4><blockquote><p>之前有多个batch的grad累加</p></blockquote><ol><li>重计算（recompute）</li></ol><p>Pytorch2.6开始更加新的重计算</p><ol start="2"><li><p>offload ：用完就放到CPU</p><p>eg:</p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250323152635318.png" alt="image-20250323152635318" style="zoom:150%;"></li><li><p>gradient accumulate</p></li></ol><h4 id="_4-2-显存分析" tabindex="-1">4.2 显存分析 <a class="header-anchor" href="#_4-2-显存分析" aria-label="Permalink to &quot;4.2 显存分析&quot;">​</a></h4><p>1.API</p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250323152133484.png" alt="image-20250323152133484"><p>2.显存高峰期</p><p>在第一个step不会，理论上是在第二个step的forward之后</p><h3 id="_5-混合精度训练-amp-🌟🌟🌟🌟🌟" tabindex="-1">5. 混合精度训练（AMP）🌟🌟🌟🌟🌟 <a class="header-anchor" href="#_5-混合精度训练-amp-🌟🌟🌟🌟🌟" aria-label="Permalink to &quot;5. 混合精度训练（AMP）🌟🌟🌟🌟🌟&quot;">​</a></h3><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image.png" alt="alt text"></p><p>大模型必用，加速训练</p><blockquote><p>==下一个热点FP8==</p></blockquote><p>1.权重副本fp32</p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/image-20250323155428008.png" alt="image-20250323155428008" style="zoom:50%;"><p>2.损失缩放</p><p>3.输出存储到单精度，最终变半精度</p><p>舍入误差（下溢）</p><h3 id="_6-apex" tabindex="-1">6. Apex <a class="header-anchor" href="#_6-apex" aria-label="Permalink to &quot;6. Apex&quot;">​</a></h3><h3 id="_7" tabindex="-1">7. <a class="header-anchor" href="#_7" aria-label="Permalink to &quot;7.&quot;">​</a></h3><p>1.之前看那个state_dict最后存储的key和value都是tenser的设计策略是不是跟这儿有关系</p><p>2.多机的时候是不是也需要ssh 密钥组网</p>',206)]))}const u=s(i,[["render",p]]);export{d as __pageData,u as default};
