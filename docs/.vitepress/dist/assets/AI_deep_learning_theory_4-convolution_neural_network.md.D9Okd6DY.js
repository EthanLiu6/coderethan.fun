import{_ as e,c as l,o as r,a2 as a}from"./chunks/framework.DA-Pb-tg.js";const h=JSON.parse('{"title":"1 概念","description":"","frontmatter":{},"headers":[],"relativePath":"AI/deep_learning_theory/4-convolution_neural_network.md","filePath":"AI/deep_learning_theory/4-convolution_neural_network.md","lastUpdated":1741775280000}'),n={name:"AI/deep_learning_theory/4-convolution_neural_network.md"};function i(t,o,c,p,u,s){return r(),l("div",null,o[0]||(o[0]=[a('<h1 id="_1-概念" tabindex="-1">1 概念 <a class="header-anchor" href="#_1-概念" aria-label="Permalink to &quot;1 概念&quot;">​</a></h1><ul><li>花书定义：<br>         <strong>卷积网络(convolutional network)</strong> ，也叫做<strong>卷积神经网络(con-volutional neural network, CNN)</strong>。是一种专门用来处理具有类似网格结构的数据的神经网络。<br></li></ul><p>        <strong>卷积神经网络</strong>一词表明该网络使用了卷积(convolution)这种数学运算。卷积是一种特殊的线性运算。卷积网络是指那些至少在网络的<strong>一层</strong>中使用卷积运算来替代一般的矩阵乘法运算的神经网络。<br></p><ul><li><a href="https://zh.wikipedia.org/wiki/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C" target="_blank" rel="noreferrer">wikipedia 定义</a></li></ul><p>        卷积神经网络(convolutional neural network，缩写：CNN)是一种<strong>前馈神经网络</strong>，它的人工神经元可以响应<strong>一部分覆盖范围内</strong>的周围单元，对于大型图像处理有出色表现。<br></p><p>        卷积神经网络由一个或多个卷积层和顶端的全连通层（对应经典的神经网络）组成，同时也包括关联权重和池化层（pooling layer)。这一模型也可以使用反向传播算法进行训练。相比较其他深度、前馈神经网络，卷积神经网络需要考量的参数更少，使之成为一种颇具吸引力的深度学习结构。<br></p><p>        卷积神经网络的灵感来自于动物视觉皮层组织的神经连接方式。单个神经元只对有限区域内的刺激作出反应，不同神经元的感知区域相互重叠从而覆盖整个视野。<br></p><h1 id="_2-卷积运算" tabindex="-1">2 卷积运算 <a class="header-anchor" href="#_2-卷积运算" aria-label="Permalink to &quot;2 卷积运算&quot;">​</a></h1><ul><li>卷积运算的数学公式如下(习惯上卷积运算常用&quot;*&quot; 号表示)：<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/cnn-formula1.jpg" alt="formula1"></li></ul><p>        卷积的第一个参数（在这个例子中，函数x）通常叫做<strong>输入（input）</strong>，第二个参数（函数w）叫做<strong>核函数（kernel function）</strong>。输出有时被称作<strong>特征映射或特征图（feature map）</strong>。<br><em>(核函数、kernel、滤波器、conv的权重 其实所说的都是 w）</em> <br></p><ul><li><p>工程中处理的数据大都是离散的，离散的卷积公式如下：<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/cnn-formula2.jpg" alt="formula2"></p></li><li><p>工程上大多数据都是多维度的，多维离散的卷积公式演变如下：<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/cnn-formula3.jpg" alt="formula3"></p></li><li><p>卷积是可交换的(commutative)，等价变换如下：<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/cnn-formula4.jpg" alt="formula4"></p></li><li><p>转化为更容易理解的形式（互相关函数形式）：<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/cnn-formula5.jpg" alt="formula5"></p></li></ul><p>        许多机器学习的库实现的是互相关函数但是称之为卷积，在这本书中我们遵循把两种运算都叫做卷积的这个传统，我们最终工程上使用的就是上式。<br></p><ul><li><p>卷积的计算图：<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/cnn-figure1.jpg" alt="figure1"></p></li><li><p>卷积运算动态图：<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/cnn-gif3.gif" alt="gif3"></p></li></ul><h1 id="_3-体会卷积的作用" tabindex="-1">3 体会卷积的作用 <a class="header-anchor" href="#_3-体会卷积的作用" aria-label="Permalink to &quot;3 体会卷积的作用&quot;">​</a></h1><ul><li>用卷积提取特征：<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/cnn-figure2.jpg" alt="figure2"></li></ul><h1 id="_4-卷积-和-前馈神经网络的关系" tabindex="-1">4 卷积 和 前馈神经网络的关系 <a class="header-anchor" href="#_4-卷积-和-前馈神经网络的关系" aria-label="Permalink to &quot;4 卷积 和 前馈神经网络的关系&quot;">​</a></h1><p>        传统的神经网络使用矩阵乘法来建立输入与输出的连接关系。其中，参数矩阵中每一个单独的参数都描述了一个输入单元与一个输出单元间的交互。卷积运算通过三个重要的思想来帮助改进机器学习系统： 稀疏交互（sparse interactions）、参数共享（parameter sharing）、等变表示（equivariant representations）。<br></p><ul><li><p>稀疏连接 <br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/cnn-figure3.jpg" alt="figure3"></p></li><li><p>权重共享 <br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/cnn-figure4.jpg" alt="figure4"></p></li><li><p>等变表示 <br>         如果一个函数满足输入改变，输出也以同样的方式改变这一性质，我们就说它是等变(equivariant) 的，对于卷积，参数共享的特殊形式使得神经网络层具有对平移等变（equivariance）的性质。<br></p></li></ul><p><strong>结论：卷积 是 前馈神经网络的一种特例</strong> <br></p><h1 id="_5-工程上标准的卷积" tabindex="-1">5 工程上标准的卷积 <a class="header-anchor" href="#_5-工程上标准的卷积" aria-label="Permalink to &quot;5 工程上标准的卷积&quot;">​</a></h1><p><strong>思考：卷积中 input 张量 和 kernel 张量 分别是几维的？</strong> <br></p><ul><li>通道的概念：         在输入张量中，通道表示不同的特征图（Feature Map），每个特征图对应网络在输入数据中提取的一种特征。<br></li></ul><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/cnn-gif2.gif" alt="gif2"></p><ul><li><p>哪个是输入？其通道数：</p></li><li><p>哪个是输出？其通道数：</p></li><li><p>哪个是kernel？ 有几个kernel？kernel的通道数：</p></li><li><p>一个输出特征点需要多少输入数据和kernel参与运算，计算规则又是怎样的？</p></li><li><p>工程上 输入、kernel、和输出 数据（Tensor）是几维的？？？</p></li><li><p>输入、输出、和 kernel 之间形状有何关系？？？这种关系能否用公式来表达？</p></li><li><p>输入中最外层0是什么，为什么？</p></li><li><p>kernel 滑动时的步长？</p></li><li><p>图示卷积是conv2d 还是 conv3d？</p></li><li><p>图示卷积相对于MLP 是增大了计算量还是减小了计算量？</p></li><li><p>padding 图示 <br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/cnn-gif4.gif" alt="gif4"></p></li><li><p>shape 关系总结如下： <br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/cnn-figure5.jpg" alt="figure5"></p></li></ul><h1 id="_6-1x1-卷积" tabindex="-1">6 1x1 卷积 <a class="header-anchor" href="#_6-1x1-卷积" aria-label="Permalink to &quot;6 1x1 卷积&quot;">​</a></h1><p>        卷积核尺寸为 1x1 时的卷积，也即卷积核变成只有一个数字，1x1 卷积的作用在于能有效地减少维度，降低计算的复杂度.如下图所示：<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/cnn-figure7.jpg" alt="figure7"></p><h1 id="_7-分组卷积-group-convolution" tabindex="-1">7 分组卷积(group convolution) <a class="header-anchor" href="#_7-分组卷积-group-convolution" aria-label="Permalink to &quot;7 分组卷积(group convolution)&quot;">​</a></h1><p>        2012 年，AlexNet 论文中最先提出来的概念，当时主要为了解决 GPU 显存不足问题.<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/cnn-figure6.jpg" alt="figure6"></p><p>        卷积核被分成不同的组，每组负责对相应的输入层进行卷积计算，最后再进行合并。如上图，卷积核被分成前后两个组，前半部分的卷积组负责处理前半部分的输入层，后半部分的卷积组负责处理后半部分的输入层，最后将结果合并组合。<br></p><p><strong>思考？？？</strong></p><ul><li>input 对那个维度分组；</li><li>kernel 对那个维度分组；</li><li>input 和 kernel的shape 有何联系；</li><li>output 的形状如何推导；</li></ul><h1 id="_8-深度可分离卷积-deepwise-convolution" tabindex="-1">8 深度可分离卷积（deepwise convolution） <a class="header-anchor" href="#_8-深度可分离卷积-deepwise-convolution" aria-label="Permalink to &quot;8 深度可分离卷积（deepwise convolution）&quot;">​</a></h1><p>        深度可分离卷积由两步组成：深度卷积和 1x1 卷积。首先，在输入层上应用深度卷积。如下图，使用 3 个卷积核分别对输入层的 3 个通道作卷积计算，再堆叠在一起。<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/cnn-figure8.jpg" alt="figure8"></p><p>        再使用 1x1 的卷积（3 个通道）进行计算，得到只有 1 个通道的结果.<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/cnn-figure9.jpg" alt="figure9"></p><p>        重复多次 1x1 的卷积操作（如下图为 128 次），则最后便会得到一个深度的卷积结果。<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/cnn-figure10.jpg" alt="figure10"></p><h1 id="_9-空间可分离卷积-spatially-separable-convolutions" tabindex="-1">9 空间可分离卷积（Spatially Separable Convolutions） <a class="header-anchor" href="#_9-空间可分离卷积-spatially-separable-convolutions" aria-label="Permalink to &quot;9 空间可分离卷积（Spatially Separable Convolutions）&quot;">​</a></h1><p>        空间可分离卷积是将卷积核分解为两项独立的核分别进行操作。一个 3x3 的卷积核分解如下图：<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/cnn-figure11.jpg" alt="figure11"></p><p>        分解后的卷积计算过程如下图，先用 3x1 的卷积核作横向扫描计算，再用 1x3 的卷积核作纵向扫描计算，最后得到结果。采用可分离卷积的计算量比标准卷积要少。<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/cnn-figure12.jpg" alt="figure12"></p><h1 id="_10-空洞卷积-膨胀卷积-dilated-convolution-atrous-convolution" tabindex="-1">10 空洞卷积（膨胀卷积）（Dilated Convolution / Atrous Convolution） <a class="header-anchor" href="#_10-空洞卷积-膨胀卷积-dilated-convolution-atrous-convolution" aria-label="Permalink to &quot;10 空洞卷积（膨胀卷积）（Dilated Convolution / Atrous Convolution）&quot;">​</a></h1><p>        为扩大感受野，在卷积核里面的元素之间插入空格来 “膨胀” 内核，形成 “空洞卷积”（或称膨胀卷积），并用膨胀率参数 L 表示要扩大内核的范围，即在内核元素之间插入 L-1 个空格。当 L=1 时，则内核元素之间没有插入空格，变为标准卷积。如下图为膨胀率 L=2 的空洞卷积：<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/cnn-gif5.gif" alt="gif4"></p><ul><li>不同参数L 图如下：<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/cnn-figure13.jpg" alt="figure13"></li></ul><h1 id="_11-反卷积-转置卷积-deconvolution-transposed-convolution" tabindex="-1">11 反卷积（转置卷积)(Deconvolution / Transposed Convolution） <a class="header-anchor" href="#_11-反卷积-转置卷积-deconvolution-transposed-convolution" aria-label="Permalink to &quot;11 反卷积（转置卷积)(Deconvolution / Transposed Convolution）&quot;">​</a></h1><p>        卷积是对输入图像提取出特征（可能尺寸会变小），而所谓的 “反卷积” 便是进行相反的操作。但这里说是 “反卷积” 并不严谨，因为并不会完全还原到跟输入图像一样，一般是还原后的尺寸与输入图像一致，主要用于向上采样。<br><em>(注解：从数学计算上，“反卷积” 相当于是将卷积核转换为稀疏矩阵后, 通过将卷积核进行翻转（旋转180度）和填充，之后再进行卷积来实现，因此，有时也被称为转置卷积。）</em></p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/cnn-figure14.jpg" alt="figure14"></p><ul><li>动态图为：<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/cnn-gif6.gif" alt="gif5"></li></ul><h1 id="_12-可变形卷积-deformable-convolution" tabindex="-1">12 可变形卷积（deformable convolution） <a class="header-anchor" href="#_12-可变形卷积-deformable-convolution" aria-label="Permalink to &quot;12 可变形卷积（deformable convolution）&quot;">​</a></h1><h2 id="_12-1-原理" tabindex="-1">12.1 原理 <a class="header-anchor" href="#_12-1-原理" aria-label="Permalink to &quot;12.1 原理&quot;">​</a></h2><ul><li>普通卷积网络kernel大小固定，限制了网络几何变换建模的能力;</li><li>可变形卷积在kernel中加入偏移量offset，能够减轻这种限制，偏移通过输入特征卷积得到; eg：X.Shape : torch.size([32,64,28,28]) offset.shape : torch.size([32,18,28,28])</li></ul><h2 id="_12-2-过程" tabindex="-1">12.2 过程 <a class="header-anchor" href="#_12-2-过程" aria-label="Permalink to &quot;12.2 过程&quot;">​</a></h2><ul><li><p>计算原理图 <br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/cnn-figure16.jpg" alt="figure16"></p></li><li><p>卷积过程 <br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/cnn-figure17.jpg" alt="figure17"></p></li><li><p>整体完善图 <br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/cnn-figure18.jpg" alt="figure18"></p></li></ul><h1 id="_13-3d-卷积" tabindex="-1">13 3D 卷积 <a class="header-anchor" href="#_13-3d-卷积" aria-label="Permalink to &quot;13 3D 卷积&quot;">​</a></h1><p>        3D卷积核有三个维度（高度、宽度、通道），沿着输入图像的 3 个方向进行滑动。<br><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/cnn-figure15.jpg" alt="figure15"></p><p><strong>思考：工程上3D卷积 input 和weight 分别是 多少维的？？？</strong> <br><strong>思考：1D 卷积的情况呢？</strong></p><h1 id="_14-参考链接" tabindex="-1">14 参考链接 <a class="header-anchor" href="#_14-参考链接" aria-label="Permalink to &quot;14 参考链接&quot;">​</a></h1><p><a href="https://arxiv.org/pdf/1603.07285.pdf" target="_blank" rel="noreferrer">参考文献</a></p>',55)]))}const d=e(n,[["render",i]]);export{h as __pageData,d as default};
