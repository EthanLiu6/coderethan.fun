import{_ as e,c as a,o as t,a2 as n}from"./chunks/framework.DA-Pb-tg.js";const d=JSON.parse('{"title":"0 LLM简史：从Transformer（2017）到DeepSeek-R1（2025）","description":"","frontmatter":{},"headers":[],"relativePath":"AI/deep_learning_theory/45-LLM-History.md","filePath":"AI/deep_learning_theory/45-LLM-History.md","lastUpdated":1742632017000}'),r={name:"AI/deep_learning_theory/45-LLM-History.md"};function o(p,s,i,l,c,m){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="_0-llm简史-从transformer-2017-到deepseek-r1-2025" tabindex="-1">0 LLM简史：从Transformer（2017）到DeepSeek-R1（2025） <a class="header-anchor" href="#_0-llm简史-从transformer-2017-到deepseek-r1-2025" aria-label="Permalink to &quot;0 LLM简史：从Transformer（2017）到DeepSeek-R1（2025）&quot;">​</a></h1><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/8AEic8PL2YEp3Vpx1hKpj932kjKQ7Sia5Fj4yPvibTZgEMyuGvAsvVNfgy4WdYn0xc8n01mG68MXLrmeLelKUGadQ/0?wx_fmt=jpeg" alt="cover_image"></p><p>2025年初，中国推出了具有开创性且高性价比的「大型语言模型」（Large Language Model——LLM）DeepSeek-R1，引发了AI的巨大变革。本文回顾了LLM的发展历程，起点是2017年<code>革命性的Transformer架构</code>，该架构通过「<strong>自注意力机制</strong>」(Self- Attention) <strong>彻底重塑了自然语言处理</strong>。到2018年，BERT和GPT等模型崭露头角，显著提升了上下文理解和文本生成能力。2020年，拥有1750亿参数的GPT-3展示了卓越的「少样本(few-shot)」和「零样本zero-shot」学习能力。然而，「幻觉」问题 — —即生成内容与事实不符，甚至出现「一本正经地胡说八道」的现象 — —成为了一个关键挑战。2022年，OpenAI通过开发「对话式」的ChatGPT应对这一问题，采用了「<strong>监督微调</strong>」（SFT）和「<strong>基于人类反馈的强化学习</strong>」（RLHF）。到2023年，像GPT-4这样的「多模态模型」整合了文本、图像和音频处理能力，使LLM能够以更接近人类的「听」、「说」、「看」能力。</p><p><strong>对话式ChatGPT 和 传统问答系统/搜索引擎的不同</strong></p><table tabindex="0"><thead><tr><th style="text-align:center;">特性</th><th style="text-align:center;">对话式 ChatGPT</th><th style="text-align:center;">传统问答系统/搜索引擎</th></tr></thead><tbody><tr><td style="text-align:center;">交互模式</td><td style="text-align:center;">多轮、动态对话</td><td style="text-align:center;">单次输入、单次输出</td></tr><tr><td style="text-align:center;">上下文处理</td><td style="text-align:center;">支持上下文关联</td><td style="text-align:center;">每次查询独立处理</td></tr><tr><td style="text-align:center;">回答生成</td><td style="text-align:center;">生成自然语言文本</td><td style="text-align:center;">返回链接、摘要或固定模板内容</td></tr><tr><td style="text-align:center;">灵活性</td><td style="text-align:center;">适应模糊、复杂问题</td><td style="text-align:center;">依赖关键词匹配，对模糊问题敏感</td></tr></tbody></table><p>    近期推出的OpenAI-o1和DeepSeek-R1「<strong>推理模型</strong>」(<code>Reasoning Model</code>)在复杂问题解决方面取得突破，赋予LLM更接近人类「系统思维」的深度推理能力，<code>标志着人工智能在模拟人类思维模式上迈出了重要一步</code>。此外，DeepSeek-R1模型以其「<strong>超成本效益</strong>」和「<strong>开源</strong>」设计挑战了AI领域的传统规范，推动了先进LLM的普及，并促进了各行业的创新。</p><h1 id="_1-什么是语言模型-language-models" tabindex="-1">1. 什么是语言模型 (Language Models)？ <a class="header-anchor" href="#_1-什么是语言模型-language-models" aria-label="Permalink to &quot;1. 什么是语言模型 (Language Models)？&quot;">​</a></h1><p>「语言模型」是一种「人工智能系统」，旨在处理、理解和生成类似人类的语言。它们从大型数据集中学习模式和结构，使得能够产生连贯且上下文相关的文本，应用于翻译、摘要、聊天机器人和内容生成等领域。</p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/figure2.png" alt="figure2"></p><p><em>语言模型就是这样一个模型：对于任意的词序列，它能够计算出这个序列是一句话的概率。或者说语言模型能预测单词序列的下一个词是什么。</em></p><h2 id="_1-1-大型语言模型-llms" tabindex="-1">1.1 大型语言模型（LLMs） <a class="header-anchor" href="#_1-1-大型语言模型-llms" aria-label="Permalink to &quot;1.1 大型语言模型（LLMs）&quot;">​</a></h2><p>    「语言模型」（LMs）和「大型语言模型」（LLMs）这两个术语虽然经常被互换使用，但实际上它们基于规模、架构、训练数据和能力指代不同的概念。LLMs 是 LMs 的一个子集，其规模显著更大，通常包含数十亿个参数（例如，GPT-3 拥有 1750 亿个参数）。这种更大的规模使 LLMs 能够在广泛的任务中表现出卓越的性能。</p><p>“LLM”这一术语在 2018 至 2019 年间随着基于 Transformer 架构的模型（如 BERT 和 GPT-1）的出现开始受到关注。然而，在 2020 年 <code>GPT-3 发布后，这个词才被广泛使用</code>，展示了这些大规模模型的重大影响力和强大能力。</p><h2 id="_1-2-自回归语言模型-autoregressive-language-models" tabindex="-1">1.2 自回归语言模型 （Autoregressive Language Models） <a class="header-anchor" href="#_1-2-自回归语言模型-autoregressive-language-models" aria-label="Permalink to &quot;1.2 自回归语言模型 （Autoregressive Language Models）&quot;">​</a></h2><p>    大多数LLMs以「自回归方式」(Autoregressive)操作，这意味着它们根据前面的「文本」预测下一个「字」（或token／sub-word）的「概率分布」(propability distribution)。这种自回归特性使模型能够学习复杂的语言模式和依赖关系，从而善于「<strong>文本生成</strong>」。</p><p>    在数学上，LLM 是一个概率模型（Probabilistic Model），根据之前的输入文本 $ x_1, x_2, \\ldots, x_{n-1} $ 预测下一个字 $ x_n $ 的概率分布。这可以表示为：<br></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>(</mo><msub><mi>x</mi><mi>n</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>x</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">P(x_n|x_1, x_2, \\ldots, x_{n-1}) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">n</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathrm">∣</span><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mpunct">,</span><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mpunct">,</span><span class="minner">…</span><span class="mpunct">,</span><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></span></p><p>    在文本生成任时，LLM通过<strong>解码算法(Decoding Algorithm)</strong> 来确定下一个输出的token。这一过程可以采用不同的策略：既可以选择概率最高的下个字（即贪婪搜索），也可以从预测的概率分布中<strong>随机采样一个token</strong>。后一种方法使得每次生成的文本都可能有所不同，这种特性与人类语言的多样性和随机性颇为相似。</p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/figure3.png" alt="figure3"></p><h2 id="_1-3-生成能力" tabindex="-1">1.3 生成能力 <a class="header-anchor" href="#_1-3-生成能力" aria-label="Permalink to &quot;1.3 生成能力&quot;">​</a></h2><p>    LLMs的<code>自回归特性</code>使其能够基于前文提供的上下文逐词生成文本。从「提示」(prompt)开始，如下图，模型通过迭代预测下一个词，直到生成完整的序列或达到预定的停止条件。为了生成对提示的完整回答，LLM通过<code>将先前选择的token添加到输入中进行迭代生成</code>，尤如 「文字接龙」游戏。</p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/figure4.png" alt="figure4"></p><blockquote><p>LLM的文本生成尤如「文字接龙」游戏。</p></blockquote><p>    这种生成能力推动了多种应用的发展，例如创意写作、对话式人工智能以及自动化客户支持系统。</p><h1 id="_2-transformer革命-2017" tabindex="-1">2. Transformer革命 (2017) <a class="header-anchor" href="#_2-transformer革命-2017" aria-label="Permalink to &quot;2\\. Transformer革命 (2017)&quot;">​</a></h1><p>    Vaswani等人在2017年通过其开创性论文<strong>Attention is All You Need</strong>引入了<strong>Transformer架构</strong>，标志着NLP的一个<code>分水岭时刻</code>。它解决了早期模型如循环神经网络（RNNs）和长短期记忆网络（LSTMs）的关键限制，这些模型<code>在长程依赖性和顺序处理方面存在困难</code>。这些问题使得使用RNN或LSTM实现有效的语言模型变得困难，因为它们计算效率低下且容易出现梯度消失等问题。另一方面，Transformers克服了这些障碍，彻底改变了这一领域，并为现代大型语言模型奠定了基础。</p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/figure5.png" alt="figure5"></p><blockquote><p>自注意力和Transformer架构</p></blockquote><h2 id="_2-1-transformer架构的关键创新" tabindex="-1">2.1 Transformer架构的关键创新 <a class="header-anchor" href="#_2-1-transformer架构的关键创新" aria-label="Permalink to &quot;2.1 Transformer架构的关键创新&quot;">​</a></h2><ol><li>自注意力机制 (Self-Attention)：与按顺序处理标记并难以应对长程依赖性的RNN不同，Transformers使用自注意力来权衡每个标记相对于其他标记的重要性。这使得模型能够动态关注输入的相关部分。数学上：</li></ol><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>(</mo><mi>Q</mi><mo separator="true">,</mo><mi>K</mi><mo separator="true">,</mo><mi>V</mi><mo>)</mo><mo>=</mo><mi>s</mi><mi>o</mi><mi>f</mi><mi>t</mi><mi>m</mi><mi>a</mi><mi>x</mi><mo>(</mo><mfrac><mrow><mi>Q</mi><msup><mi>K</mi><mi>T</mi></msup></mrow><mrow><msqrt><mrow><msub><mi>d</mi><mi>k</mi></msub></mrow></msqrt></mrow></mfrac><mo>)</mo><mi>V</mi></mrow><annotation encoding="application/x-tex">Attention(Q, K, V) = softmax(\\frac{QK^T}{\\sqrt{d_k}})V </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.5183309999999999em;"></span><span class="strut bottom" style="height:2.448331em;vertical-align:-0.9300000000000002em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit">A</span><span class="mord mathit">t</span><span class="mord mathit">t</span><span class="mord mathit">e</span><span class="mord mathit">n</span><span class="mord mathit">t</span><span class="mord mathit">i</span><span class="mord mathit">o</span><span class="mord mathit">n</span><span class="mopen">(</span><span class="mord mathit">Q</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.07153em;">K</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.22222em;">V</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathit">s</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mord mathit">t</span><span class="mord mathit">m</span><span class="mord mathit">a</span><span class="mord mathit">x</span><span class="mopen">(</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.7472200000000002em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="sqrt mord"><span class="sqrt-sign" style="top:-0.017220000000000013em;"><span class="style-wrap reset-textstyle textstyle uncramped">√</span></span><span class="vlist"><span style="top:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="mord textstyle cramped"><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span style="top:-0.77722em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped sqrt-line"></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathit">Q</span><span class="mord"><span class="mord mathit" style="margin-right:0.07153em;">K</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">T</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mclose">)</span><span class="mord mathit" style="margin-right:0.22222em;">V</span></span></span></span></span></p><p>这里，Q、K、V是查询(query)、键(key)和值(value)矩阵，dₖ是键的维度。自注意力允许并行计算，加快训练速度，同时提高全局上下文理解。</p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/figure6.png" alt="figure6"></p><ol start="2"><li>多头注意力：多个注意力头并行操作，每个头专注于输入的不同方面。它们的输出被连接并转换，从而实现更丰富的上下文表示。</li></ol><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/figure7.png" alt="figure"></p><ol start="3"><li><p>前馈网络(FFN)和层归一化(Layer Norm)：每个Transformer层包括应用于每个标记的前馈网络，以及层归一化和残差连接。这些稳定了训练并支持更深的架构。</p></li><li><p>位置编码：由于Transformers本身不编码标记顺序，因此添加了位置编码（位置和频率的正弦函数）以表示词序，在不牺牲并行化的情况下保留顺序信息。</p></li></ol><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/figure8.png" alt="figure"></p><h2 id="_2-2-对语言建模的影响" tabindex="-1">2.2 对语言建模的影响 <a class="header-anchor" href="#_2-2-对语言建模的影响" aria-label="Permalink to &quot;2.2 对语言建模的影响&quot;">​</a></h2><ul><li>可扩展性：Transformers实现了<strong>完全并行化的计算</strong>，<code>使得在大型数据集上训练大规模模型成为可能</code>。</li><li>上下文理解：自注意力<code>捕捉局部和全局依赖关系</code>，提高了连贯性和上下文意识。</li></ul><p>    Transformer架构的引入为构建<code>以前所未有的精确性和灵活性处理复杂任务的大规模高效语言模型</code>奠定了基础。</p><h2 id="_3-预训练transformer模型时代-2018–2020" tabindex="-1">3. 预训练Transformer模型时代 (2018–2020) <a class="header-anchor" href="#_3-预训练transformer模型时代-2018–2020" aria-label="Permalink to &quot;3\\. 预训练Transformer模型时代 (2018–2020)&quot;">​</a></h2><p>    2017年Transformer架构的引入为NLP的新时代铺平了道路，其特点是<strong>预训练模型</strong>的兴起和对<strong>扩展</strong>的前所未有的关注。这一时期见证了两个有影响力的模型家族的出现：<code>BERT和GPT</code>，它们展示了大规模<strong>预训练和微调</strong>范式的强大功能。<br></p><h2 id="_3-1-bert-双向上下文理解-2018" tabindex="-1">3.1. BERT：双向上下文理解 (2018) <a class="header-anchor" href="#_3-1-bert-双向上下文理解-2018" aria-label="Permalink to &quot;3.1. BERT：双向上下文理解 (2018)&quot;">​</a></h2><p>    2018年，谷歌推出了<strong>BERT（Bidirectional Encoder Representations from Transformers）</strong> ，这是一种使用Transformer编码器(Encoder)的突破性模型，<code>在广泛的NLP任务中取得了最先进的性能</code>。与之前单向处理文本（从左到右或从右到左）的模型不同，BERT采用了<code>双向训练方法</code>，使其能够同时<strong>从两个方向捕获上下文</strong>。通过生成深层次的、上下文丰富的文本表示，<code>BERT在文本分类、命名实体识别（NER）、情感分析等语言理解任务中表现出色</code>。</p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/figure9.png" alt="figure"></p><p>    BERT的关键创新包括：<br></p><ul><li><strong>掩码语言建模</strong>（Masked Language Modeling — MLM）：BERT不是预测序列中的下一个词，而是被训练预测句子中随机掩码的标记。这迫使模型在进行预测时考虑整个句子的上下文 — — 包括前后词语。例如，给定句子“The cat sat on the [MASK] mat”，BERT会学习根据周围上下文预测“soft”。</li><li><strong>下一句预测</strong>（Next Sentence Prediction — NSP）：除了MLM之外，BERT还接受了称为下一句预测的次要任务训练，其中模型学习预测两个句子是否在文档中连续。这帮助BERT在需要理解句子之间关系的任务中表现出色，例如问答和自然语言推理。</li></ul><p>    BERT的影响：BERT的双向训练使其在GLUE（通用语言理解评估）和SQuAD（斯坦福问答数据集）等基准测试中取得了突破性的表现。它的成功证明了上下文嵌入的重要性— — 这些<strong>表示</strong>根据<code>周围词语</code>动态变化 — — 并为新一代预训练模型铺平了道路。</p><h2 id="_3-2-gpt-生成式预训练和自回归文本生成-2018–2020" tabindex="-1">3.2 GPT：生成式预训练和自回归文本生成（2018–2020） <a class="header-anchor" href="#_3-2-gpt-生成式预训练和自回归文本生成-2018–2020" aria-label="Permalink to &quot;3.2 GPT：生成式预训练和自回归文本生成（2018–2020）&quot;">​</a></h2><p>    虽然BERT优先考虑双向上下文理解，但OpenAI的GPT系列采用了不同的策略，<code>专注于通过自回归预训练实现生成能力</code>。通过利用Transformer的解码器(<strong>Decoder</strong>)，GPT模型<code>在自回归语言模型和文本生成方面表现出色</code>。<strong>GPT(2018)</strong> GPT的第一个版本于2018年发布，是一个大规模的Transformer模型，经过训练以预测序列中的下一个词，类似于传统语言模型。</p><ul><li><strong>单向自回归训练</strong>：GPT使用<code>因果语言建模</code>目标进行训练，其中模型仅基于前面的token预测下一个token。这使得它特别适合于<strong>生成式任务</strong>，如<code>文本补全、摘要生成和对话生成</code>。</li><li><strong>下游任务的微调</strong>：GPT的一个关键贡献是它能够在不需要特定任务架构的情况下针对特定下游任务进行微调。只需添加一个分类头或修改输入格式，GPT就可以适应诸如情感分析、机器翻译和问答等任务。</li></ul><p><strong>举例</strong> <br></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">情感分析：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">输入：“这篇电影评论的情感是积极的还是消极的？评论：这部电影太棒了！”</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">输出：“积极”</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">机器翻译：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">输入：“将英文翻译为中文：Hello,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> how</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> are</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> you?”</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">输出：“你好，最近怎么样？”</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">问答：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">输入：“问题：珠穆朗玛峰的高度是多少？上下文：珠穆朗玛峰海拔8848.86米。”</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">输出：“8848.86米”</span></span></code></pre></div><p><strong>GPT-2 (2019)</strong>     在原版GPT的成功基础上，OpenAI发布了GPT-2，这是一个参数量达15亿的更大模型。GPT-2展示了令人印象深刻的零样本(Zero- shot)能力，意味着它可以在没有任何特定任务微调的情况下执行任务。例如，它可以生成连贯的文章、回答问题，甚至在语言之间翻译文本，尽管没有明确针对这些任务进行训练。</p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/figure10.png" alt="figure"></p><table tabindex="0"><thead><tr><th>模型</th><th>GPT1</th><th>GPT2</th><th>GPT3</th><th>GPT4</th></tr></thead><tbody><tr><td>参数</td><td>117M</td><td>1.5B</td><td>175B</td><td>1.8T</td></tr></tbody></table><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/figure11.png" alt="figure"></p><p>    <strong>GPT-3 (2020)</strong> GPT-3的发布标志着语言模型规模扩展的一个转折点。凭借惊人的1750亿参数(175B parameters)，GPT-3突破了大规模预训练的可能性界限。它展示了显著的<strong>少样本(Few-short)和零样本(Zero-short)学习能力</strong>，在推理时只需提供最少或无需示例即可执行任务。GPT-3的生成能力<code>扩展到了创意写作、编程和复杂推理任务，展示了超大模型的潜力</code>。</p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/figure12.png" alt="figure"></p><h2 id="_3-3-gpt的影响及规模的作用" tabindex="-1">3.3 GPT的影响及规模的作用 <a class="header-anchor" href="#_3-3-gpt的影响及规模的作用" aria-label="Permalink to &quot;3.3 GPT的影响及规模的作用&quot;">​</a></h2><p>    GPT模型的引入，特别是GPT-3，标志着AI的一个变革时代，展示了<code>自回归架构和生成能力的强大功能</code>。这些模型为内容创作、对话代理和自动推理等应用开辟了新的可能性，在广泛的任务中达到了接近人类的表现。GPT-3凭借其1750亿参数证明了规模的深远影响，表明在大规模数据集上训练的更大模型可以树立新的AI能力标杆。</p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/figure13.png" alt="figure"></p><blockquote><p>语言建模性能随着<strong>模型大小、数据集大小和训练使用的计算量</strong>的增加而平稳提升。<a href="https://arxiv.org/pdf/2001.08361" target="_blank" rel="noreferrer">https://arxiv.org/pdf/2001.08361</a></p></blockquote><p>    在2018年至2020年间，该领域由<strong>对规模的不懈追求</strong>驱动。研究人员发现，随着模型规模的增长 — — 从数百万到数十亿参数 — —它们在<code>捕捉复杂模式和泛化到新任务方面变得更好</code>。这种规模效应得到了三个关键因素的支持：</p><ul><li><strong>数据集大小</strong>：更大的模型需要庞大的数据集进行<code>预训练</code>。例如，GPT-3是在大量互联网文本语料库上进行训练的，使其能够学习多样化的语言模式和知识领域。</li><li><strong>计算资源</strong>：强大的硬件（如GPU和TPU）的可用性以及分布式训练技术，使得高效训练具有数十亿参数的模型成为可能。</li><li><strong>高效架构</strong>：混合精度训练和梯度检查点等创新降低了计算成本，使得在合理的时间和预算内进行大规模训练更加实际。</li></ul><p>    这个规模扩展的时代不仅提升了语言模型的性能，还为未来的AI突破奠定了基础，强调了规模、数据和计算在实现最先进结果中的重要性。</p><h1 id="_4-后训练对齐-弥合ai与人类价值观之间的差距-2021–2022" tabindex="-1">4. 后训练对齐：弥合AI与人类价值观之间的差距 (2021–2022) <a class="header-anchor" href="#_4-后训练对齐-弥合ai与人类价值观之间的差距-2021–2022" aria-label="Permalink to &quot;4\\. 后训练对齐：弥合AI与人类价值观之间的差距 (2021–2022)&quot;">​</a></h1><p>    GPT-3（一个拥有1750亿参数的LLM）生成几乎无法与人类写作区分的文本的能力引发了关于AI生成内容的真实性和可信度的重大担忧。尽管这一成就标志着AI发展的一个重要里程碑，但也突显了确保这些模型与人类价值观、偏好和期望保持一致的关键挑战。一个主要问题是「幻觉」（Hallucination），即<strong>LLM生成与事实不符、无意义或与输入提示矛盾的内容</strong>，给人一种「<code>一本正经地胡说八道</code>」的印象。为了解决这些挑战，<code>2021年和2022年的研究人员专注于改善与人类意图的一致性并减少幻觉</code>，导致了<strong>监督微调(SFT)</strong> 和基于人类反馈的<strong>强化学习(RLHF)</strong> 等技术的发展。<br></p><h2 id="_4-1-监督微调-sft" tabindex="-1">4.1 监督微调 (SFT) <a class="header-anchor" href="#_4-1-监督微调-sft" aria-label="Permalink to &quot;4.1 监督微调 (SFT)&quot;">​</a></h2><p>    增强GPT-3 <strong>对齐能力</strong>的第一步是监督微调（SFT），这是<strong>RLHF框架</strong>的基础组成部分。SFT类似于指令调优，涉及在<code>高质量的输入-输出对或演示上训练模型</code>，以教它如何遵循指令并生成所需的输出。</p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/figure14.png" alt="figure"></p><p>    这些演示经过精心策划，以反映预期的行为和结果，确保模型学会生成准确且符合上下文的响应。</p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/figure15.png" alt="figure"></p><p>然而，SFT本身有局限性：</p><ol><li>可扩展性：收集人类演示是<strong>劳动密集型且耗时</strong>的，尤其是对于复杂或小众任务。</li><li>性能：简单模仿人类行为并<strong>不能保证模型会超越人类表现或在未见过的任务上很好地泛化</strong>。</li></ol><p>    为了克服这些挑战，需要一种更具可扩展性和效率的方法，为下一步铺平了道路：<strong>基于人类反馈的强化学习</strong>（Reinforcement Learning from Human Feedback — RLHF）。</p><h2 id="_4-2-基于人类反馈的强化学习-rlhf" tabindex="-1">4.2 基于人类反馈的强化学习 (RLHF) <a class="header-anchor" href="#_4-2-基于人类反馈的强化学习-rlhf" aria-label="Permalink to &quot;4.2 基于人类反馈的强化学习 (RLHF)&quot;">​</a></h2><p>    OpenAI在2022年引入的<strong>RLHF解决了SFT的可扩展性和性能限制</strong>。与需要人类编写完整输出的SFT不同，RLHF涉及<code>根据质量对多个模型生成的输出进行排名</code>。这种方法允许更高效的数据收集和标注，显著增强了可扩展性。</p><p><strong>RLHF过程包括两个关键阶段：</strong></p><ol><li>训练奖励模型：人类注释者<code>对模型生成的多个输出进行排名</code>，创建一个偏好数据集。这些数据用于训练一个<strong>奖励模型(reward model)</strong>，该模型学习<code>根据人类反馈评估输出的质量</code>。</li><li>使用强化学习微调LLM：奖励模型使用<strong>近端策略优化（Proximal Policy Optimization - PPO）（一种强化学习算法）</strong> 指导LLM的微调。通过迭代更新，模型学会了<code>生成更符合人类偏好和期望的输出</code>。</li></ol><p>这个两阶段过程 — — <strong>结合SFT和RLHF</strong> — —使模型不仅能够准确遵循指令，还能<code>适应新任务并持续改进</code>。通过将人类反馈整合到训练循环中，RLHF显著增强了模型生成可靠、符合人类输出的能力，为AI对齐和性能设定了新标准。</p><h2 id="_4-3-chatgpt-推进对话式ai-2022" tabindex="-1">4.3 ChatGPT：推进对话式AI (2022) <a class="header-anchor" href="#_4-3-chatgpt-推进对话式ai-2022" aria-label="Permalink to &quot;4.3 ChatGPT：推进对话式AI (2022)&quot;">​</a></h2><p>    2022年3月，OpenAI推出了GPT-3.5，这是GPT-3的升级版，<strong>架构相同但训练和微调有所改进</strong>。关键增强包括通过改进数据更好地遵循指令，<code>减少了幻觉（尽管未完全消除），以及更多样化、更新的数据集，以生成更相关、上下文感知的响应。</code></p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/figure16.png" alt="figure"></p><p><strong>ChatGPT:</strong> <br> 基于<strong>GPT-3.5和InstructGPT</strong>，OpenAI于2022年11月推出了ChatGPT，这是一种突破性的<code>对话式AI模型</code>，专门<strong>为自然的多轮对话进行了微调</strong>。ChatGPT的关键改进包括：</p><ul><li><strong>对话聚焦的微调</strong>：在大量<strong>对话数据集上</strong>进行训练，ChatGPT擅长<code>维持对话的上下文和连贯性</code>，实现更引人入胜和类似人类的互动。</li><li><strong>RLHF</strong>：通过整合RLHF，ChatGPT学会了生成<code>不仅有用而且诚实和无害的响应</code>。人类培训师根据质量<strong>对响应进行排名</strong>，使模型能够逐步改进其表现。</li></ul><p><strong>ChatGPT的推出标志着AI的一个关键时刻，通常被称为「ChatGPT时刻」(ChatGPT moment)，因为它展示了对话式AI改变人机交互的潜力。</strong></p><h1 id="_5-多模态模型-连接文本、图像及其他-2023–2024" tabindex="-1">5. 多模态模型：连接文本、图像及其他 (2023–2024) <a class="header-anchor" href="#_5-多模态模型-连接文本、图像及其他-2023–2024" aria-label="Permalink to &quot;5\\. 多模态模型：连接文本、图像及其他 (2023–2024)&quot;">​</a></h1><p>    在2023年至2024年间，像GPT-4V和GPT-4o这样的多模态大型语言模型（MLLMs:Multimodal Large Language Models）通过将文本、图像、音频和视频整合到统一系统中重新定义了AI。这些模型扩展了传统语言模型的能力，实现了更丰富的交互和更复杂的问题解决。<br></p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/figure17.png" alt="figure"></p><h2 id="_5-1-gpt-4v-视觉遇见语言" tabindex="-1">5.1 GPT-4V：视觉遇见语言 <a class="header-anchor" href="#_5-1-gpt-4v-视觉遇见语言" aria-label="Permalink to &quot;5.1 GPT-4V：视觉遇见语言&quot;">​</a></h2><p>    2023年，OpenAI推出了GPT-4V，将GPT-4的<strong>语言能力</strong>与先进的<strong>计算机视觉</strong>相结合。它可以<code>解释图像、生成标题、回答视觉问题，并推断视觉中的上下文关系</code>。其跨模态注意力机制允许文本和图像数据的无缝集成，使其在医疗保健（如分析医学图像）和教育（如互动学习工具）等领域具有价值。</p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/figure18.png" alt="figure"></p><h2 id="_5-2-gpt-4o-全模态前沿" tabindex="-1">5.2 GPT-4o：全模态前沿 <a class="header-anchor" href="#_5-2-gpt-4o-全模态前沿" aria-label="Permalink to &quot;5.2 GPT-4o：全模态前沿&quot;">​</a></h2><p>    到2024年初，GPT-4o通过整合音频和视频输入进一步推进了多模态。它在一个统一的表示空间中运行，可以转录音频、描述视频或将文本合成音频。实时交互和增强的创造力 — — 如生成多媒体内容 — — 使其成为娱乐和设计等行业的多功能工具。</p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/figure19.png" alt="figure"></p><p>    现实世界的影响: MLLMs革新了医疗保健（诊断）、教育（互动学习）和创意产业（多媒体制作）等领域。它们处理多种模态的能力解锁了创新的新可能性。</p><h1 id="_6-开源和开放权重模型-2023–2024" tabindex="-1">6. 开源和开放权重模型 (2023–2024) <a class="header-anchor" href="#_6-开源和开放权重模型-2023–2024" aria-label="Permalink to &quot;6\\. 开源和开放权重模型 (2023–2024)&quot;">​</a></h1><p>    在2023年至2024年间，<strong>开源和开放权重AI模型获得了动力，使先进AI技术的访问民主化。</strong></p><ul><li><strong>开放权重LLMs</strong> ：开放权重模型提供公开访问的模型权重，限制极少。这使得微调和适应成为可能，<strong>但架构和训练数据保持封闭</strong>。它们适合快速部署。例子：Meta AI的LLaMA系列和Mistral AI的Mistral 7B / Mixtral 8x7B</li><li><strong>开源LLMs</strong> ：开源模型使底层代码和结构公开可用。这允许全面理解、修改和定制模型，促进创新和适应性。例子：OPT和BERT。</li><li><strong>社区驱动的创新</strong> ：像<strong>Hugging Face</strong>这样的平台促进了协作，<code>LoRA和PEFT等工具使高效的微调成为可能</code>。</li></ul><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/figure20.png" alt="figure"></p><p>    社区开发了专门针对医疗、法律和创意领域的模型，同时优先考虑道德AI实践。开源社区目前处于一个激动人心的阶段，得益于尖端对齐技术的出现。这一进展导致越来越多的卓越开放权重模型发布。因此，闭源和开放权重模型之间的差距正在稳步缩小。<strong>LLaMA3.1–405B模型首次历史性地弥合了与闭源对应物的差距</strong>。</p><p><strong>逆向工程反推llama架构</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hugging</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Face</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 团队实现了与</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LLaMA</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 兼容的模型类（LlamaForCausalLM），关键步骤包括：</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 解析权重文件结构，确定各层维度。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 对齐</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RoPE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 实现：根据</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LLaMA</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 的生成效果调整位置编码计算方式。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">3.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 发布配置文件：提供标准化的</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.json，用户可直接加载权重。</span></span></code></pre></div><p><strong>7. 推理模型：从「系统1」到「系统2」思维的转变 (2024)</strong></p><p>    2024年，AI开发开始强调<strong>增强「推理」(Reasoning</strong>)**，从简单的模式识别转向更逻辑化和结构化的思维过程。这一转变受到认知心理学双重过程理论的影响，<code>区分了「系统1」（快速、直觉）和「系统2」（缓慢、分析）思维</code>。虽然像GPT-3和GPT-4这样的早期模型在生成文本等「系统1」任务上表现出色，但<code>在深度推理和问题解决方面却有所欠缺</code>。<br></p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/figure21.png" alt="figure"></p><blockquote><p>「系统1」与「系统2」思维</p></blockquote><h2 id="_7-1-openai-o1-推理能力的一大飞跃-2024" tabindex="-1">7.1 OpenAI-o1：推理能力的一大飞跃(2024) <a class="header-anchor" href="#_7-1-openai-o1-推理能力的一大飞跃-2024" aria-label="Permalink to &quot;7.1 OpenAI-o1：推理能力的一大飞跃(2024)&quot;">​</a></h2><p>    OpenAI于2024年12月发布的o1模型旨在提高AI的推理能力，特别是在代码生成和调试等复杂任务上表现出色。o1模型的一个关键特征是通过 <strong>「思维链」(Chain of Thought－CoT)过程</strong>增强推理能力，使其能够将复杂问题分解为更小、更易管理的步骤。</p><p><strong>推理时间计算与能力</strong></p><ul><li><strong>思维链</strong>：o1模型在提供答案之前花费额外时间「思考」（thinking)，通过生成思维链来增强复杂推理，特别是在科学和数学领域。模型的准确性与在回答前用于思考的计算量的对数相关。</li><li><strong>o1模型套件包括</strong>: o1、o1-mini和o1 pro。o1-mini比o1-preview更快且更具成本效益，适用于编程和STEM相关任务，尽管它缺乏o1-preview的广泛世界知识。</li><li><strong>性能</strong>：o1-preview在物理、化学和生物学的基准测试中达到了大约博士水平的表现。在美国数学邀请赛中，它解决了83%的问题，相比之下GPT-4o解决了13%。它还在Codeforces编程竞赛中排名在第89百分位。</li></ul><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/figure22.png" alt="figure"></p><p><code>OpenAI-o1的发布标志着AI开发的一个关键时刻，展示了结合生成和推理能力创造能够像人类一样思考和行动的模型的潜力</code>。随着该领域的不断发展，<strong>推理模型有望解锁AI的新前沿</strong>，使机器能够应对人类面临的最具挑战性的问题。</p><p><strong>8. 成本高效的推理模型：DeepSeek-R1 (2025)</strong></p><p>    LLMs通常需要极其庞大的计算资源来进行训练和推理。像GPT-4o和OpenAI-o1这样的最先进LLM模型的闭源性质限制了对尖端AI的「普及化」。</p><h2 id="_8-1-deepseek-v3-2024–12" tabindex="-1">8.1 DeepSeek-V3 (2024–12) <a class="header-anchor" href="#_8-1-deepseek-v3-2024–12" aria-label="Permalink to &quot;8.1 DeepSeek-V3 (2024–12)&quot;">​</a></h2><p>    2024年12月下旬，「深度求索-V3」(DeepSeek-V3)作为一种成本高效的开放权重LLM出现，为AI的可访问性设定了新标准。DeepSeek-V3与OpenAI的ChatGPT等顶级解决方案相媲美，但开发成本显著降低，估计约为<strong>560万美元</strong>，仅为西方公司投资的一小部分。该模型最多包含<strong>6710亿个参数</strong>，其中<strong>370亿个活跃参数</strong>，并采用<strong>专家混合（MoE）架构</strong>，将模型划分为专门处理数学和编码等任务的组件，以减轻训练负担。DeepSeek-V3采用了工程效率，例如改进Key-Value缓存管理和进一步推动专家混合方法。该模型引入了三个关键架构：</p><ul><li><strong>多头潜在注意力</strong>（Multi-head Latent Attention — MLA）：通过压缩注意力键和值来减少内存使用，同时保持性能，并通过旋转位置嵌入（RoPE）增强位置信息。</li><li><strong>DeepSeek专家混合（DeepSeekMoE）</strong>：在前馈网络（FFNs）中采用共享和路由专家的混合，以提高效率并平衡专家利用率。</li><li><strong>多标记预测</strong> (Multi-Token Prediction — MTP)：<code>增强模型生成连贯且上下文相关的输出的能力，特别是对于需要复杂序列生成的任务</code>。</li></ul><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/figure23.png" alt="figure"></p><p>    DeepSeek-V3的发布引发了全球科技抛售，危及1万亿美元的市值，并导致英伟达股票盘前下跌13%。DeepSeek-V3的价格为每百万输出标记2.19美元，约为OpenAI类似模型成本的1/30。</p><h2 id="_8-2-deepseek-r1-zero-和-deepseek-r1-2025–01" tabindex="-1">8.2 DeepSeek-R1-Zero 和 DeepSeek-R1 (2025–01) <a class="header-anchor" href="#_8-2-deepseek-r1-zero-和-deepseek-r1-2025–01" aria-label="Permalink to &quot;8.2 DeepSeek-R1-Zero 和 DeepSeek-R1 (2025–01)&quot;">​</a></h2><p>    仅仅一个月后，2025年1月下旬，DeepSeek通过发布DeepSeek-R1-Zero和DeepSeek-R1再次引起轰动，这些模型展示了<strong>卓越的推理能力，训练成本极低</strong>。利用<code>先进的强化学习技术，这些模型证明了高性能推理可以在没有通常与尖端AI相关的巨额计算费用的情况下实现</code>。这一突破巩固了DeepSeek作为高效和可扩展AI创新领导者的地位。</p><ul><li><strong>DeepSeek-R1-Zero</strong>：一种基于DeepSeek-V3的推理模型，通过强化学习（RL）增强其推理能力。它完全消除了「监督微调」(SFT)阶段，直接从名为DeepSeek-V3-Base的预训练模型开始。它采用了一种基于「规则的强化学习方法」(Rule-based Reinforcement Learning)，称为「组相对策略优化」（Group Relative Policy Optimization — GRPO），根据预定义规则计算奖励，使训练过程更简单且更具可扩展性。</li></ul><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/figure24.png" alt="figure"></p><ul><li><strong>DeepSeek-R1</strong>：为了解决DeepSeek-R1-Zero的局限性，如低可读性和语言混杂，DeepSeek-R1纳入了一组有限的高质量冷启动数据和额外的RL训练。该模型经历了多个微调和RL阶段，包括拒绝采样和第二轮RL训练，以提高其通用能力和与人类偏好的一致性。</li></ul><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/figure25.png" alt="figure"></p><ul><li><strong>蒸馏DeepSeek模型</strong>：DeepSeek开发了较小的、蒸馏版的DeepSeek-R1，参数范围从15亿到700亿，将先进的推理能力带到较弱的硬件上。这些模型使用原始DeepSeek-R1生成的合成数据进行微调，确保在推理任务中表现出色，同时足够轻量化以便本地部署。</li></ul><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/figure26.png" alt="figure"></p><blockquote><p>DeepSeek 蒸馏DeepSeek模型</p></blockquote><p>    DeepSeek-R1在各种基准测试中表现出竞争力，包括数学、编码、常识和写作。根据使用模式，它相比OpenAI的o1模型等竞争对手提供了显著的成本节省，使用成本便宜20到50倍。</p><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/figure27.png" alt="figure"></p><h3 id="_8-3-对ai行业的影响" tabindex="-1"><strong>8.3 对AI行业的影响</strong> <a class="header-anchor" href="#_8-3-对ai行业的影响" aria-label="Permalink to &quot;**8.3 对AI行业的影响**&quot;">​</a></h3><p>    DeepSeek-R1的引入<code>挑战了AI领域的既定规范</code>，使先进LLMs得以「普及化」，并促进了一个更具竞争力的生态系统。其可负担性和可访问性预计将推动各行各业的采用和创新增加。最近，领先的云服务提供商如AWS、微软和谷歌云已在其平台上提供DeepSeek-R1。较小的云提供商和DeepSeek母公司以竞争性定价提供它。</p><p><strong>结论</strong></p><p>从2017年Transformer架构的引入到2025年DeepSeek-R1的发展，大型语言模型（LLMs）的演变标志着人工智能领域的一个革命性篇章。LLMs的崛起由四个里程碑式的成就标示：</p><ul><li><strong>Transformers (2017)</strong>：Transformer架构的引入为构建能够以前所未有的精确性和灵活性处理复杂任务的大规模高效模型奠定了基础。</li><li><strong>GPT-3 (2020)</strong>：该模型展示了规模在AI中的变革力量，证明了在大规模数据集上训练的巨大模型可以在广泛的应用中实现接近人类的表现，为AI所能完成的任务设立了新的基准。</li><li><strong>ChatGPT (2022)</strong>：通过将对话式AI带入主流，ChatGPT使高级AI对普通用户来说更加可访问和互动。它还引发了关于广泛采用AI的伦理和社会影响的关键讨论。</li><li><strong>DeepSeek-R1 (2025)</strong>：代表了成本效率的一大飞跃，DeepSeek-R1利用专家混合架构(MoE)和优化算法，与许多美国模型相比，运营成本降低了多达50倍。其开源性质加速尖端AI应用的普及化，赋予各行业创新者权力，并强调了可扩展性、对齐性和可访问性在塑造AI未来中的重要性</li></ul>`,137)]))}const h=e(r,[["render",o]]);export{d as __pageData,h as default};
