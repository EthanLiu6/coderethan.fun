import{_ as s,c as i,a2 as e,o as t}from"./chunks/framework.C9NVOr0y.js";const k=JSON.parse('{"title":"JavaSE 简介","description":"","frontmatter":{},"headers":[],"relativePath":"IT-learning/Java/01.java-se.md","filePath":"IT-learning/Java/01.java-se.md","lastUpdated":null}'),n={name:"IT-learning/Java/01.java-se.md"};function l(o,a,d,h,r,p){return t(),i("div",null,a[0]||(a[0]=[e(`<h1 id="javase-简介" tabindex="-1">JavaSE 简介 <a class="header-anchor" href="#javase-简介" aria-label="Permalink to &quot;JavaSE 简介&quot;">​</a></h1><p>JavaSE (Java Standard Edition) 是 Java 平台的核心版本，提供了开发桌面应用程序、服务端应用和基础库的标准 API。它是 Java 生态系统的基础。</p><h2 id="javase-核心概念" tabindex="-1">JavaSE 核心概念 <a class="header-anchor" href="#javase-核心概念" aria-label="Permalink to &quot;JavaSE 核心概念&quot;">​</a></h2><h3 id="_1-jdk、jre、jvm" tabindex="-1">1. JDK、JRE、JVM <a class="header-anchor" href="#_1-jdk、jre、jvm" aria-label="Permalink to &quot;1. JDK、JRE、JVM&quot;">​</a></h3><ul><li><strong>JDK (Java Development Kit)</strong>: Java 开发工具包，包含编译器、JRE 等工具，开发 Java 应用所需。</li><li><strong>JRE (Java Runtime Environment)</strong>: Java 运行环境，包含 JVM 和运行 Java 程序所需的类库。</li><li><strong>JVM (Java Virtual Machine)</strong>: Java 虚拟机，是 Java 程序运行的核心，它负责将字节码转化为机器码并执行。</li></ul><h3 id="_2-java-基础语法" tabindex="-1">2. Java 基础语法 <a class="header-anchor" href="#_2-java-基础语法" aria-label="Permalink to &quot;2. Java 基础语法&quot;">​</a></h3><ul><li><strong>变量</strong>：<code>int age = 25;</code> 用于存储数据。</li><li><strong>数据类型</strong>：<code>int</code>, <code>float</code>, <code>double</code>, <code>char</code>, <code>boolean</code> 等。</li><li><strong>运算符</strong>：加法 <code>+</code>, 减法 <code>-</code>, 乘法 <code>*</code>, 除法 <code>/</code> 等。</li><li><strong>条件语句</strong>：<code>if</code>, <code>else</code>, <code>switch</code>。</li><li><strong>循环</strong>：<code>for</code>, <code>while</code>, <code>do-while</code>。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HelloWorld</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, JavaSE!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,8)]))}const E=s(n,[["render",l]]);export{k as __pageData,E as default};
