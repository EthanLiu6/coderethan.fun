import{_ as i,c as a,a2 as n,o as h}from"./chunks/framework.C9NVOr0y.js";const g=JSON.parse('{"title":"MPI并行计算","description":"","frontmatter":{},"headers":[],"relativePath":"IT-learning/Linux/03.MPI并行计算.md","filePath":"IT-learning/Linux/03.MPI并行计算.md","lastUpdated":null}'),l={name:"IT-learning/Linux/03.MPI并行计算.md"};function p(t,s,k,e,r,E){return h(),a("div",null,s[0]||(s[0]=[n(`<h1 id="mpi并行计算" tabindex="-1">MPI并行计算 <a class="header-anchor" href="#mpi并行计算" aria-label="Permalink to &quot;MPI并行计算&quot;">​</a></h1><details class="details custom-block"><summary><a href="https://www.mubu.com/doc/5ih18Z2bKzt" target="_blank" rel="noreferrer">学习框架图</a></summary><p><img src="https://coderethan-1327000741.cos.ap-chengdu.myqcloud.com/blog-pics/MPI%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E8%AF%BE%E7%A8%8B%E6%A1%86%E6%9E%B6%E7%BB%93%E6%9E%84.png" alt="MPI并行计算课程框架结构"></p></details><div class="warning custom-block"><p class="custom-block-title">学前须知！</p><p>学习前要自己配置一个Linux虚拟机，并尝试使用远程连接工具连接访问。 自己提前查阅相关环境安装资料进行环境配置<span style="color:red;">（不懂就问AI或者浏览器）</span>，基本环境要求如下：</p><p><strong>Linux + ssh连接 + VIM + MPI（Open-MPI 或者 MPICH&#39;</strong></p></div><h2 id="一、并行的引入" tabindex="-1">一、并行的引入 <a class="header-anchor" href="#一、并行的引入" aria-label="Permalink to &quot;一、并行的引入&quot;">​</a></h2><blockquote><p>你要用python爬取三个网页的数据，你会一个一个爬吗？</p></blockquote><h3 id="_1-1-基本概念" tabindex="-1">1.1 基本概念 <a class="header-anchor" href="#_1-1-基本概念" aria-label="Permalink to &quot;1.1 基本概念&quot;">​</a></h3><p><strong>进程</strong>：程序运行的实例，一个程序运行起来就相当于一个进程。</p><p><strong>线程</strong>：</p><p><strong>节点</strong>：可以看做一台服务器或者PC机。</p><p><strong>消息</strong>：消息是数据和控制信息的封装，可以包含需要传递的任何信息，如数字、字符、结构体或对象。</p><p><strong>消息传递</strong>：创建消息 ——&gt; 发送消息 ——&gt; 接收消息 ——&gt; 处理消息（或响应）</p><blockquote><p>这里主要讲解MPI实现消息传递</p></blockquote><p><strong>分布式系统</strong>：是<strong>一组电脑（服务器）</strong>，透过<strong>网络</strong>相互连接<strong>传递消息</strong> 与<strong>通信后并协调它们的行为</strong>而形成的系统。</p><h3 id="_1-2-什么是并行" tabindex="-1">1.2 什么是并行？ <a class="header-anchor" href="#_1-2-什么是并行" aria-label="Permalink to &quot;1.2 什么是并行？&quot;">​</a></h3><p><strong>并行计算</strong>（英语：<strong>parallel computing</strong>）一般是指许多指令得以同时进行的计算模式。在同时进行的前提下，可以将计算的过程分解成小部分，之后以<a href="https://zh.wikipedia.org/wiki/%E5%B9%B6%E5%8F%91%E8%AE%A1%E7%AE%97" target="_blank" rel="noreferrer">并发</a>方式来加以解决[<a href="https://zh.wikipedia.org/wiki/%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97#cite_note-1" target="_blank" rel="noreferrer">1]</a>。</p><p>它广泛应用于科学计算、数据分析、大规模仿真等领域。随着多核处理器和分布式计算系统的发展，并行计算变得愈发重要。</p><p><a href="https://zh.wikipedia.org/wiki/%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97" target="_blank" rel="noreferrer">维基百科：并行计算</a></p><h3 id="_1-3-并行有啥用" tabindex="-1">1.3 并行有啥用？ <a class="header-anchor" href="#_1-3-并行有啥用" aria-label="Permalink to &quot;1.3 并行有啥用？&quot;">​</a></h3><p>我觉得主要就是：<strong>提高资源利用率、提升计算性能</strong></p><p>不管是单核单处理器、多处理机、还是分布式，都是尽最大可能让进程去占用资源，不让空闲。</p><h3 id="_1-4-并行的实际案例" tabindex="-1">1.4 并行的实际案例 <a class="header-anchor" href="#_1-4-并行的实际案例" aria-label="Permalink to &quot;1.4 并行的实际案例&quot;">​</a></h3><p>并行计算可以在不同的硬件架构上实现，包括单核单处理器、多处理器系统和分布式系统。</p><p>这里就拿单核单处理器简单演示</p><p>在单核单处理器的环境下，虽然硬件不支持真正的并行计算，但可以通过<strong>多线程</strong>或<strong>协程</strong>实现并行化。典型案例包括：</p><ul><li><p><strong>多线程编程</strong>：</p><ul><li><p><strong>案例</strong>：在 Python 中使用 <code>threading</code> 模块实现并发任务，例如网页抓取。</p></li><li><p><strong>示例代码</strong>：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> threading</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> requests</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用于存储结果的字典</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">results </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 爬取URL的函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch_url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> requests.get(url)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 将状态码和内容存储到结果字典中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        results[url] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &#39;status_code&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: response.status_code,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &#39;text&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: response.text  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 存储完整的爬取内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 打印状态信息</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Fetched </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">url</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> with status </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response.status_code</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    except</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> requests.exceptions.RequestException </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 处理请求异常</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        results[url] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &#39;status_code&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Error fetching </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">url</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 要爬取的URL列表</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">urls </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;https://www.baidu.com?wd=小狗&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;https://www.coderethan.fun/生活与算法/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;https://zh.wikipedia.org/wiki/分布式计算&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 存储线程的列表</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">threads </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建和启动线程</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> urls:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    thread </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> threading.Thread(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fetch_url, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url,))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    threads.append(thread)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    thread.start()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 等待所有线程完成</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> thread </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> threads:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    thread.join()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出整理后的结果</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url, data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> results.items():</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">URL: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">url</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Status Code: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;status_code&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;error&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Error: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Content length: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> characters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出内容长度</span></span></code></pre></div></li></ul></li></ul><p>后面我们会讲分布式环境下的并行计算，MPI实现</p><h2 id="二、并行的类型" tabindex="-1">二、并行的类型 <a class="header-anchor" href="#二、并行的类型" aria-label="Permalink to &quot;二、并行的类型&quot;">​</a></h2><h3 id="_2-1-按照处理机划分" tabindex="-1">2.1 按照处理机划分 <a class="header-anchor" href="#_2-1-按照处理机划分" aria-label="Permalink to &quot;2.1 按照处理机划分&quot;">​</a></h3><blockquote><p>单一处理机、单机的多处理器、多机多处理机</p></blockquote><ul><li><strong>共享内存模型</strong>：所有处理器共享相同的内存空间，任务间通过共享内存交换数据。这种模式简单高效，但扩展性有限。（该模型是IPC进程间通信，多个进程同时访问同一块内存区域，具体实现有多种，比如：信号量机制）</li><li><strong>分布式内存模型</strong>：每个处理器有独立的内存，任务间通过网络通信（如消息传递接口MPI）交换数据。适合大规模分布式系统，扩展性强。</li><li><strong>混合模型</strong>：结合共享内存和分布式内存模型，适合大型集群内的多核节点，比如MPI与OpenMP的结合使用。</li></ul><h3 id="_2-2-按照实现方式划分" tabindex="-1">2.2 按照实现方式划分 <a class="header-anchor" href="#_2-2-按照实现方式划分" aria-label="Permalink to &quot;2.2 按照实现方式划分&quot;">​</a></h3><p><strong>MPI（消息传递接口）</strong>：用于分布式并行计算，适合需要在不同节点之间进行通信的任务。（只是一个规范，具体实现有不同的厂商或者社区实现）</p><div class="language-tex vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tex</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MPI的实现</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MPI是一个标准化的接口，有多种实现，适用于不同的计算需求和环境。主要的MPI实现有：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MPICH：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">特点：一个广泛使用的开源MPI实现，遵循MPI标准，强调可移植性和性能。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">用途：研究、教育和生产环境中的高性能计算。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Open MPI：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">特点：另一个流行的开源MPI实现，支持多种网络协议和多种平台，具有灵活的架构。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">用途：科学计算、工程模拟、大规模并行计算。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Intel MPI：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">特点：由Intel提供，优化用于Intel架构，支持高性能计算。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">用途：特别适用于需要高性能的计算应用，如天气预测、流体动力学等。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MVAPICH：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">特点：为高性能计算和InfiniBand网络优化的MPI实现。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">用途：适用于需要大规模并行计算的科学和工程应用。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Microsoft MPI (MS-MPI)：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">特点：在Windows平台上实现的MPI，兼容MPI标准，适用于Windows HPC Server。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">用途：在Windows环境中进行高性能计算。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LAM/MPI：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">特点：一个较早的MPI实现，现已合并到Open MPI中，主要用于教学和研究。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">用途：用于学习和小规模并行计算。</span></span></code></pre></div><p><strong>OpenMP</strong>：适用于多核处理器的并行计算，使用共享内存模型，简单易用。</p><p><strong>CUDA</strong>：NVIDIA公司提供的GPU并行计算框架，用于GPU加速的并行计算。</p><p><strong>Hadoop/Spark</strong>：大数据处理框架，支持分布式数据处理和MapReduce并行计算模式。</p><h2 id="三、mpi的基本原理" tabindex="-1">三、MPI的基本原理 <a class="header-anchor" href="#三、mpi的基本原理" aria-label="Permalink to &quot;三、MPI的基本原理&quot;">​</a></h2><p><strong>合并+通信 = 并行</strong></p><h3 id="_3-1-基本原理" tabindex="-1">3.1 基本原理 <a class="header-anchor" href="#_3-1-基本原理" aria-label="Permalink to &quot;3.1 基本原理&quot;">​</a></h3><h3 id="_3-2-模型演示" tabindex="-1">3.2 模型演示 <a class="header-anchor" href="#_3-2-模型演示" aria-label="Permalink to &quot;3.2 模型演示&quot;">​</a></h3><h2 id="四、基本环境配置-简略" tabindex="-1">四、基本环境配置（简略） <a class="header-anchor" href="#四、基本环境配置-简略" aria-label="Permalink to &quot;四、基本环境配置（简略）&quot;">​</a></h2><h3 id="_4-1-linux环境" tabindex="-1">4.1 Linux环境 <a class="header-anchor" href="#_4-1-linux环境" aria-label="Permalink to &quot;4.1 Linux环境&quot;">​</a></h3><h3 id="_4-2-ssh工具" tabindex="-1">4.2 ssh工具 <a class="header-anchor" href="#_4-2-ssh工具" aria-label="Permalink to &quot;4.2 ssh工具&quot;">​</a></h3><h3 id="_4-3-vim编辑器" tabindex="-1">4.3 VIM编辑器 <a class="header-anchor" href="#_4-3-vim编辑器" aria-label="Permalink to &quot;4.3 VIM编辑器&quot;">​</a></h3><h3 id="_4-4-mpi环境" tabindex="-1">4.4 MPI环境 <a class="header-anchor" href="#_4-4-mpi环境" aria-label="Permalink to &quot;4.4 MPI环境&quot;">​</a></h3><h4 id="_4-4-1-安装" tabindex="-1">4.4.1 安装 <a class="header-anchor" href="#_4-4-1-安装" aria-label="Permalink to &quot;4.4.1 安装&quot;">​</a></h4><h4 id="_4-4-2-编译" tabindex="-1">4.4.2 编译 <a class="header-anchor" href="#_4-4-2-编译" aria-label="Permalink to &quot;4.4.2 编译&quot;">​</a></h4><h4 id="_4-4-3-配置" tabindex="-1">4.4.3 配置 <a class="header-anchor" href="#_4-4-3-配置" aria-label="Permalink to &quot;4.4.3 配置&quot;">​</a></h4><h4 id="_4-4-4-了解" tabindex="-1">4.4.4 了解 <a class="header-anchor" href="#_4-4-4-了解" aria-label="Permalink to &quot;4.4.4 了解&quot;">​</a></h4><blockquote><p>对这块感兴趣的可以自己了解了解</p></blockquote><p>安装完 Open MPI 或 MPICH 后会自动生成一套与 MPI 相关的工具（包括编译器和运行程序），是因为这些工具都是为开发和执行 MPI 程序而专门设计的，包含了消息传递接口的支持库。具体来说，它们提供了以下几种关键工具：</p><p><strong>1. MPI 编译器包装器</strong></p><ul><li><p><strong><code>mpicc</code></strong>、<strong><code>mpic++</code></strong>、<strong><code>mpif90</code></strong> 等编译器工具并不是真正的编译器，而是包装器（wrapper）。</p></li><li><p>它们的作用是 <strong>简化编译过程</strong>，通过调用系统的 C、C++ 或 Fortran 编译器（如 GCC、gfortran 等），并自动添加 MPI 库和头文件的路径和链接选项。</p></li><li><p>例如，<code>mpicc</code> 的实际效果等价于在编译命令中手动添加包含路径（<code>-I</code>）和链接选项（<code>-L</code> 和 <code>-l</code>），从而找到 MPI 库和头文件：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mpicc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_mpi_program.c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_mpi_program</span></span></code></pre></div><p>实际上等价于：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_mpi_program.c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_mpi_program</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -I/path/to/mpi/include</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -L/path/to/mpi/lib</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -lmpi</span></span></code></pre></div><p>使用 <code>mpicc</code> 等包装器工具后，用户不需要记住 MPI 的具体路径或链接细节，这大大简化了编译过程。</p></li></ul><p><strong>2. MPI 程序的运行工具</strong></p><ul><li><p><strong><code>mpirun</code></strong> 或 <strong><code>mpiexec</code></strong> 是用于运行 MPI 程序的工具。</p></li><li><p>这些工具可以 <strong>在多个进程上运行同一个 MPI 程序</strong>，并管理各个进程之间的通信。</p></li><li><p>在多核环境或集群中，<code>mpirun</code> 会分配不同的计算节点或 CPU 核心给每个进程，并通过底层网络协议（如 TCP、Infiniband）完成进程间的数据传输。</p><p>使用示例：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mpirun</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -np</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./my_mpi_program</span></span></code></pre></div><p>上面的命令将启动 4 个 MPI 进程，并在每个进程中运行 <code>my_mpi_program</code>，从而实现并行计算。</p></li></ul><p><strong>3. 为什么编译器和运行程序会自动生成？</strong></p><ul><li><strong>安装时的配置</strong>：在安装 Open MPI 或 MPICH 时，安装程序会自动配置这些工具，以便与系统的编译器集成，并确保库文件路径和头文件路径正确设置。</li><li><strong>标准化工具链</strong>：MPI 编译器和运行工具是 MPI 标准的一部分，通过安装 MPI 实现，自动生成这些标准化的工具，便于开发者编译和执行 MPI 程序。</li></ul><h2 id="五、mpi的基本使用" tabindex="-1">五、MPI的基本使用 <a class="header-anchor" href="#五、mpi的基本使用" aria-label="Permalink to &quot;五、MPI的基本使用&quot;">​</a></h2><blockquote><p>六个接口</p></blockquote><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nclude </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stdio.h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;mpi.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">argv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myid, size;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    MPI_Init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">argv);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    MPI_Comm_rank</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MPI_COMM_WORLD, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myid);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    MPI_Comm_size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MPI_COMM_WORLD, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">size);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MPI_Recv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">buf, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count, MPI_Datatype type, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> source,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">             int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tag, MPI_Comm comm, MPI_Status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 发送端和接收端采用同一个变量命名，原因是子任务内部是局部性的</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 其他参数同Send</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 不同：*status：返回状态（编程时忽略）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MPI_Send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">buf, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count, MPI_Datatype type, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dest,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">             int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tag, MPI_Comm comm);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // *buf: 缓冲区; count * type = 数据大小;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // dest: 目的进程编号; tag: 消息标志(消息通讯的匹配); comm: 当前的通讯域</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello World For MPI! I am Node </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, myid, size);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    MPI_Finalize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_5-1-快速使用" tabindex="-1">5.1 快速使用 <a class="header-anchor" href="#_5-1-快速使用" aria-label="Permalink to &quot;5.1 快速使用&quot;">​</a></h3><h3 id="_5-2-源码了解" tabindex="-1">5.2 源码了解 <a class="header-anchor" href="#_5-2-源码了解" aria-label="Permalink to &quot;5.2 源码了解&quot;">​</a></h3><h3 id="_5-3-进阶" tabindex="-1">5.3 进阶 <a class="header-anchor" href="#_5-3-进阶" aria-label="Permalink to &quot;5.3 进阶&quot;">​</a></h3><h4 id="_5-3-1-分布式实现" tabindex="-1">5.3.1 分布式实现 <a class="header-anchor" href="#_5-3-1-分布式实现" aria-label="Permalink to &quot;5.3.1 分布式实现&quot;">​</a></h4><p><strong>步骤一：Linux安装配置MPICH</strong></p><p><strong>步骤二：MacOS安装配置OpenMPI</strong></p><p><strong>步骤三：配置 SSH</strong></p><p>为了使 MPI 可以在 Linux 和 MacOS 之间无密码运行</p><ol><li><p><strong>在 Linux 上生成 SSH 密钥</strong>： 在 Linux 终端中输入：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ssh-keygen -t rsa</span></span></code></pre></div><p>按照提示，按回车接受默认设置，密钥将生成在 <code>~/.ssh/id_rsa</code> 和 <code>~/.ssh/id_rsa.pub</code>。</p></li><li><p><strong>将公钥复制到 MacOS 机器</strong>： 使用以下命令将公钥复制到 MacOS 机器：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ssh-copy-id user@mac-ip-address</span></span></code></pre></div><p>替换 <code>user</code> 为 MacOS 用户名，<code>mac-ip-address</code> 为 MacOS 机器的 IP 地址。</p></li><li><p><strong>测试 SSH 连接</strong>： 在 Linux 上测试 SSH 连接：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ssh user@mac-ip-address</span></span></code></pre></div><p>确保可以无密码登录。</p></li></ol><p><strong>步骤四：案例演示</strong></p><p>Linux为主、mac为子</p><p><strong>MPI 程序：计算从 1 到 N 的总和</strong></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;mpi.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdlib.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char**</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    MPI_Init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">argc, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">argv);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 初始化 MPI</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> world_size, world_rank;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    MPI_Comm_size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MPI_COMM_WORLD, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">world_size);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 获取进程总数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    MPI_Comm_rank</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MPI_COMM_WORLD, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">world_rank);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 获取当前进程的编号</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 定义 N 的值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> N </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 要计算的最大值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> local_sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 当前进程计算的部分和</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> total_sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 总和</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 计算每个进程负责的范围</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> portion_size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> N </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> world_size;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 每个进程负责的部分大小</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> world_rank </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> portion_size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 开始值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> end </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (world_rank </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> world_size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> N </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> portion_size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 结束值</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 每个进程计算自己的部分和</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> end; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        local_sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 计算从 start 到 end 的和</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 打印每个进程的计算状态</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Process </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> on </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> calculated local sum from </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, world_rank, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getenv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;HOSTNAME&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), start, end, local_sum);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用 MPI_Reduce 将每个进程的部分和加到总和中</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    MPI_Reduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">local_sum, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">total_sum, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, MPI_INT, MPI_SUM, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, MPI_COMM_WORLD);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 主进程打印结果</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (world_rank </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Total sum from 1 to </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, N, total_sum);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    MPI_Finalize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 结束 MPI</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Linux</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mpicc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mpi_sum.c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mpi_sum.out</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mpirun</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -np</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -host</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> host1ip,host2ip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./mpi_sum.out</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">top</span></span></code></pre></div><h2 id="六、学习策略与建议" tabindex="-1">六、学习策略与建议 <a class="header-anchor" href="#六、学习策略与建议" aria-label="Permalink to &quot;六、学习策略与建议&quot;">​</a></h2><h3 id="_6-1-新东西学习" tabindex="-1">6.1 新东西学习 <a class="header-anchor" href="#_6-1-新东西学习" aria-label="Permalink to &quot;6.1 新东西学习&quot;">​</a></h3><blockquote><p>先上手、再系统（先完成、再完善）</p></blockquote><ul><li><p>快速上手（横向或纵向）</p></li><li><p>宏观理解所属地位和作用</p></li><li><p>查阅——官方文档 + 源码 + ……</p></li><li><p>实际项目</p></li></ul><h3 id="_6-2-遇事不决" tabindex="-1">6.2 遇事不决 <a class="header-anchor" href="#_6-2-遇事不决" aria-label="Permalink to &quot;6.2 遇事不决&quot;">​</a></h3><ul><li><p>跳出狭隘——看宏观</p></li><li><p>换个方式或者换个材料（工具）</p></li><li><p>联系自已已有的其他知识体系</p></li><li><p>生活案例</p></li></ul><h3 id="_6-3-知识体系构建" tabindex="-1">6.3 知识体系构建 <a class="header-anchor" href="#_6-3-知识体系构建" aria-label="Permalink to &quot;6.3 知识体系构建&quot;">​</a></h3><p>这里我借用刘崇军老师给说说的话：</p><blockquote><p>对于终生学习来说，集中注意力很重要，构建概念体系很重要。市面上重要的信息很多：投资理财、人际关系、情商、人性。。。对于终生学习来说这些简单了解即可，不要过度分散注意力。</p><p>我个人的路径：深入了解一个专业，找到专业中需要解决的问题。个人能力与解决问题之间的差距在哪里？怎么样去补齐这个差距？行业的自动化程度高么？从哪里开始进行自动化？行业未来的方向是什么？我能做什么准备？整个过程走下来，人生也就到中后期了。</p></blockquote>`,84)]))}const o=i(l,[["render",p]]);export{g as __pageData,o as default};
