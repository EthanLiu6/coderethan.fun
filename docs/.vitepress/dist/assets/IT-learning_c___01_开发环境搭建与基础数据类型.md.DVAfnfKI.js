import{_ as i,c as a,o as n,a2 as l}from"./chunks/framework.DA-Pb-tg.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"IT-learning/c++/01_开发环境搭建与基础数据类型.md","filePath":"IT-learning/c++/01_开发环境搭建与基础数据类型.md","lastUpdated":1742639200000}'),t={name:"IT-learning/c++/01_开发环境搭建与基础数据类型.md"};function h(p,s,k,e,o,r){return n(),a("div",null,s[0]||(s[0]=[l(`<h2 id="c-编程语言-01-从-python-到-c-的启航" tabindex="-1">C++编程语言 01：从 Python 到 C++ 的启航 <a class="header-anchor" href="#c-编程语言-01-从-python-到-c-的启航" aria-label="Permalink to &quot;C++编程语言 01：从 Python 到 C++ 的启航&quot;">​</a></h2><h3 id="引言-欢迎来到-c-的世界" tabindex="-1">引言：欢迎来到 C++ 的世界！ <a class="header-anchor" href="#引言-欢迎来到-c-的世界" aria-label="Permalink to &quot;引言：欢迎来到 C++ 的世界！&quot;">​</a></h3><p>各位同学，大家好！很高兴能和大家一起开启 C++ 的学习之旅。相信大家已经掌握了 Python 编程的基础，对编程的思想和逻辑有了初步的认识。那么，为什么要学习 C++ 呢？C++ 又会给我们带来什么新的体验和挑战呢？这就是我们今天课程要探讨的内容。</p><h3 id="一、-c-与-python-的对比-理解差异-扬长避短" tabindex="-1">一、 C++ 与 Python 的对比：理解差异，扬长避短 <a class="header-anchor" href="#一、-c-与-python-的对比-理解差异-扬长避短" aria-label="Permalink to &quot;一、 C++ 与 Python 的对比：理解差异，扬长避短&quot;">​</a></h3><p>我们首先来对比一下 C++ 和大家熟悉的 Python，了解它们的优势和适用场景，从而更好地理解学习 C++ 的意义。</p><p><strong>速度和效率：</strong></p><ul><li><strong>C++： 编译型语言，执行速度快，效率高。</strong> C++ 代码在运行前会被完整地编译成机器可以直接执行的二进制代码，这使得 C++ 在执行效率上具有天然的优势，尤其是在处理大量计算和对性能有极致要求的场景下。</li><li><strong>Python： 解释型语言，执行速度相对较慢，但开发效率高。</strong> Python 代码在运行时逐行解释执行，这牺牲了一部分执行效率，但换来了更快的开发速度和更简洁的语法，非常适合快速原型开发和脚本编写。</li></ul><p><strong>内存管理：</strong></p><ul><li><strong>C++： 需要手动管理内存。</strong> C++ 允许程序员直接控制内存的分配和释放，这赋予了开发者更高的灵活性和优化空间，但也带来了内存泄漏等风险。</li><li><strong>Python： 自动内存管理（垃圾回收机制）。</strong> Python 自动处理内存分配和回收，降低了开发者的心智负担，但也可能在某些情况下带来性能上的开销。</li></ul><p><strong>应用领域：</strong></p><ul><li><strong>C++： 性能敏感型应用、系统级编程、游戏开发、嵌入式系统、高性能计算等。</strong> 由于其高效的执行速度和对硬件的直接控制能力，C++ 在这些领域扮演着重要的角色。</li><li><strong>Python： 数据分析、人工智能、Web 开发、自动化脚本、快速原型开发等。</strong> Python 的简洁语法和丰富的库使其在这些领域非常受欢迎。</li></ul><p><strong>为什么人工智能班级学习 C++？</strong></p><ul><li><strong>深入理解底层原理，为算法优化提供基础。</strong> AI 的核心算法往往涉及大量的计算，了解 C++ 可以帮助我们理解这些算法在底层是如何高效执行的，从而为算法优化提供思路。</li><li><strong>部分高性能库和框架使用 C++ 开发，学习 C++ 有助于更好地使用和理解这些工具。</strong> 许多流行的深度学习框架（如 TensorFlow、PyTorch 的底层）都是用 C++ 实现的，掌握 C++ 可以更深入地了解它们的运行机制，甚至进行二次开发。</li><li><strong>提升编程技能和代码效率。</strong> C++ 的学习能够锻炼我们对内存管理、性能优化等方面的理解，提升我们的编程基本功，并编写出更高效的代码。</li></ul><h3 id="二、-c-的发展与平台-历史的脉络与选择" tabindex="-1">二、 C++ 的发展与平台：历史的脉络与选择 <a class="header-anchor" href="#二、-c-的发展与平台-历史的脉络与选择" aria-label="Permalink to &quot;二、 C++ 的发展与平台：历史的脉络与选择&quot;">​</a></h3><p>了解 C++ 的发展历程和它所运行的平台，有助于我们更好地理解这门语言的特点和应用场景。</p><ul><li><p><strong>C++ 的发展历程：从机器到现代</strong></p><ul><li><strong>机器语言:</strong> 计算机最早只能理解的语言，用二进制代码表示指令，例如 <code>0001101000</code>。<strong>非常难以理解和编写。</strong></li><li><strong>汇编语言:</strong> 用助记符代替二进制代码，例如 <code>mov</code>, <code>jmp</code>, <code>add</code>。<strong>相较于机器语言更容易理解，但仍然很底层，开发效率不高。</strong></li><li><strong>高级语言 (C语言):</strong> 更接近人类语言，更容易理解和编写，例如 <code>int x = 5;</code>。<strong>提高了开发效率，但仍然偏向过程式编程。</strong></li><li><strong>C++: 在C语言基础上发展而来，</strong> 由 Bjarne Stroustrup 于 1979 年在贝尔实验室开发。<strong>增加了面向对象特性（类、继承、多态），并持续引入泛型编程、Lambda 表达式等现代特性，兼顾开发效率和执行效率。</strong> C++ 可以看作是 C 语言的增强版，它既保留了 C 的高效性，又加入了许多现代编程的特性。</li></ul></li><li><p><strong>C++版本：不断进化的语言</strong></p><ul><li><strong>C++98/03：</strong> C++ 的早期稳定版本。</li><li><strong>C++11：</strong> 一个重要的里程碑版本，引入了大量现代特性，如智能指针、Lambda 表达式、自动类型推断等，<strong>是学习现代 C++ 的基础。</strong></li><li><strong>C++14, C++17, C++20...：</strong> 后续版本不断引入新特性和改进，使 C++ 更加强大和易用。<strong>我们建议学习最新的稳定版本，目前 C++20 或更新版本是主流。</strong></li></ul></li></ul><h3 id="三、-c-编译原理-从代码到执行" tabindex="-1">三、 C++ 编译原理：从代码到执行 <a class="header-anchor" href="#三、-c-编译原理-从代码到执行" aria-label="Permalink to &quot;三、 C++ 编译原理：从代码到执行&quot;">​</a></h3><p>与 Python 的解释执行不同，C++ 是一门编译型语言。理解编译过程对于学习 C++ 至关重要。</p><p><strong>Python：解释型语言，逐行解释执行代码。</strong> 就像我们阅读文章一样，Python 解释器会一行一行地理解并执行代码。</p><p><strong>C++：编译型语言，需要先将代码编译成机器语言才能执行。</strong> C++ 代码需要经过一个“翻译”的过程，将其转化为计算机能够理解的机器语言。</p><p><strong>编译过程详解:</strong></p><ol><li><p><strong>预处理 (Preprocessing)：</strong></p><ul><li>处理以 <code>#</code> 开头的预处理指令。</li><li>例如： <ul><li><code>#include &lt;iostream&gt;</code>：将 <code>iostream</code> 头文件的内容<strong>复制</strong>到当前文件中。</li><li><code>#define PI 3.14159</code>：将代码中的 <code>PI</code> 替换为 <code>3.14159</code>。</li></ul></li><li>预处理的输出结果是一个包含了所有必要代码的源文件。</li></ul></li><li><p><strong>编译 (Compilation)：</strong></p><ul><li>将预处理后的 C++ 代码翻译成<strong>汇编语言</strong>。</li><li>汇编语言是一种更接近机器语言的低级语言，使用助记符表示机器指令。</li></ul></li><li><p><strong>汇编 (Assembly)：</strong></p><ul><li>将汇编语言代码翻译成<strong>机器语言</strong>（也称为目标代码）。</li><li>机器语言是由二进制指令组成的，计算机可以直接执行。</li><li>汇编器的输出结果是一个或多个<strong>目标文件</strong> (<code>.obj</code> 或 <code>.o</code> 文件)。</li></ul></li><li><p><strong>链接 (Linking)：</strong></p><ul><li>将多个目标文件和所需的<strong>库文件</strong>（包含已经编译好的函数和代码）<strong>合并</strong>成一个最终的<strong>可执行文件</strong> (<code>.exe</code> 或无后缀文件)。</li><li>链接器负责解决符号引用问题，例如将函数调用与函数定义连接起来。</li></ul></li></ol><h3 id="四、-c-开发环境搭建-工欲善其事-必先利其器" tabindex="-1">四、 C++ 开发环境搭建：工欲善其事，必先利其器 <a class="header-anchor" href="#四、-c-开发环境搭建-工欲善其事-必先利其器" aria-label="Permalink to &quot;四、 C++ 开发环境搭建：工欲善其事，必先利其器&quot;">​</a></h3><p>选择合适的开发环境能大大提高我们的学习和开发效率。</p><p><strong>推荐使用 CLion:</strong></p><ul><li><strong>跨平台开发工具，支持 Windows、Linux、macOS 等平台。</strong> 无论你使用哪种操作系统，CLion 都能提供一致的开发体验。</li><li><strong>专为 C++ 设计的集成开发环境 (IDE)，提供代码补全、语法高亮、调试、重构等强大功能。</strong> 这些功能可以帮助我们更快更准确地编写代码，并更容易发现和修复错误。</li><li><strong>与 CMake 构建系统无缝集成，方便项目管理。</strong> CMake 是一个流行的跨平台构建工具，CLion 的集成使得管理复杂的 C++ 项目变得更加容易。</li></ul><p><strong>CLion 安装演示:</strong></p><ol><li><p><strong>下载 CLion 安装包：</strong></p><ul><li><strong>MAC:</strong> <a href="https://www.jetbrains.com/clion/download/download-thanks.html?platform=mac" target="_blank" rel="noreferrer">https://www.jetbrains.com/clion/download/download-thanks.html?platform=mac</a></li><li><strong>Windows:</strong> <a href="https://www.jetbrains.com/clion/download/download-thanks.html?platform=windows" target="_blank" rel="noreferrer">https://www.jetbrains.com/clion/download/download-thanks.html?platform=windows</a></li><li><strong>Linux:</strong> <a href="https://www.jetbrains.com/clion/download/download-thanks.html?platform=linux" target="_blank" rel="noreferrer">https://www.jetbrains.com/clion/download/download-thanks.html?platform=linux</a></li></ul></li><li><p><strong>运行安装程序，根据提示完成安装。</strong></p></li><li><p><strong>启动 CLion，配置 C++ 工具链。</strong></p><ul><li>CLion 需要一个 C++ 编译器才能工作。常见的编译器有 GCC、Clang 和 Visual Studio 的 MSVC。</li><li>在首次启动 CLion 时，它会提示你选择或配置编译器。</li><li><strong>在 Windows 上，通常会选择 MinGW 或安装 Visual Studio Community，并配置其编译器。</strong></li><li><strong>在 Linux 和 macOS 上，通常系统已经自带 GCC 或 Clang。</strong></li></ul></li></ol><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p><strong>其他开发环境:</strong></p><ul><li><strong>GCC/G++:</strong> 开源编译器，使用命令行操作，适合有一定基础的开发者，可以更深入地了解编译过程。</li><li><strong>Visual Studio:</strong> 微软开发的集成开发环境，功能强大，尤其在 Windows 平台开发中表现优秀，但体积较大。</li><li><strong>VS Code with C/C++ Extension:</strong> 轻量级但功能强大的代码编辑器，通过安装 C/C++ 扩展可以获得代码补全、调试等功能，适合喜欢自定义配置的开发者。</li></ul></div><h3 id="五、-第一个-c-程序-迈出-c-编程的第一步" tabindex="-1">五、 第一个 C++ 程序：迈出 C++ 编程的第一步 <a class="header-anchor" href="#五、-第一个-c-程序-迈出-c-编程的第一步" aria-label="Permalink to &quot;五、 第一个 C++ 程序：迈出 C++ 编程的第一步&quot;">​</a></h3><p>让我们一起编写并运行你的第一个 C++ 程序！</p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;iostream&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 引入 iostream 头文件，提供输入输出功能</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 使用标准命名空间，简化代码</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 主函数，程序执行的入口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, world!&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 使用 cout 输出字符串到控制台，并换行</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 返回值 0 表示程序正常结束</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>好的，我将你提供的 C++ 基础数据类型部分进行补充和完善，使其成为更完整的第一节课后半部分内容。</p><h3 id="六、c-数据类型" tabindex="-1">六、C++ 数据类型 <a class="header-anchor" href="#六、c-数据类型" aria-label="Permalink to &quot;六、C++ 数据类型&quot;">​</a></h3><p>我们已经了解了 C++ 的一些基本特性，现在让我们深入了解 C++ 中的数据类型，这是构建任何程序的基础。</p><p><strong>1. 基本数据类型:</strong></p><ul><li><p><strong><code>int</code>：整型（Integer）</strong></p><ul><li>用于存储整数（没有小数部分的数字），例如：<code>-10</code>, <code>0</code>, <code>123</code>。</li><li>通常占用 <strong>4 个字节</strong>（32位），可以存储的范围通常为 -2<sup>31</sup> 到 2<sup>31</sup>-1。</li><li><strong>注意：</strong> 实际大小可能因编译器和操作系统而异，可以使用 <code>sizeof(int)</code> 查看。</li></ul></li><li><p><strong><code>char</code>：字符型（Character）</strong></p><ul><li>用于存储单个字符，例如：<code>&#39;a&#39;</code>, <code>&#39;B&#39;</code>, <code>&#39;1&#39;</code>, <code>&#39;$&#39;</code>.</li><li>通常占用 <strong>1 个字节</strong>（8位），可以存储 ASCII 码表中的字符。</li></ul></li><li><p><strong><code>float</code>：单精度浮点型（Floating-point）</strong></p><ul><li>用于存储带有小数部分的数值，精度有限。例如：<code>3.14</code>, <code>-0.5</code>, <code>2.0f</code> (注意 <code>f</code> 后缀)。</li><li>通常占用 <strong>4 个字节</strong>，提供约 7 位有效数字的精度。</li></ul></li><li><p><strong><code>bool</code>：布尔类型（Boolean）</strong></p><ul><li>用于存储逻辑值，只有两个可能的值：<code>true</code>（真）或 <code>false</code>（假）。</li><li>通常占用 <strong>1 个字节</strong>，但实际存储可能只用一个比特位。</li></ul></li><li><p><strong><code>void</code>：空类型</strong></p><ul><li>表示没有值。</li><li>主要用于以下两种情况： <ul><li><strong>函数返回值：</strong> 如果函数不返回任何值，则将其返回类型声明为 <code>void</code>。</li><li><strong>函数参数：</strong> 如果函数不接受任何参数，则参数列表可以写为 <code>void</code> 或空着。</li></ul></li></ul></li></ul><p><strong>2.算术运算符:</strong></p><ul><li><p><code>+</code> <strong>加法</strong>：将两个操作数相加。</p></li><li><p><code>-</code> <strong>减法</strong>：将第二个操作数从第一个操作数中减去。</p></li><li><p><code>*</code> <strong>乘法</strong>：将两个操作数相乘。</p></li><li><p><code>/</code> <strong>除法</strong>：将第一个操作数除以第二个操作数。</p></li><li><p><code>%</code> <strong>取余（模）</strong>：返回两个整数相除后的余数。</p></li><li><p><code>sizeof()</code> <strong>大小运算符</strong>：用于获取数据类型或变量所占用的内存大小（以字节为单位）。</p></li><li><p><strong>整数除法的重要特性:</strong></p><ul><li><strong>截断行为：</strong> 当两个整数进行除法运算时，结果会被<strong>截断</strong>为整数部分，小数部分会被直接舍弃，不会进行四舍五入。</li><li><strong>示例：</strong> <code>7 / 3</code> 的结果是 <code>2</code>，而不是 <code>2.333...</code>。</li></ul></li><li><p><strong>取余运算的应用:</strong></p><ul><li><strong>判断整除性：</strong> 如果 <code>a % b</code> 的结果为 <code>0</code>，则表示 <code>a</code> 可以被 <code>b</code> 整除。</li><li><strong>获取个位数字：</strong> <code>n % 10</code> 可以获取整数 <code>n</code> 的个位数字。</li><li><strong>循环处理：</strong> 常用于循环中，例如限制索引在一定范围内。</li></ul></li></ul><p><strong>3. 其他基本数据类型 (大小和范围可能因系统和编译器而异):</strong></p><ul><li><p><strong><code>short int</code> (简写为 <code>short</code>)：短整型</strong></p><ul><li>通常占用 <strong>2 个字节</strong>，存储范围比 <code>int</code> 小，但可以节省内存。</li></ul></li><li><p><strong><code>long int</code> (简写为 <code>long</code>)：长整型</strong></p><ul><li>通常占用 <strong>4 或 8 个字节</strong>，存储范围比 <code>int</code> 大。在现代 64 位系统中，通常为 8 字节。</li></ul></li><li><p><strong><code>long long int</code> (简写为 <code>long long</code>)：更长的整型</strong></p><ul><li>通常占用 <strong>8 个字节</strong>，提供更大的整数存储范围。</li></ul></li><li><p><strong>浮点型 (精度和范围不同):</strong></p><ul><li><p><strong><code>double</code>：双精度浮点型</strong></p><ul><li>精度比 <code>float</code> 更高，可以存储更多位的小数。</li><li>通常占用 <strong>8 个字节</strong>，提供约 15 位有效数字的精度。<strong>推荐在需要较高精度的浮点数计算中使用。</strong></li></ul></li><li><p><strong><code>long double</code>：扩展精度浮点型</strong></p><ul><li>提供比 <code>double</code> 更高的精度，但具体大小和精度取决于编译器和平台。</li><li>通常占用 <strong>10 或 16 个字节</strong>。</li></ul></li></ul></li><li><p><strong>无符号类型（Unsigned）:</strong></p><ul><li>在整数类型（如 <code>int</code>, <code>short</code>, <code>long</code>, <code>long long</code>, <code>char</code>）前加 <code>unsigned</code> 关键字，表示该类型<strong>不存储符号位</strong>，只能存储非负数（零和正数）。</li><li><strong>优点：</strong> 可以扩展正数的表示范围。例如，<code>unsigned int</code> 的正数范围是 <code>int</code> 的两倍。</li><li><strong>缺点：</strong> 不能存储负数。</li><li><strong>示例：</strong> <code>unsigned int</code>, <code>unsigned short</code>, <code>unsigned long long</code>, <code>unsigned char</code>。</li></ul></li></ul><p><strong>代码示例分析:</strong></p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;iostream&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 声明变量并赋值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> initial </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;J&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.75</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isStudent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 打印变量值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Age: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Initial: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> initial </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Height: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Is student? &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isStudent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 算术运算</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> difference </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> quotient </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> remainder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Sum: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Difference: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> difference </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Product: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Quotient: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> quotient </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出 3，因为是整数除法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Remainder: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> remainder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 使用 sizeof 运算符</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Size of age: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; bytes&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Size of float: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; bytes&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>代码示例解释:</strong></p><ul><li><p><strong>变量声明和初始化：</strong></p><ul><li><code>int age = 25;</code>：声明一个整型变量 <code>age</code> 并赋值为 <code>25</code>。</li><li><code>char initial = &#39;J&#39;;</code>：声明一个字符型变量 <code>initial</code> 并赋值为字符 <code>&#39;J&#39;</code>。</li><li><code>float height = 1.75;</code>：声明一个单精度浮点型变量 <code>height</code> 并赋值为 <code>1.75</code>。</li><li><code>bool isStudent = true;</code>：声明一个布尔类型变量 <code>isStudent</code> 并赋值为 <code>true</code>。</li></ul></li><li><p><strong>使用 <code>cout</code> 打印变量的值：</strong></p><ul><li><code>cout &lt;&lt; &quot;Age: &quot; &lt;&lt; age &lt;&lt; endl;</code>：使用 <code>cout</code> 将字符串和变量 <code>age</code> 的值输出到控制台。</li></ul></li><li><p><strong>算术运算示例：</strong></p><ul><li>演示了加、减、乘、除和取余运算。</li><li>特别注意 <code>quotient</code> 的结果，展示了整数除法的截断行为。</li></ul></li><li><p><strong>使用 <code>sizeof</code> 运算符：</strong></p><ul><li><code>cout &lt;&lt; &quot;Size of age: &quot; &lt;&lt; sizeof(age) &lt;&lt; &quot; bytes&quot; &lt;&lt; endl;</code>：使用 <code>sizeof</code> 运算符获取变量 <code>age</code> 所占用的内存大小，并输出到控制台。这可以帮助我们验证不同数据类型的大小。</li></ul></li></ul><p><strong>总结：</strong></p><p>理解 C++ 的基本数据类型及其特性是编写有效和高效 C++ 代码的关键。选择合适的数据类型可以帮助我们节省内存，提高程序的性能，并避免潜在的错误。在后续的课程中，我们将学习更多关于如何使用这些数据类型进行更复杂的操作。</p><h3 id="作业" tabindex="-1">作业: <a class="header-anchor" href="#作业" aria-label="Permalink to &quot;作业:&quot;">​</a></h3><ol><li><p><strong>温度转换器</strong></p><p>编写一个 C++ 程序，实现华氏温度到摄氏温度的转换。</p><ul><li>程序开始时，提示用户输入一个华氏温度值（可以使用 <code>int</code> 或 <code>double</code> 类型存储）。</li><li>使用以下公式将华氏温度转换为摄氏温度： <code>摄氏温度 = (华氏温度 - 32) * 5 / 9</code></li><li>将计算得到的摄氏温度值输出到控制台，并注明单位（摄氏度）。</li><li><strong>扩展练习（可选）：</strong> 让程序也能实现摄氏温度到华氏温度的转换。用户可以选择进行哪种转换。</li></ul><p><strong>示例输出：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>请输入华氏温度：68</span></span>
<span class="line"><span>对应的摄氏温度为：20 摄氏度</span></span>
<span class="line"><span></span></span>
<span class="line"><span>或者 (扩展练习)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>请选择转换类型 (1. 华氏转摄氏, 2. 摄氏转华氏)：1</span></span>
<span class="line"><span>请输入华氏温度：68</span></span>
<span class="line"><span>对应的摄氏温度为：20 摄氏度</span></span></code></pre></div></li></ol><p>参考实现如下：</p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;iomanip&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 用于设置输出精度</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> choice;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> temperature, convertedTemperature;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 提示用户选择转换类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;请选择转换类型 (1. 华氏转摄氏, 2. 摄氏转华氏)：&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> choice;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (choice </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 华氏转摄氏</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;请输入华氏温度：&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> temperature;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        convertedTemperature </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (temperature </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;对应的摄氏温度为：&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fixed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setprecision</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> convertedTemperature </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; 摄氏度&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (choice </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 摄氏转华氏</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;请输入摄氏温度：&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> temperature;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        convertedTemperature </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (temperature </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;对应的华氏温度为：&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fixed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setprecision</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> convertedTemperature </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; 华氏度&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;无效的选择，请重新运行程序。&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,51)]))}const E=i(t,[["render",h]]);export{g as __pageData,E as default};
