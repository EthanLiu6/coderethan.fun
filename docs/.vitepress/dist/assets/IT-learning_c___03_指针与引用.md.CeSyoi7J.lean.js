import{_ as i,c as a,o as t,a2 as n}from"./chunks/framework.DA-Pb-tg.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"IT-learning/c++/03_指针与引用.md","filePath":"IT-learning/c++/03_指针与引用.md","lastUpdated":null}'),l={name:"IT-learning/c++/03_指针与引用.md"};function h(p,s,k,e,d,o){return t(),a("div",null,s[0]||(s[0]=[n(`<h2 id="c-教学课件-第三次课" tabindex="-1">C++ 教学课件 - 第三次课 <a class="header-anchor" href="#c-教学课件-第三次课" aria-label="Permalink to &quot;C++ 教学课件 - 第三次课&quot;">​</a></h2><h3 id="c-第三节课-深入理解内存与地址——指针与引用" tabindex="-1">C++ 第三节课：深入理解内存与地址——指针与引用 <a class="header-anchor" href="#c-第三节课-深入理解内存与地址——指针与引用" aria-label="Permalink to &quot;C++ 第三节课：深入理解内存与地址——指针与引用&quot;">​</a></h3><p>大家好，欢迎来到我们的第三节 C++ 课程！在前两节课中，我们学习了 C++ 的基本数据类型、运算符等基础知识。今天，我们将深入探索 C++ 中一个非常重要且强大的概念：指针和引用。理解了它们，你才能真正掌握 C++ 的精髓，并为后续学习动态内存管理、数据结构等高级主题打下坚实的基础。</p><h3 id="一、指针-pointer" tabindex="-1">一、指针 (Pointer) <a class="header-anchor" href="#一、指针-pointer" aria-label="Permalink to &quot;一、指针 (Pointer)&quot;">​</a></h3><p>指针是 C++ 中最强大的特性之一，但也常常让新手感到困惑。 别担心，我们会一步步地理解它。</p><p><strong>1. 指针的概念：内存地址的艺术</strong></p><p><strong>对于高手：</strong> 指针是驾驭内存的灵活缰绳，能够实现直接的内存操作，构建复杂的数据结构，并优化程序性能。</p><p><strong>对于新手：</strong> 指针就像一把双刃剑，强大但稍有不慎就会割伤自己。理解指针需要时间和实践，但它是成为 C++ 高手的必经之路。错误使用指针可能导致程序崩溃或产生不可预测的行为，所以务必谨慎。</p><p><strong>C# 的权衡：</strong> C# 作为 C++ 的“近亲”，为了提高开发效率和安全性，牺牲了部分底层控制权，限制了指针的使用。这降低了学习门槛，但也限制了某些高级操作的可能性。理解 C++ 的指针，能帮助你更好地理解其他语言的内存管理机制。</p><p><strong>🤔 思考：</strong> 想象你的电脑内存是一栋栋排列整齐的房子，每个房子都有一个唯一的地址。变量就像住在这房子里的人，而指针就像记录着某个房子地址的纸条。</p><p><strong>2. 指针的基本操作：寻址和取值</strong></p><ul><li><p><strong><code>&amp;</code> (取址运算符 - Address-of Operator):</strong> 就像获取一个人的家庭住址。它返回变量在内存中的起始位置。</p><ul><li><strong>例如：</strong><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pa </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // pa 存储了变量 a 的内存地址</span></span></code></pre></div><code>&amp;a</code> 运算的结果就是变量 <code>a</code> 在内存中的地址。</li></ul></li><li><p><strong>内存地址的表示：</strong> 内存地址通常以十六进制形式显示，例如 <code>0x7ffee3a1b9dc</code>。这只是一个编号，不必深究其具体数值。</p></li><li><p><strong><code>*</code> (声明指针变量 - Declaration):</strong> 在声明变量时，<code>*</code> 表明你声明的是一个<strong>指针变量</strong>，它用来存储内存地址。</p><ul><li><strong>例如：</strong> <code>int *pa;</code> 声明了一个名为 <code>pa</code> 的指针变量，它可以存储一个 <code>int</code> 类型变量的内存地址。 <strong>注意：</strong> 这里的 <code>*</code> 仅仅是类型声明的一部分，表示 <code>pa</code> 是一个指向 <code>int</code> 的指针。</li></ul></li><li><p><strong><code>*</code> (解引用运算符 - Dereference Operator):</strong> 就像拿着地址纸条找到对应的房子，然后看看里面住着谁。它访问指针所指向的内存地址中的值。</p><ul><li><strong>例如：</strong><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pa </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pa </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出 10，即 pa 指向的内存地址中存储的值</span></span></code></pre></div><code>*pa</code> 运算的结果就是指针 <code>pa</code> 所指向的内存地址中存储的值，也就是变量 <code>a</code> 的值。</li></ul></li><li><p><strong>指针的大小：</strong> 指针变量本身也需要内存来存储地址。这个大小取决于你的计算机系统架构。</p><ul><li><strong>32 位系统：</strong> 指针的大小通常是 4 个字节（足以表示 2<sup>32</sup> 个不同的地址）。</li><li><strong>64 位系统：</strong> 指针的大小通常是 8 个字节（足以表示 2<sup>64</sup> 个不同的地址）。</li><li>你可以使用 <code>sizeof(指针变量)</code> 来查看指针的大小。</li></ul></li></ul><p><strong>✍️ 练习：</strong> 写一段代码，声明一个 <code>float</code> 类型的变量 <code>f</code> 并赋值，然后声明一个指向 <code>float</code> 的指针 <code>pf</code>，将 <code>f</code> 的地址赋给 <code>pf</code>，并打印出 <code>pf</code> 的值（内存地址）和 <code>*pf</code> 的值（<code>f</code> 的值）。</p><p><strong>3. 指针的初始化和空指针：避免野指针</strong></p><ul><li><strong>未初始化的风险：</strong> 就像拿到一个没有写任何地址的纸条，你不知道它指向哪里。未初始化的指针可能包含随机的内存地址，对其进行解引用操作会导致程序崩溃或未定义的行为，这种指针被称为<strong>野指针 (Wild Pointer)</strong>。</li><li><strong><code>nullptr</code> 的意义：</strong> <code>nullptr</code> 是 C++11 引入的空指针常量，表示指针不指向任何有效的内存地址。将指针初始化为 <code>nullptr</code> 是一种良好的编程习惯。 <ul><li><strong>例如：</strong> <code>int *pp = nullptr;</code> 明确地表示指针 <code>pp</code> 当前没有指向任何有效的 <code>int</code> 型变量。</li></ul></li><li><strong>检查空指针：</strong> 在使用指针之前，尤其是来自函数返回值或动态分配的内存时，最好检查指针是否为 <code>nullptr</code>，以避免访问无效内存。<div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ptr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_some_pointer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 假设 get_some_pointer 可能返回 nullptr</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ptr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 指针有效，可以安全使用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ptr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 指针为空，处理错误情况</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;指针为空！&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><p><strong>4. 多级指针：指向指针的指针</strong></p><ul><li><strong>概念：</strong> 指针本身也是变量，它也有自己的内存地址。因此，我们可以用另一个指针来存储一个指针变量的地址，这就是二级指针。同理，可以有三级、四级甚至更多级的指针。</li><li><strong>二级指针：</strong> 指向指针的指针。 <ul><li><strong>例如：</strong><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // pp 指向 a 的地址</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> **</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pp2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pp;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // pp2 指向 pp 的地址</span></span></code></pre></div><code>pp2</code> 存储的是指针 <code>pp</code> 的内存地址。</li></ul></li><li><strong>三级指针：</strong> 指向二级指针的指针。 <ul><li><strong>例如：</strong> <code>int ***pp3 = &amp;pp2;</code></li></ul></li><li><strong>应用场景：</strong> 多级指针主要用于更复杂的数据结构（如图、树等）和一些高级编程技巧中，对于初学者来说，理解二级指针就足够了。</li></ul><p><strong>5. <code>void</code> 指针：通用的指针</strong></p><ul><li><strong>可以指向任何类型：</strong> <code>void *</code> 是一种特殊的指针类型，它可以指向任何类型的变量的内存地址。 <ul><li><strong>例如：</strong><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.14</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // void 指针可以指向 int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // void 指针也可以指向 float</span></span></code></pre></div></li></ul></li><li><strong>不能直接解引用：</strong> 由于 <code>void</code> 指针不知道它指向的数据类型，因此不能直接使用 <code>*</code> 解引用。需要先将其强制转换为具体的指针类型才能访问其指向的值。 <ul><li><strong>例如：</strong><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ip </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static_cast&lt;int*&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vp);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 强制转换为 int*</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ip </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 现在可以解引用了</span></span></code></pre></div></li></ul></li><li><strong><code>void</code> 作为函数返回类型：</strong> 表示函数不返回任何值。这与 <code>void</code> 指针是不同的概念。</li></ul><h3 id="二、引用-reference" tabindex="-1">二、引用 (Reference) <a class="header-anchor" href="#二、引用-reference" aria-label="Permalink to &quot;二、引用 (Reference)&quot;">​</a></h3><p>引用是 C++ 中另一个重要的概念，它提供了一种更安全、更方便的方式来间接操作变量。</p><p><strong>1. 引用的概念：变量的别名</strong></p><ul><li><strong>别名：</strong> 引用就像是给变量取了一个“绰号”或者“外号”。它并非新的变量，而是现有变量的另一个名字，它们指向相同的内存地址。</li><li><strong>声明引用：</strong> 使用 <code>&amp;</code> 符号声明引用类型。 <ul><li><strong>例如：</strong><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ra </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ra 是 a 的引用</span></span></code></pre></div><code>ra</code> 现在是变量 <code>a</code> 的一个别名，对 <code>ra</code> 的任何操作都会直接影响到 <code>a</code>。</li></ul></li><li><strong>引用的权限：</strong> 引用不能扩大被引用变量的访问权限。 例如，你不能创建一个指向 <code>const int</code> 变量的非常量引用。</li></ul><p><strong>2. 引用的特点：一旦绑定，终生不变</strong></p><ul><li><strong>必须初始化：</strong> 引用在声明时<strong>必须立即</strong>被初始化，并且一旦初始化，就永远绑定到最初引用的变量，不能再指向其他变量。这保证了引用的有效性。</li><li><strong>不可重新赋值指向：</strong> 引用一旦初始化，其指向的内存地址就不可改变。赋值操作会改变引用所指向变量的值，而不是改变引用的指向。<div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ra </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ra 引用 a</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ra </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 相当于 a = b;  ra 仍然引用 a，只是 a 的值变成了 20</span></span></code></pre></div></li><li><strong>C 语言没有引用：</strong> 引用是 C++ 特有的特性，C 语言中只有指针。</li></ul><p><strong>3. 指针和引用的区别：选择合适的工具</strong></p><table tabindex="0"><thead><tr><th>特性</th><th>指针</th><th>引用</th></tr></thead><tbody><tr><td>定义</td><td>是一种变量，存储的是内存地址。拥有自己的内存空间。</td><td>是一个已存在变量的别名，不占用额外的内存空间。</td></tr><tr><td>初始化</td><td>可以不初始化，可以在任何时候指向不同的变量（修改存储的地址）。</td><td><strong>必须在声明时初始化</strong>，并且一旦初始化，就不能再指向其他变量。</td></tr><tr><td>空值</td><td>可以为空指针 (<code>nullptr</code>)，表示不指向任何有效的内存地址。</td><td><strong>不存在空引用</strong>。引用在声明时必须绑定到一个有效的对象。</td></tr><tr><td>语法</td><td>使用 <code>*</code> 解引用来访问指向的值，使用 <code>&amp;</code> 取地址。</td><td>直接使用引用名，就像使用原变量一样。</td></tr><tr><td>效率</td><td>间接访问，需要通过地址来找到值，效率略低于直接访问。</td><td>本质上是被引用变量的另一个名字，编译器通常会将其优化为直接访问，效率更高。</td></tr><tr><td>应用场景</td><td>动态内存分配、函数参数传递（需要修改实参）、实现链表等数据结构。</td><td>函数参数传递（避免拷贝，直接操作实参）、提高代码可读性、作为函数返回值。</td></tr><tr><td>本质</td><td>存储内存地址的变量。</td><td>变量的别名，是对内存地址的封装。</td></tr></tbody></table><p><strong>💡 记忆技巧：</strong> 可以把引用想象成一个人的“外号”，一旦有了这个外号，你就不能再把它给其他人了。而指针就像一个房子的地址，你可以修改地址指向的房子。</p><h3 id="三、变量与常量-variables-and-constants" tabindex="-1">三、变量与常量 (Variables and Constants) <a class="header-anchor" href="#三、变量与常量-variables-and-constants" aria-label="Permalink to &quot;三、变量与常量 (Variables and Constants)&quot;">​</a></h3><p>在讨论指针和引用时，理解变量和常量的概念至关重要。</p><p><strong>1. 变量 (Variable)</strong></p><ul><li><strong>可变性：</strong> 变量的值在程序运行过程中可以被修改和读取。</li><li><strong>声明：</strong> 例如 <code>int age = 20;</code></li></ul><p><strong>2. 常量 (Constant)</strong></p><ul><li><strong>不可变性：</strong> 常量的值在声明后不能被修改。</li><li><strong>声明：</strong> 使用关键字 <code>const</code> 声明常量。 <ul><li><strong>例如：</strong> <code>const int MAX_VALUE = 100;</code></li></ul></li><li><strong>作用：</strong> 常量用于表示程序中不应该被改变的值，提高代码的可读性和安全性。</li></ul><h3 id="四、常量指针和指针常量-const-pointers-and-pointer-constants" tabindex="-1">四、常量指针和指针常量 (Const Pointers and Pointer Constants) <a class="header-anchor" href="#四、常量指针和指针常量-const-pointers-and-pointer-constants" aria-label="Permalink to &quot;四、常量指针和指针常量 (Const Pointers and Pointer Constants)&quot;">​</a></h3><p>这是初学者常常混淆的一个概念，让我们仔细区分。</p><p><strong>1. 常量指针 (Pointer to const)</strong></p><ul><li><strong>定义：</strong> 指针指向的内存地址中的值是常量，不能通过该指针修改指向的值，但指针本身可以指向其他地址。</li><li><strong>声明：</strong> <code>const 数据类型 * 指针变量名;</code><ul><li><strong>例如：</strong><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pa1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // pa1 是一个指向常量整数的指针</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// *pa1 = 30;  // 错误！不能通过 pa1 修改 a 的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pa1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 正确！pa1 可以指向其他地址</span></span></code></pre></div></li></ul></li><li><strong>理解：</strong> <code>const</code> 修饰的是 <code>*pa1</code>，即指针指向的内容。</li></ul><p><strong>2. 指针常量 (Const Pointer)</strong></p><ul><li><strong>定义：</strong> 指针本身是一个常量，一旦初始化后，它所指向的地址不能改变，但可以通过该指针修改指向的内存地址处的值。</li><li><strong>声明：</strong> <code>数据类型 * const 指针变量名;</code><ul><li><strong>例如：</strong><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pa2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // pa2 是一个指向整数的常量指针</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pa2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 正确！可以通过 pa2 修改 a 的值</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// pa2 = &amp;b;      // 错误！pa2 不能指向其他地址</span></span></code></pre></div></li></ul></li><li><strong>理解：</strong> <code>const</code> 修饰的是 <code>pa2</code>，即指针本身。</li></ul><p><strong>3. 指向常量的指针常量 (Const Pointer to const)</strong></p><ul><li><strong>定义：</strong> 指针本身是常量，并且它指向的内存地址中的值也是常量，两者都不能被修改。</li><li><strong>声明：</strong> \`const 数据类型 * const 指const int * const pa3 = &amp;a; // pa3 是一个指向常量整数的常量指针 // *pa3 = 30; // 错误！不能通过 pa3 修改 a 的值 // pa3 = &amp;b; // 错误！pa3 不能指向其他地址 \`\`\`</li><li><strong>理解：</strong> 两个 <code>const</code> 各司其职，第一个 <code>const</code> 修饰 <code>*pa3</code>，表示不能通过 <code>pa3</code> 修改指向的值；第二个 <code>const</code> 修饰 <code>pa3</code>，表示 <code>pa3</code> 的指向不能修改。</li></ul><p><strong>🤔 记忆技巧：</strong> 从右向左读有助于理解。</p><ul><li><code>const int * pa</code>: <code>pa</code> 是一个指针，指向 <code>const int</code> (常量整数)。</li><li><code>int * const pa</code>: <code>pa</code> 是一个 <code>const</code> 指针，指向 <code>int</code> (整数)。</li><li><code>const int * const pa</code>: <code>pa</code> 是一个 <code>const</code> 指针，指向 <code>const int</code> (常量整数)。</li></ul><h3 id="五、auto-自动类型推断-automatic-type-deduction" tabindex="-1">五、<code>auto</code> 自动类型推断 (Automatic Type Deduction) <a class="header-anchor" href="#五、auto-自动类型推断-automatic-type-deduction" aria-label="Permalink to &quot;五、\`auto\` 自动类型推断 (Automatic Type Deduction)&quot;">​</a></h3><p><code>auto</code> 关键字是 C++11 引入的非常方便的特性，可以简化代码并提高可读性。</p><ul><li><strong>编译器自动推断：</strong> <code>auto</code> 允许编译器根据变量的初始化值自动推断变量的类型，而无需显式指定。 <ul><li><strong>例如：</strong><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // x 被推断为 int</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.14</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // y 被推断为 double</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // z 被推断为 const char*</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::vector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;int&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myVector </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myVector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // it 被推断为 std::vector&lt;int&gt;::iterator</span></span></code></pre></div></li></ul></li><li><strong>适用场景：</strong><ul><li><strong>类型名过长或复杂：</strong> 例如在使用标准库容器时，迭代器的类型通常很长，使用 <code>auto</code> 可以简化声明。</li><li><strong>类型不明确：</strong> 某些情况下，表达式的返回类型可能比较复杂或不直观，使用 <code>auto</code> 可以让代码更简洁。</li></ul></li><li><strong>提高代码可读性：</strong> 在某些情况下，<code>auto</code> 可以让代码更专注于变量的含义，而不是具体的类型。</li><li><strong>注意事项：</strong><ul><li><code>auto</code> 必须初始化：编译器需要根据初始值来推断类型。</li><li><code>auto</code> 的推断结果是明确的，不是简单的“万能类型”。</li><li>过度使用 <code>auto</code> 可能会降低代码的可读性，尤其是在不清楚变量类型的情况下。应该在提高代码可读性和维护性之间找到平衡。</li></ul></li></ul><h3 id="六、常用转义字符-escape-sequences" tabindex="-1">六、常用转义字符 (Escape Sequences) <a class="header-anchor" href="#六、常用转义字符-escape-sequences" aria-label="Permalink to &quot;六、常用转义字符 (Escape Sequences)&quot;">​</a></h3><p>转义字符用于在字符串中表示一些特殊的字符，这些字符不能直接输入或具有特殊的含义。</p><ul><li><code>\\n</code>: 换行符 (Newline) - 将光标移动到下一行开头。</li><li><code>\\t</code>: 水平制表符 (Horizontal Tab) - 将光标移动到下一个制表位。</li><li><code>\\&#39;</code>: 单引号 (Single Quote) - 用于在单引号包围的字符常量中表示单引号自身，例如 <code>&#39;\\&#39;&#39;</code>。</li><li><code>\\&quot;</code>: 双引号 (Double Quote) - 用于在双引号包围的字符串字面量中表示双引号自身，例如 <code>&quot;abc\\&quot;def&quot;</code>。</li><li><code>\\\\</code>: 反斜杠 (Backslash) - 用于表示反斜杠自身，例如 <code>&quot;C:\\\\Windows&quot;</code>。</li><li><code>\\?</code>: 问号 (Question Mark) - 用于避免某些编译器将 <code>??</code> 解释为三字符序列。</li><li><code>\\0</code>: 空字符 (Null Character) - 表示字符串的结尾，用于 C 风格的字符串。</li><li><code></code>: 空格 - 虽然不是转义字符，但空格在字符串中也是常用的字符。</li></ul><p><strong>示例：</strong></p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;iostream&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;第一行</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">第二行&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Name:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">John</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Age:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">30&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;单引号：</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">，双引号：</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">，反斜杠：</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>作业是写一个文本文件，将之前你理解的关键的概念加入总结：</p><ol><li>指针是什么？和引用是什么？指针和引用之间的区别是什么？</li></ol>`,54)]))}const c=i(l,[["render",h]]);export{g as __pageData,c as default};
