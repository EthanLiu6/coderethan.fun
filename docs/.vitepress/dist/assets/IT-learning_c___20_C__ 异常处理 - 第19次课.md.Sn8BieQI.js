import{_ as i,c as a,o as n,a2 as l}from"./chunks/framework.DA-Pb-tg.js";const g=JSON.parse('{"title":"C++ 异常处理 - 第19次课","description":"","frontmatter":{},"headers":[],"relativePath":"IT-learning/c++/20_C++ 异常处理 - 第19次课.md","filePath":"IT-learning/c++/20_C++ 异常处理 - 第19次课.md","lastUpdated":1742639200000}'),t={name:"IT-learning/c++/20_C++ 异常处理 - 第19次课.md"};function h(k,s,p,e,r,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="c-异常处理-第19次课" tabindex="-1">C++ 异常处理 - 第19次课 <a class="header-anchor" href="#c-异常处理-第19次课" aria-label="Permalink to &quot;C++ 异常处理 - 第19次课&quot;">​</a></h1><h2 id="第一部分-引言-为什么需要异常处理" tabindex="-1"><strong>第一部分: 引言 - 为什么需要异常处理？</strong> <a class="header-anchor" href="#第一部分-引言-为什么需要异常处理" aria-label="Permalink to &quot;**第一部分: 引言 - 为什么需要异常处理？**&quot;">​</a></h2><ul><li><p><strong>1.1 程序中的错误和异常</strong></p><ul><li>任何程序在运行时都可能遇到错误或意外情况，我们称之为<strong>异常 (Exception)</strong>。</li><li>这些异常可能是由程序逻辑错误引起的（如除零错误），也可能是由外部因素导致的（如文件不存在、内存不足）。</li><li>区别于编译时错误，异常发生在程序<strong>运行时</strong>。</li></ul></li><li><p><strong>1.2 传统的错误处理方式及其局限性</strong></p><ul><li><strong>返回值判断:</strong> 函数通过返回特定的值来表示错误状态。 <ul><li><strong>优点:</strong> 简单直观。</li><li><strong>缺点:</strong><ul><li>代码冗余：需要在每个可能出错的地方检查返回值。</li><li>容易忽略错误：程序员可能忘记检查返回值。</li><li>返回值歧义：返回值本身可能就是合法的结果，难以区分错误和正常结果。</li><li>函数调用链深时，错误信息难以向上层传递。</li></ul></li></ul></li></ul></li><li><p><strong>1.3 异常处理的优势</strong></p><ul><li><strong>分离错误处理代码和正常逻辑代码:</strong> 使代码结构更清晰，可读性更高。</li><li><strong>更灵活的错误处理机制:</strong> 可以跨越多个函数调用栈来传递和处理错误。</li><li><strong>提高程序健壮性:</strong> 防止程序因未处理的错误而崩溃。</li><li><strong>强制处理异常:</strong> 必须在某个地方捕获并处理抛出的异常，避免忽略错误。</li><li><strong>提供更丰富的错误信息:</strong> 异常对象可以携带关于错误的详细信息。</li></ul></li></ul><p><strong>代码示例 (传统的错误处理方式的局限性):</strong></p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;fstream&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> filename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::ifstream </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filename);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">is_open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 文件打开失败</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ... 读取文件内容 ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 成功</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> filename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filename) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cerr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Error: Failed to open file &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filename </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 这里可能还需要进行其他错误处理，例如通知用户</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ... 处理文件内容 ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;File processed successfully.&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  processFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;non_existent_file.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>思考:</strong> 在 <code>processFile</code> 函数中，如果 <code>readFile</code> 返回 -1，我们只简单地输出了错误信息。如果 <code>readFile</code> 在更深的调用栈中，错误信息可能丢失或处理不当。</p><h2 id="第二部分-c-异常处理机制详解" tabindex="-1"><strong>第二部分: C++ 异常处理机制详解</strong> <a class="header-anchor" href="#第二部分-c-异常处理机制详解" aria-label="Permalink to &quot;**第二部分: C++ 异常处理机制详解**&quot;">​</a></h2><ul><li><p><strong>2.1 try, catch, throw 关键字</strong></p><ul><li><strong><code>try</code> 块:</strong> 用于包含<strong>可能</strong>抛出异常的代码。程序会尝试执行 <code>try</code> 块中的代码。</li><li><strong><code>catch</code> 块:</strong> 用于<strong>捕获</strong>并处理特定类型的异常。一个 <code>try</code> 块可以跟随多个 <code>catch</code> 块，每个 <code>catch</code> 块处理不同类型的异常。</li><li><strong><code>throw</code> 关键字:</strong> 用于<strong>抛出</strong>一个异常对象，表示发生了某种错误。</li></ul></li><li><p><strong>2.2 异常类型</strong></p><ul><li><strong>内置异常类型:</strong> C++ 标准库提供了一组预定义的异常类，它们都继承自 <code>std::exception</code> 类。 <ul><li><code>std::runtime_error</code>: 运行时错误，例如逻辑错误、超出范围等。</li><li><code>std::logic_error</code>: 程序逻辑错误，例如违反前提条件。</li><li><code>std::bad_alloc</code>: 内存分配失败。</li><li><code>std::out_of_range</code>: 超出有效范围。</li><li><code>std::domain_error</code>: 数学函数定义域错误。</li><li>... 等等。</li></ul></li><li><strong>自定义异常类型:</strong> 可以通过继承 <code>std::exception</code> 类或其子类来创建自己的异常类型，以便更精确地表达程序中的错误。</li></ul></li><li><p><strong>2.3 异常处理流程 (栈展开 - Stack Unwinding)</strong></p><ol><li>当在 <code>try</code> 块中的代码抛出一个异常时，程序会立即停止执行 <code>try</code> 块中剩余的代码。</li><li>系统会沿着函数调用栈向上查找，寻找与抛出的异常类型<strong>匹配</strong>的 <code>catch</code> 块。</li><li><strong>匹配规则:</strong><ul><li><code>catch</code> 块参数的类型必须与抛出的异常类型相同，或者是抛出异常类型的基类。</li><li><code>catch(...)</code> 可以捕获任何类型的异常。</li></ul></li><li>如果找到匹配的 <code>catch</code> 块，则执行该 <code>catch</code> 块中的代码，异常被<strong>处理</strong>。</li><li>如果沿着调用栈一直找不到匹配的 <code>catch</code> 块，程序会调用 <code>std::terminate()</code> 函数并异常终止。这个过程称为<strong>栈展开 (Stack Unwinding)</strong>，在栈展开的过程中，局部对象的析构函数会被调用，以确保资源得到释放。</li></ol></li></ul><p><strong>代码示例 (使用异常处理机制):</strong></p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdexcept&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> divide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    throw</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runtime_error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Error: Division by zero!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 抛出异常对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> divide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 可能抛出异常</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Result: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 如果没有抛出异常，则执行这里</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::runtime_error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 捕获 std::runtime_error 类型的异常</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cerr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Caught an exception: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">what</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 使用 what() 方法获取异常信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (...) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 捕获其他所有类型的异常 (不推荐过度使用)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cerr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Caught an unknown exception!&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Program continues after exception handling.&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>思考:</strong> 当 <code>divide</code> 函数抛出异常时，<code>try</code> 块中的剩余代码被跳过，程序查找匹配的 <code>catch</code> 块。如果注释掉 <code>catch (const std::runtime_error&amp; e)</code>，程序会发生什么？</p><h2 id="第三部分-自定义异常类型" tabindex="-1"><strong>第三部分: 自定义异常类型</strong> <a class="header-anchor" href="#第三部分-自定义异常类型" aria-label="Permalink to &quot;**第三部分: 自定义异常类型**&quot;">​</a></h2><ul><li><p><strong>3.1 继承 <code>std::exception</code> 类</strong></p><ul><li>自定义异常类型通常通过公有继承 <code>std::exception</code> 类或其子类来实现。</li><li>这样做的好处是可以使用标准的异常处理框架，并且可以重写 <code>what()</code> 方法来提供自定义的错误信息。</li></ul></li><li><p><strong>3.2 重写 <code>what()</code> 函数</strong></p><ul><li><code>std::exception</code> 类提供了一个虚函数 <code>what()</code>，用于返回一个描述异常的 C 风格字符串。</li><li>在自定义异常类中，通常需要重写 <code>what()</code> 函数，以便返回更具体、更有意义的错误信息。</li></ul></li></ul><p><strong>代码示例 (自定义异常类型):</strong></p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;exception&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;string&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileOpenError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runtime_error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  FileOpenError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> filename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : std::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runtime_error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Failed to open file: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filename), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filename_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filename) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getFilename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filename_;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::string filename_;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::string filename </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;important_data.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 模拟文件打开失败的情况</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      throw</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileOpenError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filename);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ... 其他文件操作 ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FileOpenError</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cerr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;File error: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">what</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cerr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Filename: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getFilename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::runtime_error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cerr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Runtime error: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">what</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>思考:</strong> 自定义异常类型的好处是什么？在上面的代码中，我们如何获取导致异常的文件名？</p><h2 id="第四部分-异常处理的最佳实践" tabindex="-1"><strong>第四部分: 异常处理的最佳实践</strong> <a class="header-anchor" href="#第四部分-异常处理的最佳实践" aria-label="Permalink to &quot;**第四部分: 异常处理的最佳实践**&quot;">​</a></h2><ul><li><p><strong>4.1 仅在必要时使用异常</strong></p><ul><li>异常应该用于处理<strong>真正异常</strong>的情况，即程序无法正常继续执行的错误。</li><li>对于可以预见的错误，例如用户输入错误，可以考虑使用其他方式（如返回值、错误码）处理。</li></ul></li><li><p><strong>4.2 抛出和捕获特定类型的异常</strong></p><ul><li>尽量抛出和捕获具体类型的异常，而不是仅仅使用 <code>catch (...)</code>。</li><li>这样做可以提供更精确的错误处理，避免捕获不应该捕获的异常。</li></ul></li><li><p><strong>4.3 不要在析构函数中抛出异常</strong> 非常重要</p><ul><li>在栈展开的过程中，可能会有多个析构函数被调用。如果在析构函数中抛出异常且未被捕获，程序会调用 <code>std::terminate()</code> 终止。这可能会导致资源泄漏或其他问题。</li><li>如果析构函数中可能发生错误，应该在析构函数内部处理，例如记录错误日志。</li></ul></li><li><p><strong>4.4 使用 <code>noexcept</code> 声明不抛出异常的函数</strong></p><ul><li>使用 <code>noexcept</code> 关键字声明函数不会抛出异常。</li><li>这可以帮助编译器进行优化，并且在某些情况下可以提高代码的可靠性。</li><li>如果 <code>noexcept</code> 函数内部确实抛出了异常且未被捕获，程序会调用 <code>std::terminate()</code>。</li></ul></li><li><p><strong>4.5 在适当的层次捕获异常</strong></p><ul><li>在能够合理处理异常的地方捕获异常。</li><li>不要过早地捕获异常，导致上层调用者无法获得足够的错误信息。</li><li>也不要忽略异常，导致程序在未知的状态下继续运行。</li></ul></li><li><p><strong>4.6 提供清晰的异常信息</strong></p><ul><li>异常对象应该携带足够的错误信息，方便定位和解决问题。</li><li>在自定义异常类中，<code>what()</code> 方法应该返回清晰易懂的错误描述。</li></ul></li><li><p><strong>4.7 考虑资源管理（RAII）</strong></p><ul><li>结合 RAII (Resource Acquisition Is Initialization) 原则，可以使用智能指针等技术来自动管理资源，即使在发生异常的情况下也能确保资源被正确释放。</li></ul></li></ul><h2 id="第五部分-总结" tabindex="-1"><strong>第五部分: 总结</strong> <a class="header-anchor" href="#第五部分-总结" aria-label="Permalink to &quot;**第五部分: 总结**&quot;">​</a></h2><ul><li>C++ 的异常处理机制是一种强大的错误处理工具，可以提高程序的健壮性和可维护性。</li><li>掌握 <code>try</code>、<code>catch</code>、<code>throw</code> 关键字以及异常处理流程是使用异常处理的基础。</li><li>理解内置异常类型和自定义异常类型，并学会根据需要创建自定义异常。</li><li>遵循异常处理的最佳实践，编写更可靠、更易于维护的代码。</li></ul><h2 id="课后作业" tabindex="-1"><strong>课后作业:</strong> <a class="header-anchor" href="#课后作业" aria-label="Permalink to &quot;**课后作业:**&quot;">​</a></h2><p>编写一个程序，模拟银行账户操作，包括存款、取款等功能。使用异常处理机制来处理以下情况:</p><ul><li>取款金额超过余额.</li><li>存款金额为负数.</li></ul><p><strong>作业提示:</strong></p><ul><li>定义一个 <code>BankAccount</code> 类，包含 <code>balance</code> 成员变量.</li><li>定义 <code>deposit</code> 和 <code>withdraw</code> 成员函数，分别用于存款和取款.</li><li>在 <code>withdraw</code> 函数中，如果取款金额超过余额，则抛出一个自定义异常 <code>InsufficientFundsException</code>.</li><li>在 <code>deposit</code> 函数中，如果存款金额为负数，则抛出一个自定义异常 <code>InvalidDepositAmountException</code>.</li><li>在 <code>main</code> 函数中，使用 <code>try-catch</code> 块来处理这些异常.</li></ul>`,25)]))}const o=i(t,[["render",h]]);export{g as __pageData,o as default};
