import{_ as i,c as a,o as n,a2 as l}from"./chunks/framework.DA-Pb-tg.js";const o=JSON.parse('{"title":"C++28课：高性能部署之CMake工程管理","description":"","frontmatter":{},"headers":[],"relativePath":"IT-learning/c++/30_C++大型项目CMake工程管理.md","filePath":"IT-learning/c++/30_C++大型项目CMake工程管理.md","lastUpdated":null}'),t={name:"IT-learning/c++/30_C++大型项目CMake工程管理.md"};function e(h,s,p,k,d,r){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="c-28课-高性能部署之cmake工程管理" tabindex="-1">C++28课：高性能部署之CMake工程管理 <a class="header-anchor" href="#c-28课-高性能部署之cmake工程管理" aria-label="Permalink to &quot;C++28课：高性能部署之CMake工程管理&quot;">​</a></h1><h2 id="_1-什么是-cmake" tabindex="-1">1. 什么是 CMake？ <a class="header-anchor" href="#_1-什么是-cmake" aria-label="Permalink to &quot;1. 什么是 CMake？&quot;">​</a></h2><p>CMake 是一个跨平台的构建系统生成工具，它帮助我们管理编译过程，可以生成特定于编译器的项目文件（比如 Makefile、Visual Studio 的 Solution 文件等），从而简化编译、链接等过程。</p><h3 id="_1-1-为什么选择-cmake" tabindex="-1">1.1. 为什么选择 CMake？ <a class="header-anchor" href="#_1-1-为什么选择-cmake" aria-label="Permalink to &quot;1.1. 为什么选择 CMake？&quot;">​</a></h3><ul><li>跨平台支持</li><li>自动处理依赖关系</li><li>强大的脚本和配置语言</li><li>与现代 C++ 标准协作良好</li></ul><h2 id="_2-基本结构" tabindex="-1">2. 基本结构 <a class="header-anchor" href="#_2-基本结构" aria-label="Permalink to &quot;2. 基本结构&quot;">​</a></h2><p>CMake 使用 <code>CMakeLists.txt</code> 文件描述如何构建您的项目。</p><h3 id="_2-1-最简单的-cmakelists-txt-示例" tabindex="-1">2.1. 最简单的 CMakeLists.txt 示例 <a class="header-anchor" href="#_2-1-最简单的-cmakelists-txt-示例" aria-label="Permalink to &quot;2.1. 最简单的 CMakeLists.txt 示例&quot;">​</a></h3><p>创建一个名为 <code>hello_world</code> 的简单项目：</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">cmake_minimum_required</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VERSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 3.10)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 项目名称</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HelloWorld)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 指定要编译的源文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hello_world main.cpp)</span></span></code></pre></div><h3 id="_2-2-生成与构建" tabindex="-1">2.2. 生成与构建 <a class="header-anchor" href="#_2-2-生成与构建" aria-label="Permalink to &quot;2.2. 生成与构建&quot;">​</a></h3><h4 id="_2-2-1-linux-macos" tabindex="-1">2.2.1. Linux/ macOS <a class="header-anchor" href="#_2-2-1-linux-macos" aria-label="Permalink to &quot;2.2.1. Linux/ macOS&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span></span></code></pre></div><h4 id="_2-2-2-windows" tabindex="-1">2.2.2. Windows <a class="header-anchor" href="#_2-2-2-windows" aria-label="Permalink to &quot;2.2.2. Windows&quot;">​</a></h4><p>使用 Visual Studio：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -G</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Visual Studio 16 2019&quot;</span></span></code></pre></div><p>然后用 Visual Studio 打开生成的 <code>.sln</code> 文件。</p><h2 id="_3-cmake-基本命令详解" tabindex="-1">3. CMake 基本命令详解 <a class="header-anchor" href="#_3-cmake-基本命令详解" aria-label="Permalink to &quot;3. CMake 基本命令详解&quot;">​</a></h2><h3 id="_3-1-cmake-minimum-required" tabindex="-1">3.1. cmake_minimum_required <a class="header-anchor" href="#_3-1-cmake-minimum-required" aria-label="Permalink to &quot;3.1. cmake_minimum_required&quot;">​</a></h3><p>指定 CMake 的最低版本：</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">cmake_minimum_required</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VERSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 3.10)</span></span></code></pre></div><h3 id="_3-2-project" tabindex="-1">3.2. project <a class="header-anchor" href="#_3-2-project" aria-label="Permalink to &quot;3.2. project&quot;">​</a></h3><p>定义项目的名称和版本号：</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyProject </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VERSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 1.0)</span></span></code></pre></div><h3 id="_3-3-add-executable" tabindex="-1">3.3. add_executable <a class="header-anchor" href="#_3-3-add-executable" aria-label="Permalink to &quot;3.3. add_executable&quot;">​</a></h3><p>添加一个可执行文件，并指定其源文件：</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hello_world main.cpp)</span></span></code></pre></div><h3 id="_3-4-add-library" tabindex="-1">3.4. add_library <a class="header-anchor" href="#_3-4-add-library" aria-label="Permalink to &quot;3.4. add_library&quot;">​</a></h3><p>添加一个库文件，并指定其源文件：</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_library</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyLib STATIC mylib.cpp mylib.h)</span></span></code></pre></div><h3 id="_3-5-target-link-libraries" tabindex="-1">3.5. target_link_libraries <a class="header-anchor" href="#_3-5-target-link-libraries" aria-label="Permalink to &quot;3.5. target_link_libraries&quot;">​</a></h3><p>将库文件链接到可执行文件：</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_link_libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hello_world </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRIVATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyLib)</span></span></code></pre></div><h3 id="_3-6-include-directories" tabindex="-1">3.6. include_directories <a class="header-anchor" href="#_3-6-include-directories" aria-label="Permalink to &quot;3.6. include_directories&quot;">​</a></h3><p>指定包含目录：</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">include_directories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/include)</span></span></code></pre></div><h3 id="_3-7-find-package" tabindex="-1">3.7. find_package <a class="header-anchor" href="#_3-7-find-package" aria-label="Permalink to &quot;3.7. find_package&quot;">​</a></h3><p>查找其他库或包，举例如下：</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">find_package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Boost 1.60 REQUIRED)</span></span></code></pre></div><h2 id="_4-组织大型项目" tabindex="-1">4. 组织大型项目 <a class="header-anchor" href="#_4-组织大型项目" aria-label="Permalink to &quot;4. 组织大型项目&quot;">​</a></h2><h3 id="_4-1-子目录和子模块" tabindex="-1">4.1. 子目录和子模块 <a class="header-anchor" href="#_4-1-子目录和子模块" aria-label="Permalink to &quot;4.1. 子目录和子模块&quot;">​</a></h3><p>大型项目通常分为多个子模块，可以通过<code>add_subdirectory</code>命令进行管理。</p><h4 id="_4-1-1-主目录的-cmakelists-txt" tabindex="-1">4.1.1. 主目录的 CMakeLists.txt <a class="header-anchor" href="#_4-1-1-主目录的-cmakelists-txt" aria-label="Permalink to &quot;4.1.1. 主目录的 CMakeLists.txt&quot;">​</a></h4><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">cmake_minimum_required</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VERSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 3.10)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SuperProject)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_subdirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ModuleA)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_subdirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ModuleB)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_project main.cpp)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_link_libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_project </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRIVATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ModuleA ModuleB)</span></span></code></pre></div><h4 id="_4-1-2-子模块的-cmakelists-txt-例如-modulea" tabindex="-1">4.1.2. 子模块的 CMakeLists.txt (例如 ModuleA) <a class="header-anchor" href="#_4-1-2-子模块的-cmakelists-txt-例如-modulea" aria-label="Permalink to &quot;4.1.2. 子模块的 CMakeLists.txt (例如 ModuleA)&quot;">​</a></h4><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ModuleA/CMakeLists.txt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_library</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ModuleA STATIC moduleA.cpp moduleA.h)</span></span></code></pre></div><h3 id="_4-2-设置全局属性" tabindex="-1">4.2. 设置全局属性 <a class="header-anchor" href="#_4-2-设置全局属性" aria-label="Permalink to &quot;4.2. 设置全局属性&quot;">​</a></h3><p>您可以用 <code>set</code> 命令设置全局属性，比如设置全局的C++ 标准：</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CMAKE_CXX_STANDARD 17)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CMAKE_CXX_STANDARD_REQUIRED </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="_5-cmake-高级用法" tabindex="-1">5. CMake 高级用法 <a class="header-anchor" href="#_5-cmake-高级用法" aria-label="Permalink to &quot;5. CMake 高级用法&quot;">​</a></h2><h3 id="_5-1-定义编译选项" tabindex="-1">5.1. 定义编译选项 <a class="header-anchor" href="#_5-1-定义编译选项" aria-label="Permalink to &quot;5.1. 定义编译选项&quot;">​</a></h3><p>使用 <code>target_compile_options</code> 指定编译选项：</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_compile_options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyLib </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRIVATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -Wall -Werror)</span></span></code></pre></div><h3 id="_5-2-条件编译" tabindex="-1">5.2. 条件编译 <a class="header-anchor" href="#_5-2-条件编译" aria-label="Permalink to &quot;5.2. 条件编译&quot;">​</a></h3><p>通过 <code>if</code> 语句实现条件编译：</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">WIN32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    target_compile_definitions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyLib </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRIVATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WINDOWS)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">elseif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UNIX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    target_compile_definitions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyLib </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRIVATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LINUX)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">endif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h3 id="_5-3-测试支持" tabindex="-1">5.3. 测试支持 <a class="header-anchor" href="#_5-3-测试支持" aria-label="Permalink to &quot;5.3. 测试支持&quot;">​</a></h3><p>CMake支持集成测试，可以使用 <code>add_test</code> 添加测试：</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enable_testing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_tests </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.cpp)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NAME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyTest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COMMAND</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_tests)</span></span></code></pre></div><h3 id="_5-4-安装目标" tabindex="-1">5.4. 安装目标 <a class="header-anchor" href="#_5-4-安装目标" aria-label="Permalink to &quot;5.4. 安装目标&quot;">​</a></h3><p>指定安装规则：</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TARGETS hello_world DESTINATION bin)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(FILES </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${PROJECT_SOURCE_DIR}/config.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DESTINATION etc)</span></span></code></pre></div><p>使用以下命令进行安装：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><h2 id="_6-cmake-与第三方依赖管理" tabindex="-1">6. CMake 与第三方依赖管理 <a class="header-anchor" href="#_6-cmake-与第三方依赖管理" aria-label="Permalink to &quot;6. CMake 与第三方依赖管理&quot;">​</a></h2><h3 id="_6-1-使用-externalproject-add" tabindex="-1">6.1. 使用 ExternalProject_Add <a class="header-anchor" href="#_6-1-使用-externalproject-add" aria-label="Permalink to &quot;6.1. 使用 ExternalProject_Add&quot;">​</a></h3><p>用于管理外部项目的构建：</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExternalProject)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ExternalProject_Add(external_json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    GIT_REPOSITORY https://github.com/nlohmann/json.git</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    PREFIX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> \${CMAKE_BINARY_DIR}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/external/json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="_6-2-使用-fetchcontent" tabindex="-1">6.2. 使用 FetchContent <a class="header-anchor" href="#_6-2-使用-fetchcontent" aria-label="Permalink to &quot;6.2. 使用 FetchContent&quot;">​</a></h3><p>用于更方便地管理外部依赖：</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(FetchContent)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FetchContent_Declare(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  GIT_REPOSITORY https://github.com/nlohmann/json.git</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  GIT_TAG v3.9.1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FetchContent_MakeAvailable(json)</span></span></code></pre></div><h3 id="_6-3-使用-find-package" tabindex="-1">6.3. 使用 find_package <a class="header-anchor" href="#_6-3-使用-find-package" aria-label="Permalink to &quot;6.3. 使用 find_package&quot;">​</a></h3><p>依赖管理时最常见的方式：</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">find_package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Boost 1.60 REQUIRED COMPONENTS filesystem </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">system</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_link_libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_project </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRIVATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Boost::filesystem Boost::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">system</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="_7-cmake-与自定义命令" tabindex="-1">7. CMake 与自定义命令 <a class="header-anchor" href="#_7-cmake-与自定义命令" aria-label="Permalink to &quot;7. CMake 与自定义命令&quot;">​</a></h2><h3 id="_7-1-添加自定义命令" tabindex="-1">7.1. 添加自定义命令 <a class="header-anchor" href="#_7-1-添加自定义命令" aria-label="Permalink to &quot;7.1. 添加自定义命令&quot;">​</a></h3><p>通过 <code>add_custom_command</code> 添加原始命令：</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_custom_command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    OUTPUT output.txt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    COMMAND</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> \${CMAKE_COMMAND}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -E echo </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &gt; output.txt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    DEPENDS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input.txt</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="_7-2-自定义目标" tabindex="-1">7.2. 自定义目标 <a class="header-anchor" href="#_7-2-自定义目标" aria-label="Permalink to &quot;7.2. 自定义目标&quot;">​</a></h3><p>通过 <code>add_custom_target</code> 定义一个伪目标：</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_custom_target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyTarget ALL </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DEPENDS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> output.txt)</span></span></code></pre></div><h2 id="_8-生成与构建" tabindex="-1">8. 生成与构建 <a class="header-anchor" href="#_8-生成与构建" aria-label="Permalink to &quot;8. 生成与构建&quot;">​</a></h2><h3 id="_8-1-常见命令总结" tabindex="-1">8.1. 常见命令总结 <a class="header-anchor" href="#_8-1-常见命令总结" aria-label="Permalink to &quot;8.1. 常见命令总结&quot;">​</a></h3><ul><li>配置项目: <code>cmake ..</code></li><li>编译项目: <code>make</code> 或 <code>cmake --build .</code></li><li>运行测试: <code>ctest</code></li><li>安装项目: <code>cmake --install .</code></li></ul><h2 id="cmake-课后作业" tabindex="-1">CMake 课后作业 <a class="header-anchor" href="#cmake-课后作业" aria-label="Permalink to &quot;CMake 课后作业&quot;">​</a></h2><p><strong>目标:</strong></p><ul><li>熟悉 CMake 的基本使用方法</li><li>掌握使用 CMake 构建包含多个源文件和库的项目</li></ul><p><strong>任务:</strong></p><p>设计并实现一个简单的计算器程序，该程序包含以下功能：</p><ol><li><strong>加法:</strong> 两个整数相加。</li><li><strong>减法:</strong> 两个整数相减。</li><li><strong>乘法:</strong> 两个整数相乘。</li><li><strong>除法:</strong> 两个整数相除。</li></ol><p><strong>要求:</strong></p><ol><li>使用 CMake 构建项目。</li><li>将计算器的功能实现放在一个单独的库 (例如 <code>calculator_lib</code>) 中。</li><li>创建一个可执行文件 (例如 <code>calculator</code>)，调用 <code>calculator_lib</code> 中的功能实现计算器的功能。</li></ol><p><strong>示例代码结构:</strong></p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>calculator_project/</span></span>
<span class="line"><span>├── CMakeLists.txt</span></span>
<span class="line"><span>├── src/</span></span>
<span class="line"><span>│   ├── CMakeLists.txt</span></span>
<span class="line"><span>│   ├── calculator.cpp  # 可执行文件源代码</span></span>
<span class="line"><span>│   └── ...</span></span>
<span class="line"><span>├── lib/</span></span>
<span class="line"><span>│   ├── CMakeLists.txt</span></span>
<span class="line"><span>│   ├── calculator_lib.cpp  # 库源代码</span></span>
<span class="line"><span>│   └── ...</span></span></code></pre></div><h2 id="作业" tabindex="-1">作业： <a class="header-anchor" href="#作业" aria-label="Permalink to &quot;作业：&quot;">​</a></h2><h2 id="cmake-课后作业参考答案" tabindex="-1">CMake 课后作业参考答案 <a class="header-anchor" href="#cmake-课后作业参考答案" aria-label="Permalink to &quot;CMake 课后作业参考答案&quot;">​</a></h2><p>以下是 CMake 课后作业的参考答案，包含代码结构、CMakeLists.txt 文件、源代码和测试用例。</p><p><strong>代码结构:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>calculator_project/</span></span>
<span class="line"><span>├── CMakeLists.txt</span></span>
<span class="line"><span>├── src/</span></span>
<span class="line"><span>│   ├── CMakeLists.txt</span></span>
<span class="line"><span>│   └── calculator.cpp</span></span>
<span class="line"><span>├── lib/</span></span>
<span class="line"><span>│   ├── CMakeLists.txt</span></span>
<span class="line"><span>│   └── calculator_lib.cpp</span></span></code></pre></div><p><strong>CMakeLists.txt (根目录):</strong></p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">cmake_minimum_required</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VERSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 3.10)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CalculatorProject)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_subdirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lib)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_subdirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(src)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 可选: 添加安装规则</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># install(TARGETS calculator DESTINATION bin)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># install(TARGETS calculator_lib DESTINATION lib)</span></span></code></pre></div><p><strong>CMakeLists.txt (lib 目录):</strong></p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_library</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(calculator_lib calculator_lib.cpp)</span></span></code></pre></div><p><strong>CMakeLists.txt (src 目录):</strong></p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(calculator calculator.cpp)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_link_libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(calculator calculator_lib)</span></span></code></pre></div><p><strong>calculator_lib.cpp:</strong></p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;calculator_lib.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> subtract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> multiply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> divide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 处理除零错误</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>calculator_lib.h:</strong></p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifndef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CALCULATOR_LIB_H</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CALCULATOR_LIB_H</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> subtract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> multiply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> divide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // CALCULATOR_LIB_H</span></span></code></pre></div><p><strong>calculator.cpp:</strong></p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;calculator_lib.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a + b = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a - b = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> subtract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a * b = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> multiply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a / b = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> divide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>构建和运行:</strong></p><ol><li>创建 <code>build</code> 目录: <code>mkdir build</code></li><li>进入 <code>build</code> 目录: <code>cd build</code></li><li>运行 CMake: <code>cmake ..</code> -G &quot;Unix Makefiles&quot;</li><li>构建项目: make</li><li>运行可执行文件: <code>./src/calculator</code></li></ol>`,113)]))}const E=i(t,[["render",e]]);export{o as __pageData,E as default};
