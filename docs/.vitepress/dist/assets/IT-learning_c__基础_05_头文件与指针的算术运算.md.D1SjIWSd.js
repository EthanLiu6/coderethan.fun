import{_ as i,c as a,o as l,a2 as n}from"./chunks/framework.DA-Pb-tg.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"IT-learning/c++基础/05_头文件与指针的算术运算.md","filePath":"IT-learning/c++基础/05_头文件与指针的算术运算.md","lastUpdated":1742099647000}'),t={name:"IT-learning/c++基础/05_头文件与指针的算术运算.md"};function h(p,s,k,e,d,r){return l(),a("div",null,s[0]||(s[0]=[n(`<h2 id="c-第五课" tabindex="-1">C++ 第五课 <a class="header-anchor" href="#c-第五课" aria-label="Permalink to &quot;C++ 第五课&quot;">​</a></h2><h3 id="课程目标" tabindex="-1">课程目标 <a class="header-anchor" href="#课程目标" aria-label="Permalink to &quot;课程目标&quot;">​</a></h3><ul><li>理解头文件的作用、原理以及如何正确使用。</li><li>掌握 C++ 中赋值操作的多种形式和类型转换。</li><li>深入理解并熟练运用各类运算符。</li><li>掌握 <code>break</code> 和 <code>continue</code> 语句在控制流中的作用。</li><li>理解宏定义的原理和使用场景，并了解其局限性。</li><li>掌握指针的算术运算，理解其在内存操作中的意义。</li></ul><hr><h3 id="_0-头文件的原理与使用" tabindex="-1">0. 头文件的原理与使用 <a class="header-anchor" href="#_0-头文件的原理与使用" aria-label="Permalink to &quot;0. 头文件的原理与使用&quot;">​</a></h3><ul><li><p><strong>头文件是什么</strong>:</p><ul><li>头文件是以 <code>.h</code> 或 <code>.hpp</code> (推荐 C++) 结尾的文本文件。</li><li>主要包含函数声明、类声明、全局变量声明、宏定义、枚举和结构体声明等。</li><li>允许在多个源文件中共享声明，实现代码复用和模块化编程。</li></ul></li><li><p><strong>为什么要用头文件</strong>:</p><ul><li><strong>避免重复代码</strong>: 将函数和变量的声明放在头文件中，多个源文件只需包含该头文件即可使用，无需重复编写声明。</li><li><strong>提高代码可读性和可维护性</strong>: 将接口 (声明) 和实现分离，使得代码结构更清晰，修改接口时只需修改头文件。</li><li><strong>支持模块化编程</strong>: 将程序划分为多个模块，每个模块有自己的头文件，便于组织和管理大型项目。</li><li><strong>支持编译分离</strong>: 允许将一个项目拆分成多个独立的编译单元，然后链接在一起，加快编译速度。</li></ul></li><li><p><strong>如何使用头文件</strong>:</p><ul><li><p>使用 <code>#include</code> 预处理指令包含头文件。</p></li><li><p><strong>包含系统头文件</strong>: 使用尖括号 <code>&lt; &gt;</code>，例如 <code>#include &lt;iostream&gt;</code>。编译器会在系统头文件目录下搜索。</p></li><li><p><strong>包含自定义头文件</strong>: 使用双引号 <code>&quot;&quot;</code>，例如 <code>#include &quot;myheader.h&quot;</code>。编译器会首先在当前源文件所在目录下搜索，如果找不到，则在系统头文件目录下搜索。</p></li><li><p><strong>头文件内容</strong>:</p><ul><li><strong>声明而非定义</strong>: 通常在头文件中放置函数和变量的声明，而不是它们的定义。全局变量的定义通常放在一个 <code>.cpp</code> 文件中。</li><li><strong>类定义</strong>: 类定义通常放在头文件中。</li><li><strong>内联函数</strong>: 内联函数的定义可以放在头文件中。</li><li><strong>宏定义和常量</strong>: 常量可以使用 <code>const</code> 或 <code>constexpr</code> 定义，宏定义也可以放在头文件中。</li></ul></li><li><p><strong>避免重复包含</strong>: 使用<strong>头文件保护符 (include guards)</strong> 来防止头文件被多次包含，导致编译错误。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifndef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MYHEADER_H</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MYHEADER_H</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 头文件内容</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // MYHEADER_H</span></span></code></pre></div></li><li><p><strong>组织自定义头文件</strong>: 建议将相关的声明放在同一个头文件中，并根据模块或功能进行组织。</p></li><li></li></ul></li><li><p>现在流行用下面的方式：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#pragma once</span></span></code></pre></div></li></ul><hr><h3 id="_1-赋值总结" tabindex="-1">1. 赋值总结 <a class="header-anchor" href="#_1-赋值总结" aria-label="Permalink to &quot;1. 赋值总结&quot;">​</a></h3><ul><li><p><strong>单行多个定义和连续赋值</strong>:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pa </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pa2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pa, b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a, c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 单行定义多个变量，并进行初始化</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 连续赋值，从右向左进行，要求赋值号左边的变量已经声明</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 等价于 c = 9; b = c; a = b; d = a;</span></span></code></pre></div></li><li><p><strong>赋值运算符的返回值</strong>:</p><ul><li>赋值运算符会返回左操作数的引用，这使得连续赋值成为可能。</li></ul></li><li><p><strong>类型转换</strong>:</p><ul><li><p><strong>隐式类型转换</strong>: 当将一个低精度类型的值赋给高精度类型的变量时，编译器会自动进行隐式类型转换。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 隐式类型转换，int 转换为 double</span></span></code></pre></div></li><li><p><strong>显式类型转换 (强制类型转换)</strong>:</p><ul><li><strong>C 风格类型转换</strong>: <code>(type)expression</code>，例如 <code>(double)i</code>。 <ul><li>简洁但安全性较差，可能在不合适的情况下进行转换。</li></ul></li><li><strong>C++ 风格类型转换</strong>: 更安全、更明确，有助于减少错误： <ul><li><code>static_cast&lt;type&gt;(expression)</code>: 用于良性且可预测的类型转换，例如基本类型之间的转换、父类指针到子类指针的转换（非安全）。</li><li><code>dynamic_cast&lt;type*&gt;(expression)</code>: 用于安全的向下转型（父类指针或引用转换为子类指针或引用），运行时检查类型安全，需要多态支持。</li><li><code>const_cast&lt;type*&gt;(expression)</code>: 用于移除或添加 const 属性。</li><li><code>reinterpret_cast&lt;type*&gt;(expression)</code>: 最强大的类型转换，允许将任意类型的指针转换为任意其他类型的指针，极不安全，应谨慎使用。</li></ul></li></ul><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static_cast&lt;double&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // C++风格类型转换，将 int 转换为 double</span></span></code></pre></div></li></ul></li><li><p><strong>左值 (lvalue) 和右值 (rvalue)</strong>:</p><ul><li><strong>左值</strong>: 指表达式结束后依然存在的持久对象，可以取地址，可以放在赋值运算符的左边。例如，变量名。</li><li><strong>右值</strong>: 指表达式结束后就不再存在的临时对象或字面量值，不能取地址，只能放在赋值运算符的右边。例如，字面量、函数返回值（非左值引用）。</li><li><strong>C++11 引入的右值引用 (<code>&amp;&amp;</code>)</strong>: 扩展了右值的概念，允许绑定到即将销毁的对象，用于实现移动语义，提高性能。</li></ul></li></ul><hr><h3 id="_2-运算符总结" tabindex="-1">2. 运算符总结 <a class="header-anchor" href="#_2-运算符总结" aria-label="Permalink to &quot;2. 运算符总结&quot;">​</a></h3><ul><li><p><strong>算术运算符</strong>: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>（取模，用于整数）, <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code>.</p><ul><li>注意整数除法 <code>/</code> 的截断行为。</li><li>取模运算符 <code>%</code> 的结果符号与被除数相同（在 C++11 之后）。</li></ul></li><li><p><strong>逻辑运算符</strong>: <code>&amp;&amp;</code> (逻辑与), <code>||</code> (逻辑或), <code>!</code> (逻辑非)。</p><ul><li><strong>短路求值</strong>: <code>&amp;&amp;</code> 和 <code>||</code> 具有短路特性。 <ul><li><code>a &amp;&amp; b</code>: 如果 <code>a</code> 为假，则 <code>b</code> 不会执行。</li><li><code>a || b</code>: 如果 <code>a</code> 为真，则 <code>b</code> 不会执行。</li></ul></li></ul></li><li><p><strong>位运算符</strong>: <code>&amp;</code> (按位与), <code>|</code> (按位或), <code>^</code> (按位异或), <code>~</code> (按位取反), <code>&lt;&lt;</code> (左移), <code>&gt;&gt;</code> (右移)。</p><ul><li>位运算符通常用于对整数类型进行操作。</li><li>左移 <code>&lt;&lt;</code> 相当于乘以 2 的幂次方，右移 <code>&gt;&gt;</code> 对于无符号数相当于除以 2 的幂次方，对于有符号数，具体行为取决于编译器实现（算术右移或逻辑右移）。</li><li>复合赋值运算符：<code>&amp;=</code>, <code>|=</code>, <code>^=</code>, <code>&lt;&lt;=</code>, <code>&gt;&gt;=</code>.</li></ul></li><li><p><strong>关系运算符</strong>: <code>==</code> (等于), <code>!=</code> (不等于), <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>.</p><ul><li>用于比较两个表达式的值，返回布尔值 <code>true</code> 或 <code>false</code>。</li><li>注意区分赋值运算符 <code>=</code> 和等于运算符 <code>==</code>。</li></ul></li><li><p><strong>自增自减运算符</strong>: <code>++</code> (自增), <code>--</code> (自减)。</p><ul><li><strong>前置形式 (<code>++a</code>, <code>--a</code>)</strong>: 先自增/自减，然后返回修改后的值。</li><li><strong>后置形式 (<code>a++</code>, <code>a--</code>)</strong>: 先返回当前值，然后自增/自减。</li><li>前置形式通常比后置形式效率略高，因为后置形式需要保存原始值。</li></ul><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // a 变为 6，b 变为 6</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // c 变为 6，a 变为 7</span></span></code></pre></div></li><li><p><strong>三目运算符 (条件运算符)</strong>: <code>条件 ? 表达式1 : 表达式2</code></p><ul><li>如果条件为真，则返回 <code>表达式1</code> 的值，否则返回 <code>表达式2</code> 的值。</li><li>简化简单的 <code>if-else</code> 语句。</li><li>执行效率上，现代编译器可能会对 <code>if-else</code> 语句进行优化，实际差异可能很小。三目运算符更简洁。</li></ul><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> max_val </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // max_val 的值为 10</span></span></code></pre></div></li><li><p><strong>赋值运算符</strong>: <code>=</code></p></li><li><p><strong>逗号运算符</strong>: <code>,</code></p><ul><li>允许将多个表达式放在一个语句中，从左到右依次计算，整个逗号表达式的值是<strong>最后一个表达式的值</strong>。</li></ul><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i, j;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 整个表达式的值是 30，但 i 和 j 的值被赋值</span></span></code></pre></div></li><li><p><strong>成员访问运算符</strong>: <code>.</code> (成员选择), <code>-&gt;</code> (指针成员选择)。</p></li><li><p><strong>作用域解析运算符</strong>: <code>::</code>。</p></li><li><p><strong>sizeof 运算符</strong>: 返回变量或类型的大小（以字节为单位）。</p></li><li><p><strong>类型识别运算符</strong>: <code>typeid</code>。</p></li><li><p><strong>内存管理运算符</strong>: <code>new</code>, <code>delete</code>, <code>new[]</code>, <code>delete[]</code>。</p></li><li><p><strong>运算符优先级和结合性</strong>: 理解运算符的优先级和结合性对于正确理解表达式的计算顺序至关重要。查阅运算符优先级表。</p></li></ul><hr><h3 id="_3-控制流语句总结" tabindex="-1">3. 控制流语句总结 <a class="header-anchor" href="#_3-控制流语句总结" aria-label="Permalink to &quot;3. 控制流语句总结&quot;">​</a></h3><ul><li><p><strong><code>break</code></strong>:</p><ul><li><strong>跳出 <code>switch</code> 语句</strong>: 用于终止 <code>switch</code> 语句块的执行，防止 case 穿透。</li><li><strong>终止并跳出当前循环</strong>: 用于立即退出 <code>for</code>、<code>while</code> 或 <code>do-while</code> 循环。</li></ul></li><li><p><strong><code>continue</code></strong>:</p><ul><li><strong>结束当前循环迭代，进入下一次循环</strong>: 用于跳过当前循环体中 <code>continue</code> 之后的语句，直接开始下一次循环的迭代。</li></ul></li><li><p><strong>嵌套</strong>:</p><ul><li><strong><code>if</code> 语句嵌套</strong>: <code>if</code> 语句可以嵌套在另一个 <code>if</code> 或 <code>else</code> 语句块中，用于处理更复杂的条件判断。</li><li><strong>循环语句嵌套</strong>: 循环语句 (如 <code>for</code>、<code>while</code>) 可以相互嵌套，用于处理需要多层迭代的情况（例如，遍历二维数组）。</li><li><strong><code>switch</code> 语句嵌套</strong>: <code>switch</code> 语句可以嵌套在其他控制流语句中，但一般不建议过度嵌套，影响可读性。</li></ul></li><li><p><strong><code>goto</code> 语句 (不推荐使用)</strong>: 可以无条件跳转到程序中的标记位置。容易导致程序流程混乱，降低可读性和可维护性，应尽量避免使用。</p></li><li><p><strong><code>return</code> 语句</strong>: 用于从函数中返回，可以返回一个值（如果函数有返回值类型）。</p></li></ul><hr><h3 id="_4-宏定义" tabindex="-1">4. 宏定义 <a class="header-anchor" href="#_4-宏定义" aria-label="Permalink to &quot;4. 宏定义&quot;">​</a></h3><ul><li><p><strong><code>#define</code></strong>: 预处理器指令，用于在预编译阶段进行文本替换。</p><ul><li><p><strong>定义常量</strong>:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> N</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 将代码中所有出现的 N 替换为 60</span></span></code></pre></div></li><li><p><strong>定义宏函数 (类函数宏)</strong>:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SQUARE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ((x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x))</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 注意加括号，防止优先级问题</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SQUARE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 预编译后变为 ((5 + 2) * (5 + 2))</span></span></code></pre></div></li></ul></li><li><p><strong>宏定义的特点</strong>:</p><ul><li><strong>文本替换</strong>: 宏定义仅仅是文本替换，没有类型检查。</li><li><strong>预编译阶段处理</strong>: 在编译之前进行处理。</li><li><strong>没有作用域</strong>: 宏定义的作用域从定义处开始，直到文件末尾或遇到 <code>#undef</code> 指令。</li><li><strong>不是变量或常量</strong>: 宏不是变量，也不占用内存空间。</li><li><strong>不需要分号</strong>: <code>#define</code> 指令末尾不需要加分号。</li></ul></li><li><p><strong>宏定义的优缺点</strong>:</p><ul><li><strong>优点</strong>: <ul><li><strong>代码复用</strong>: 可以定义常用的常量或代码片段。</li><li><strong>提高效率</strong>: 对于简单的函数，宏展开可以避免函数调用的开销（但可能导致代码膨胀）。</li><li><strong>条件编译</strong>: 可以使用 <code>#ifdef</code>、<code>#ifndef</code>、<code>#else</code>、<code>#endif</code> 等进行条件编译。</li></ul></li><li><strong>缺点</strong>: <ul><li><strong>缺乏类型安全检查</strong>: 容易引入类型错误。</li><li><strong>调试困难</strong>: 宏展开后的代码不易调试。</li><li><strong>容易产生副作用</strong>: 特别是在宏函数中使用自增自减运算符时。</li><li><strong>可读性差</strong>: 复杂的宏定义可能降低代码可读性。</li></ul></li></ul></li><li><p><strong>替代方案</strong>:</p><ul><li><strong>常量</strong>: 优先使用 <code>const</code> 或 <code>constexpr</code> 定义常量，具有类型检查。</li><li><strong>内联函数</strong>: 优先使用 <code>inline</code> 函数替代简单的宏函数，既有宏的效率，又有函数的类型安全。</li><li><strong>模板</strong>: 用于实现泛型编程。</li></ul></li></ul><hr><h3 id="_5-指针的算术运算" tabindex="-1">5. 指针的算术运算 <a class="header-anchor" href="#_5-指针的算术运算" aria-label="Permalink to &quot;5. 指针的算术运算&quot;">​</a></h3><ul><li><p><strong>指针可以进行加减运算</strong>: 表示指针指向的内存地址的偏移。</p></li><li><p><strong>运算单位取决于指针类型</strong>: 指针加 <code>n</code>，实际地址增加 <code>n * sizeof(指针所指向的数据类型)</code> 字节。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ptr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ptr 指向 arr[0]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ptr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ptr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ptr 指向 arr[1]，地址增加了 1 * sizeof(int)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ptr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // ptr 指向 arr[3]，地址增加了 2 * sizeof(int)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dptr;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dptr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dptr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // dptr 指向前面的内存地址，偏移 sizeof(double) 字节</span></span></code></pre></div></li><li><p><strong>指针与整数的加减运算</strong>:</p><ul><li><code>ptr + n</code>: 指针 <code>ptr</code> 向后移动 <code>n</code> 个元素。</li><li><code>ptr - n</code>: 指针 <code>ptr</code> 向前移动 <code>n</code> 个元素。</li></ul></li><li><p><strong>指针的减法运算</strong>:</p><ul><li>两个相同类型的指针相减，结果是它们之间相隔的<strong>元素的个数</strong>。</li></ul><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> diff </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p1\`\`\`markdown</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> diff </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p1;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // diff 的值为 3 (arr[4] 的索引减去 arr[1] 的索引)</span></span></code></pre></div></li><li><p><strong>注意：指针运算的有效性</strong>:</p><ul><li><strong>确保指向有效的内存地址</strong>: 指针运算不能超出数组的边界或访问未分配的内存，否则可能导致程序崩溃或未定义的行为。</li><li><strong>指针运算通常用于数组</strong>: 指针算术运算在遍历数组元素时非常有用。</li><li><strong>void 指针</strong>: <code>void*</code> 指针可以指向任何类型的数据，但不能直接进行指针算术运算，需要先转换为具体的指针类型。</li></ul></li><li><p><strong>指针的比较运算</strong>:</p><ul><li>可以使用关系运算符 (<code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>) 比较两个指针的地址。</li><li><strong>比较相同类型的指针</strong>: 比较它们指向的内存地址。</li><li><strong>比较指向同一数组的指针</strong>: 可以判断它们在数组中的相对位置。</li><li><strong>与空指针比较</strong>: 判断指针是否指向有效的内存地址 (<code>ptr == nullptr</code> 或 <code>ptr != nullptr</code>)。</li></ul></li><li><p><strong>示例</strong>:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;iostream&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ptr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 指向 arr[0]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Initial pointer: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ptr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;, value: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ptr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ptr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 移动到下一个元素</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Pointer after increment: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ptr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;, value: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ptr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ptr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 移动两个元素</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Pointer after adding 2: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ptr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;, value: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ptr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">endPtr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Distance to the end: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endPtr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ptr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ptr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endPtr) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ptr is before endPtr&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><hr><h3 id="_6-数组-回顾与补充" tabindex="-1">6. 数组 (回顾与补充) <a class="header-anchor" href="#_6-数组-回顾与补充" aria-label="Permalink to &quot;6. 数组 (回顾与补充)&quot;">​</a></h3><ul><li><p><strong>数组的定义</strong>:</p><ul><li>相同数据类型元素的集合，存储在连续的内存位置。</li><li>定义时需要指定数组的大小。</li><li>数组名代表数组首元素的地址。</li></ul></li><li><p><strong>数组的初始化</strong>:</p><ul><li>可以使用初始化列表进行初始化。</li><li>如果部分初始化，剩余元素将被初始化为 0。</li><li>可以省略数组大小，让编译器根据初始化列表推断。</li></ul><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr1[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr2[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // arr2[2]、arr2[3]、arr2[4] 初始化为 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr3[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 编译器推断大小为 3</span></span></code></pre></div></li><li><p><strong>访问数组元素</strong>:</p><ul><li>使用下标运算符 <code>[]</code> 访问数组元素，下标从 0 开始。</li><li>例如，<code>arr[0]</code> 访问第一个元素。</li></ul></li><li><p><strong>数组越界</strong>:</p><ul><li>访问超出数组边界的元素会导致未定义的行为，可能导致程序崩溃或数据损坏。</li><li>C++ 不会自动进行数组越界检查。</li></ul></li><li><p><strong>多维数组</strong>:</p><ul><li>数组的元素也是数组。</li><li>例如，二维数组： <code>int matrix[3][4];</code> (3 行 4 列)。</li><li>访问二维数组元素： <code>matrix[row][col]</code>。</li></ul></li><li><p><strong>数组与指针的关系</strong>:</p><ul><li>数组名在大多数情况下可以隐式转换为指向数组首元素的指针。</li><li>指针可以像数组一样使用下标运算符访问元素。</li></ul><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ptr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ptr 指向 arr[0]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 访问数组元素</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ptr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 指针像数组一样访问元素</span></span></code></pre></div></li><li><p><strong>将数组传递给函数</strong>:</p><ul><li>数组作为函数参数传递时，会退化为指针。</li><li>需要额外传递数组的大小信息。</li></ul><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> printArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[], </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myArray[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myArray, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><p>作业：给你一个 int 型数组，请你使用指针的算术运算对数组中的元素进行操作：</p><ol><li>如果是偶数就+1</li><li>如果是奇数就+2</li></ol>`,26)]))}const o=i(t,[["render",h]]);export{E as __pageData,o as default};
