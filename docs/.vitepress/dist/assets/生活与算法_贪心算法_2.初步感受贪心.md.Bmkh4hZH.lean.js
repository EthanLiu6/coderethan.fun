import{_ as e,c as r,a2 as t,o}from"./chunks/framework.C9NVOr0y.js";const _=JSON.parse('{"title":"让我们简单步入“贪心”叭","description":"","frontmatter":{},"headers":[],"relativePath":"生活与算法/贪心算法/2.初步感受贪心.md","filePath":"生活与算法/贪心算法/2.初步感受贪心.md","lastUpdated":1729514131000}'),l={name:"生活与算法/贪心算法/2.初步感受贪心.md"};function i(h,a,n,s,d,c){return o(),r("div",null,a[0]||(a[0]=[t('<h1 id="让我们简单步入-贪心-叭" tabindex="-1">让我们简单步入“贪心”叭 <a class="header-anchor" href="#让我们简单步入-贪心-叭" aria-label="Permalink to &quot;让我们简单步入“贪心”叭&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">面向小白</p><p>如果对于前面的介绍你还是不能够理解到“贪心”的思想，那我们不妨用简单的案例来让你感受感受。</p></div><p>其实我们在日常生活中会不自觉的去使用“贪心”，只是大家潜意识没有对其量化认识。 <strong>贪心算法</strong>并不复杂，它的核心思想是：<strong>每一步都做出当前最优的选择</strong>，而不考虑未来的其他情况。虽然贪心策略不一定总能找到最优解，但它简单高效，适用于很多场景。我们用一些简单的、生活化的例子来解释贪心思维，再结合一点点数学，帮助大家理解。</p><h2 id="_1-最大四位数的例子-从数字中选最大" tabindex="-1">1. 最大四位数的例子：从数字中选最大 <a class="header-anchor" href="#_1-最大四位数的例子-从数字中选最大" aria-label="Permalink to &quot;1. 最大四位数的例子：从数字中选最大&quot;">​</a></h2><h3 id="_1-1-问题" tabindex="-1">1.1 问题： <a class="header-anchor" href="#_1-1-问题" aria-label="Permalink to &quot;1.1 问题：&quot;">​</a></h3><p>给定四个数字 1、2、3、4，如何组成最大的四位数？</p><h3 id="_1-2-贪心思维" tabindex="-1">1.2 贪心思维： <a class="header-anchor" href="#_1-2-贪心思维" aria-label="Permalink to &quot;1.2 贪心思维：&quot;">​</a></h3><p>根据我们的正常思维，为了组成最大的数，我们需要<strong>优先把最大的数字放在高位</strong>。这样，每一步都能让当前的结果尽可能大。这是贪心算法的基本策略。</p><h3 id="_1-3-数学过程" tabindex="-1">1.3 数学过程： <a class="header-anchor" href="#_1-3-数学过程" aria-label="Permalink to &quot;1.3 数学过程：&quot;">​</a></h3><ul><li>我们先从 1、2、3、4 中选择最大值：<strong>4</strong>，将它放在千位。</li><li>接着从剩下的 1、2、3 中选择最大值：<strong>3</strong>，放在百位。</li><li>然后从剩下的 1、2 中选择最大值：<strong>2</strong>，放在十位。</li><li>最后剩下的是 <strong>1</strong>，放在个位。</li></ul><p>最终结果就是：<strong>4321</strong>。</p><h3 id="_1-4-结论" tabindex="-1">1.4 结论： <a class="header-anchor" href="#_1-4-结论" aria-label="Permalink to &quot;1.4 结论：&quot;">​</a></h3><p>通过贪心思维，我们每次都选最大的数字放在高位，最终得到的结果是<strong>4321</strong>，这是由这四个数字能构成的最大四位数。</p><h2 id="大家可能会觉得这不是显而易见的吗-但这只能帮你解决简单的问题-复杂的问题就需要我们认真去分析了。" tabindex="-1">大家可能会觉得这不是显而易见的吗？但这只能帮你解决简单的问题，复杂的问题就需要我们认真去分析了。 <a class="header-anchor" href="#大家可能会觉得这不是显而易见的吗-但这只能帮你解决简单的问题-复杂的问题就需要我们认真去分析了。" aria-label="Permalink to &quot;大家可能会觉得这不是显而易见的吗？但这只能帮你解决简单的问题，复杂的问题就需要我们认真去分析了。&quot;">​</a></h2><h2 id="_2-选择最便宜的出行方案" tabindex="-1">2. 选择最便宜的出行方案 <a class="header-anchor" href="#_2-选择最便宜的出行方案" aria-label="Permalink to &quot;2. 选择最便宜的出行方案&quot;">​</a></h2><h3 id="_2-1-问题" tabindex="-1">2.1 问题： <a class="header-anchor" href="#_2-1-问题" aria-label="Permalink to &quot;2.1 问题：&quot;">​</a></h3><p>假设你有多种交通方式可以选择去不同的地点，但你的预算有限，如何用尽量少的钱去尽量多的地方？ 哈哈哈，突然想起之前新闻上报道的一个高中小伙拿着小钱钱坐公交从xxx坐到了xxx。</p><h3 id="_2-2-贪心思维" tabindex="-1">2.2 贪心思维： <a class="header-anchor" href="#_2-2-贪心思维" aria-label="Permalink to &quot;2.2 贪心思维：&quot;">​</a></h3><p>在有限的预算下，为了去尽量多的地方，你可以<strong>每次选择最便宜的出行方式</strong>。通过这种方法，你能够保证每次都省下更多的钱，用来去更多的地点。</p><h3 id="_2-3-数学过程" tabindex="-1">2.3 数学过程： <a class="header-anchor" href="#_2-3-数学过程" aria-label="Permalink to &quot;2.3 数学过程：&quot;">​</a></h3><ul><li>你有 100 元预算，出行方案的费用分别是 15 元、20 元、35 元、50 元。</li><li>贪心策略是：先选择 15 元，再选择 20 元，再选择 35 元。总花费是 70 元，还剩 30 元。</li></ul><p>这样你就能去 3 个地方，还剩下一些钱。</p><hr><h2 id="_3-如何分配时间-优先完成最紧急的任务" tabindex="-1">3. 如何分配时间：优先完成最紧急的任务 <a class="header-anchor" href="#_3-如何分配时间-优先完成最紧急的任务" aria-label="Permalink to &quot;3. 如何分配时间：优先完成最紧急的任务&quot;">​</a></h2><h3 id="_3-1-问题" tabindex="-1">3.1 问题： <a class="header-anchor" href="#_3-1-问题" aria-label="Permalink to &quot;3.1 问题：&quot;">​</a></h3><p>你今天有很多任务要做，但时间有限，如何安排时间让你完成尽可能多的任务？</p><h3 id="_3-2-贪心思维" tabindex="-1">3.2 贪心思维： <a class="header-anchor" href="#_3-2-贪心思维" aria-label="Permalink to &quot;3.2 贪心思维：&quot;">​</a></h3><p>每次<strong>先做最紧急的任务</strong>，这样你可以保证时间用在最重要最紧急的事情上。如果总是先处理不紧急的任务，重要的任务可能来不及完成，后面会让你越来越忙碌，越来越焦虑😥，但我希望大家的日程安排是顺其自然，没有追赶的。</p><h3 id="_3-3-数学过程" tabindex="-1">3.3 数学过程： <a class="header-anchor" href="#_3-3-数学过程" aria-label="Permalink to &quot;3.3 数学过程：&quot;">​</a></h3><p>假设任务的截止时间分别是 1 小时、2 小时、3 小时、4 小时，而你有 5 小时可用。</p><ul><li>先做截止时间是 1 小时的任务。</li><li>再做截止时间是 2 小时的任务。</li><li>剩下时间做截止时间是 3 小时的任务。</li></ul><p>通过贪心算法，你优先处理紧急任务，最大化了时间的利用率，最终完成了 3 项任务。</p><hr><h2 id="_4-找零问题-使用最少的硬币" tabindex="-1">4. 找零问题：使用最少的硬币 <a class="header-anchor" href="#_4-找零问题-使用最少的硬币" aria-label="Permalink to &quot;4. 找零问题：使用最少的硬币&quot;">​</a></h2><h3 id="_4-1-问题" tabindex="-1">4.1 问题： <a class="header-anchor" href="#_4-1-问题" aria-label="Permalink to &quot;4.1 问题：&quot;">​</a></h3><p>假设你有 1 元、5 元、10 元的硬币，要凑出 28 元，如何用最少的硬币凑齐？</p><h3 id="_4-2-贪心思维" tabindex="-1">4.2 贪心思维： <a class="header-anchor" href="#_4-2-贪心思维" aria-label="Permalink to &quot;4.2 贪心思维：&quot;">​</a></h3><p>每次<strong>优先使用面值最大的硬币</strong>，这样可以尽快减少剩下的钱，从而用最少的硬币达到目标。</p><h3 id="_4-3-数学过程" tabindex="-1">4.3 数学过程： <a class="header-anchor" href="#_4-3-数学过程" aria-label="Permalink to &quot;4.3 数学过程：&quot;">​</a></h3><ul><li>用 2 个 10 元的硬币，总计 20 元，还剩 8 元。</li><li>用 1 个 5 元的硬币，总计 25 元，还剩 3 元。</li><li>用 3 个 1 元硬币，总计 28 元，正好凑齐。</li></ul><p>总共用了 <strong>6 枚硬币</strong>。</p><hr><h2 id="_5-我们已经步入-贪心算法-啦" tabindex="-1">5. 我们已经步入“贪心算法”啦 <a class="header-anchor" href="#_5-我们已经步入-贪心算法-啦" aria-label="Permalink to &quot;5. 我们已经步入“贪心算法”啦&quot;">​</a></h2><p>相信通过以上简单的几个例子，你能够毛慢感受到这里的“贪心”，如果觉得枯燥无趣的话，不妨继续往下看看，或者……emmm，自己想想自己的生活哈哈哈，我可不想让你走开我的算法生活课。后面会有具体的经典算法问题，希望你能喜欢。</p>',44)]))}const p=e(l,[["render",i]]);export{_ as __pageData,p as default};
